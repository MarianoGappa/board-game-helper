import org.scalatest.{ShouldMatchers, FunSpec}

class ChessGameTest extends FunSpec with ShouldMatchers {
  describe("ChessGame") {
    it("should print out a default starting game of Chess") {
      ChessGame.defaultGame.board.toString shouldBe
        """♜♞♝♛♚♝♞♜
          |........
          |........
          |........
          |........
          |........
          |........
          |♖♘♗♕♔♗♘♖""".stripMargin
    }

    it("should find 14 possible movements for a Rook") {
      val game = ChessGame.fromString(
        """........
          |........
          |........
          |...♜....
          |........
          |........
          |........
          |........""".stripMargin)

      movementCount(game, 3, 3) shouldBe 14
    }

    it("should find 0 possible movements for a Rook") {
      val game = ChessGame.fromString(
        """........
          |........
          |...♜....
          |..♜♜♜...
          |...♜....
          |........
          |........
          |........""".stripMargin)

      movementCount(game, 3, 3) shouldBe 0
    }

    it("should find 1 possible movements for a Rook") {
      val game = ChessGame.fromString(
        """........
          |........
          |...♜....
          |..♜♜♜...
          |...♖....
          |........
          |........
          |........""".stripMargin)

      movementCount(game, 3, 3) shouldBe 1
    }

    it("should find 13 possible movements for a Bishop") {
      val game = ChessGame.fromString(
        """........
          |........
          |........
          |...♝....
          |........
          |........
          |........
          |........""".stripMargin)

      movementCount(game, 3, 3) shouldBe 13
    }

    it("should find 0 possible movements for a Bishop") {
      val game = ChessGame.fromString(
        """........
          |........
          |..♞♞♞...
          |..♞♝♞...
          |..♞♞♞...
          |........
          |........
          |........""".stripMargin)

      movementCount(game, 3, 3) shouldBe 0
    }

    it("should find 0 possible movements for a Bishop (diagonally trapped)") {
      val game = ChessGame.fromString(
        """........
          |........
          |..♞♞♞...
          |..♞♝♞...
          |..♞.♞...
          |........
          |........
          |........""".stripMargin)

      movementCount(game, 3, 3) shouldBe 0
    }

    it("should find 0 possible movements for a Bishop (one diagonal free)") {
      val game = ChessGame.fromString(
        """........
          |........
          |..♞♞♞...
          |..♞♝♞...
          |....♞...
          |........
          |........
          |........""".stripMargin)

      movementCount(game, 3, 3) shouldBe 3
    }

    it("should find 1 possible movements for a Bishop (take)") {
      val game = ChessGame.fromString(
        """........
          |........
          |..♞♞♞...
          |..♞♝♞...
          |..♗.♞...
          |........
          |........
          |........""".stripMargin)

      movementCount(game, 3, 3) shouldBe 1
    }

    it("should find 8 possible movements for a Knight") {
      val game = ChessGame.fromString(
        """........
          |........
          |........
          |...♞....
          |........
          |........
          |........
          |........""".stripMargin)

      movementCount(game, 3, 3) shouldBe 8
    }

    it("should find 0 possible movements for a Knight") {
      val game = ChessGame.fromString(
        """♞.......
          |..♞.....
          |.♞......
          |........
          |........
          |........
          |........
          |........""".stripMargin)

      movementCount(game, 0, 0) shouldBe 0
    }

    it("should find 1 possible movements for a Knight") {
      val game = ChessGame.fromString(
        """♞.......
          |..♞.....
          |.♗......
          |........
          |........
          |........
          |........
          |........""".stripMargin)

      movementCount(game, 0, 0) shouldBe 1
    }

    it("should find 27 possible movements for a Queen") {
      val game = ChessGame.fromString(
        """........
          |........
          |........
          |...♛....
          |........
          |........
          |........
          |........""".stripMargin)

      movementCount(game, 3, 3) shouldBe 27
    }

    it("should find 7 possible movements for a Queen") {
      val game = ChessGame.fromString(
        """......♛♛
          |......♛.
          |........
          |........
          |........
          |........
          |........
          |........""".stripMargin)

      movementCount(game, 7, 0) shouldBe 7
    }

    it("should find 1 possible movements for a Queen") {
      val game = ChessGame.fromString(
        """......♛♛
          |......♛♗
          |........
          |........
          |........
          |........
          |........
          |........""".stripMargin)

      movementCount(game, 7, 0) shouldBe 1
    }

  }

  private def movementCount(game: ChessGame, x: Int, y: Int, show: Boolean = true) = {
    val board = game.board
    implicit val rules = game.rules

    val movements = board.get(x,y).get.get.movements(board)
    movements map board.move foreach (b => println(b + "\n"))

    movements.size
  }
}
