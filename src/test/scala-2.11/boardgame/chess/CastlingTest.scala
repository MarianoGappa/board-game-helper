package boardgame.chess

import boardgame.chess.core.{ChessRules, CastlingMovement, ChessGame}
import org.scalatest.{ShouldMatchers, FunSpec}

class CastlingTest extends FunSpec with ShouldMatchers {
  describe("Castling") {
    it("should determine that black king can castle") {
      implicit val rules = ChessRules.default
      val game = ChessGame.fromString(
        """....♚..♜
          |........
          |........
          |........
          |........
          |........
          |........
          |........""".stripMargin, rules)
      val board = game.board

      game.blackPlayer.movements(board).exists {
        case m: CastlingMovement => true
        case _ => false
      } shouldBe true
    }
    it("should determine that black king can't castle because it's not in initial position") {
      val game = ChessGame.fromString(
        """...♚...♜
          |........
          |........
          |........
          |........
          |........
          |........
          |........""".stripMargin)
      implicit val rules = game.rules
      val board = game.board

      game.blackPlayer.movements(board).forall {
        case m: CastlingMovement => false
        case _ => true
      } shouldBe true
    }
    it("should determine that black king can't castle because target rook is not in initial position") {
      val game = ChessGame.fromString(
        """....♚.♜.
          |........
          |........
          |........
          |........
          |........
          |........
          |........""".stripMargin)
      implicit val rules = game.rules
      val board = game.board

      game.blackPlayer.movements(board).forall {
        case m: CastlingMovement => false
        case _ => true
      } shouldBe true
    }
    it("should determine that black king can't castle because black is on top unless otherwise specified") {
      val game = ChessGame.fromString(
        """........
          |........
          |........
          |........
          |........
          |........
          |........
          |....♚..♜""".stripMargin)
      implicit val rules = game.rules
      val board = game.board

      game.blackPlayer.movements(board).forall {
        case m: CastlingMovement => false
        case _ => true
      } shouldBe true
    }
    it("should determine that black king can castle because white is specified to be on the top") {
      val game = ChessGame.fromString(
        """........
          |........
          |........
          |........
          |........
          |........
          |........
          |....♚..♜""".stripMargin)
      implicit val rules = game.rules.copy(whitePawnDirection = 1)
      val board = game.board

      game.blackPlayer.movements(board).exists {
        case m: CastlingMovement => true
        case _ => false
      } shouldBe true
    }
    it("should determine that black king can't castle because the king is threatened") {
      val game = ChessGame.fromString(
        """........
          |........
          |........
          |........
          |........
          |........
          |....♖...
          |....♚..♜""".stripMargin)
      implicit val rules = game.rules.copy(whitePawnDirection = 1)
      val board = game.board

      game.blackPlayer.movements(board).exists {
        case m: CastlingMovement => true
        case _ => false
      } shouldBe false
    }
    it("should determine that black king can't castle because a piece the king will pass through is threatened") {
      val game = ChessGame.fromString(
        """........
          |........
          |........
          |........
          |........
          |........
          |.....♖..
          |....♚..♜""".stripMargin)
      implicit val rules = game.rules.copy(whitePawnDirection = 1)
      val board = game.board

      game.blackPlayer.movements(board).exists {
        case m: CastlingMovement => true
        case _ => false
      } shouldBe false
    }
    it("should determine that black king can't long castle because a piece the king will pass through is threatened") {
      val game = ChessGame.fromString(
        """........
          |........
          |........
          |........
          |........
          |........
          |..♖.....
          |♜...♚...""".stripMargin)
      implicit val rules = game.rules.copy(whitePawnDirection = 1)
      val board = game.board

      game.blackPlayer.movements(board).exists {
        case m: CastlingMovement => true
        case _ => false
      } shouldBe false
    }
    it("should determine that black king can long castle") {
      val game = ChessGame.fromString(
        """........
          |........
          |........
          |........
          |........
          |........
          |.....♖..
          |♜...♚...""".stripMargin)
      implicit val rules = game.rules.copy(whitePawnDirection = 1)
      val board = game.board

      game.blackPlayer.movements(board).exists {
        case m: CastlingMovement => true
        case _ => false
      } shouldBe true
    }
  }
}
