package boardgame.chess

import boardgame.chess.core._
import boardgame.core.XY
import org.scalatest.{ShouldMatchers, FunSpec}

class PawnsTest extends FunSpec with ShouldMatchers {
  describe("Pawns") {
    it("should find 1 possible move for white pawn") {
      val game = ChessGame.fromString(
        """........
          |........
          |..♟.....
          |........
          |........
          |........
          |........
          |........""".stripMargin)
      implicit val rules = game.rules

      movementCount(game, XY(2, 2)) shouldBe 1
    }

    it("should find 2 possible moves for white pawn") {
      val game = ChessGame.fromString(
        """........
          |..♟.....
          |........
          |........
          |........
          |........
          |........
          |........""".stripMargin)
      implicit val rules = game.rules

      movementCount(game, XY(2, 1)) shouldBe 2
    }

    it("should find 4 possible moves for white pawn") {
      val game = ChessGame.fromString(
        """........
          |..♟.....
          |.♖.♖....
          |........
          |........
          |........
          |........
          |........""".stripMargin)
      implicit val rules = game.rules

      movementCount(game, XY(2, 1)) shouldBe 4
    }

    it("should find 3 possible moves for white pawn") {
      val game = ChessGame.fromString(
        """........
          |........
          |..♟.....
          |.♖.♖....
          |........
          |........
          |........
          |........""".stripMargin)
      implicit val rules = game.rules

      movementCount(game, XY(2, 2)) shouldBe 3
    }

    it("should find 0 possible moves for white pawn") {
      val game = ChessGame.fromString(
        """........
          |..♟.....
          |..♖.....
          |........
          |........
          |........
          |........
          |........""".stripMargin)
      implicit val rules = game.rules

      movementCount(game, XY(2, 1), true) shouldBe 0
    }

    it("should not find white pawn in promoting position") {
      val game = ChessGame.fromString(
        """..♟.....
          |........
          |........
          |........
          |........
          |........
          |........
          |........""".stripMargin)
      implicit val rules = game.rules

      game.board.get(XY(2, 0)).get.get match {
        case p: ♟ => p.isPromoting shouldBe false
        case _ => fail
      }
    }

    it("should find white pawn in promoting position") {
      val game = ChessGame.fromString(
        """........
          |........
          |........
          |........
          |........
          |........
          |........
          |..♟.....""".stripMargin)
      implicit val rules = game.rules

      game.board.get(XY(2, 7)).get.get match {
        case p: ♟ => p.isPromoting shouldBe true
        case _ => fail
      }
    }

    it("should not find black pawn in promoting position") {
      val game = ChessGame.fromString(
        """........
          |........
          |........
          |........
          |........
          |........
          |........
          |..♙.....""".stripMargin)
      implicit val rules = game.rules

      game.board.get(XY(2, 7)).get.get match {
        case p: ♟ => p.isPromoting shouldBe false
        case _ => fail
      }
    }

    it("should find black pawn in promoting position") {
      val game = ChessGame.fromString(
        """..♙.....
          |........
          |........
          |........
          |........
          |........
          |........
          |........""".stripMargin)
      implicit val rules = game.rules

      game.board.get(XY(2, 0)).get.get match {
        case p: ♟ => p.isPromoting shouldBe true
        case _ => fail
      }
    }

    it("should find the 4 promoting moves for pawn") {
      val game = ChessGame.fromString(
        """........
          |..♙.....
          |........
          |........
          |........
          |........
          |........
          |........""".stripMargin)
      implicit val rules = game.rules

      movementCount(game, XY(2, 1)) shouldBe 4
    }
  }

  private def movementCount(game: ChessGame, point: XY, show: Boolean = false) = {
    val board = game.board
    implicit val rules = game.rules

    val movements = board.get(point).get.get.movements(board)
    if (show) movements map board.move foreach (b => println(b + "\n"))

    movements.size
  }
}
