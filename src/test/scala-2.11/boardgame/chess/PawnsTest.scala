package boardgame.chess

import boardgame.chess.core._
import boardgame.core.XY
import org.scalatest.{ShouldMatchers, FunSpec}

class PawnsTest extends FunSpec with ShouldMatchers {
  describe("Pawns") {
    it("should find 1 possible move for black pawn") {
      val game = ChessGame.fromString(
        """........
          |........
          |..♟.....
          |........
          |........
          |........
          |........
          |........""".stripMargin)

      val board = game.board
      game.blackPlayer.pieces(board).head.movements(board).size shouldBe 1
    }

    it("should find 2 possible moves for black pawn") {
      val game = ChessGame.fromString(
        """........
          |..♟.....
          |........
          |........
          |........
          |........
          |........
          |........""".stripMargin)

      val board = game.board
      game.blackPlayer.pieces(board).head.movements(board).size shouldBe 2
    }

    it("should find 4 possible moves for black pawn") {
      val game = ChessGame.fromString(
        """........
          |..♟.....
          |.♖.♖....
          |........
          |........
          |........
          |........
          |........""".stripMargin)

      val board = game.board
      game.blackPlayer.pieces(board).head.movements(board).size shouldBe 4
    }

    it("should find 3 possible moves for black pawn") {
      val game = ChessGame.fromString(
        """........
          |........
          |..♟.....
          |.♖.♖....
          |........
          |........
          |........
          |........""".stripMargin)

      val board = game.board
      game.blackPlayer.pieces(board).head.movements(board).size shouldBe 3
    }

    it("should find 0 possible moves for black pawn") {
      val game = ChessGame.fromString(
        """........
          |..♟.....
          |..♖.....
          |........
          |........
          |........
          |........
          |........""".stripMargin)

      val board = game.board
      game.blackPlayer.pieces(board).head.movements(board).size shouldBe 0
    }

    it("should not find black pawn in promoting position") {
      val game = ChessGame.fromString(
        """..♟.....
          |........
          |........
          |........
          |........
          |........
          |........
          |........""".stripMargin)

      game.blackPlayer.pieces(game.board).head match {
        case p: ♟ => p.isPromoting shouldBe false
        case _ => fail
      }
    }

    it("should find black pawn in promoting position") {
      val game = ChessGame.fromString(
        """........
          |........
          |........
          |........
          |........
          |........
          |........
          |..♟.....""".stripMargin)

      game.blackPlayer.pieces(game.board).head match {
        case p: ♟ => p.isPromoting shouldBe true
        case _ => fail
      }
    }

    it("should not find white pawn in promoting position") {
      val game = ChessGame.fromString(
        """........
          |........
          |........
          |........
          |........
          |........
          |........
          |..♙.....""".stripMargin)

      game.whitePlayer.pieces(game.board).head match {
        case p: ♟ => p.isPromoting shouldBe false
        case _ => fail
      }
    }

    it("should find white pawn in promoting position") {
      val game = ChessGame.fromString(
        """..♙.....
          |........
          |........
          |........
          |........
          |........
          |........
          |........""".stripMargin)

      game.whitePlayer.pieces(game.board).head match {
        case p: ♟ => p.isPromoting shouldBe true
        case _ => fail
      }
    }

    it("should find the 4 promoting moves for pawn") {
      val game = ChessGame.fromString(
        """........
          |..♙.....
          |........
          |........
          |........
          |........
          |........
          |........""".stripMargin)
      val board = game.board

      game.whitePlayer.pieces(board).head.movements(board).size shouldBe 4
    }
  }
}
