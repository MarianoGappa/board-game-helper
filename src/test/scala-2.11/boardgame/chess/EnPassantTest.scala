package boardgame.chess

import boardgame.chess.core._
import boardgame.core.XY
import org.scalatest.{ShouldMatchers, FunSpec}

class EnPassantTest extends FunSpec with ShouldMatchers{
  describe("En Passant") {
    it("should find only en passant take movement for white pawn") {
      val game = ChessGame.fromString(
        """........
          |........
          |........
          |........
          |........
          |..♟♙....
          |..♟↑....
          |........""".stripMargin)
      implicit val rules = game.rules

      val board = game.board

      val movements = board.get(XY(2,5)).get.get.movements(board)

      movements.size shouldBe 1
      movements.toList.head shouldBe a [EnPassantTakeMovement]
    }
    it("should find 2 moves including en passant for black pawn") {
      val game = ChessGame.fromString(
        """........
          |........
          |...↓....
          |...♟♙...
          |........
          |........
          |........
          |........""".stripMargin)
      implicit val rules = game.rules

      movementCount(game, XY(4, 3)) shouldBe 2
    }
    it("should not find en passant take move for black pawn, since king would be threatened") {
      val game = ChessGame.fromString(
        """....♜...
          |........
          |...↓....
          |...♙♟...
          |........
          |........
          |....♔...
          |........""".stripMargin)
      implicit val rules = game.rules

      movementCount(game, XY(4, 3)) shouldBe 1
    }
  }

  private def movementCount(game: ChessGame, point: XY, show: Boolean = false) = {
    val board = game.board
    implicit val rules = game.rules

    val movements = board.get(point).get.get.movements(board)
    if (show) movements map board.move foreach (b => println(b + "\n"))

    movements.size
  }
}
