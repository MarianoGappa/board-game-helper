package boardgame.chess

import boardgame.chess.core._
import boardgame.core.XY
import org.scalatest.{ShouldMatchers, FunSpec}

class EnPassantTest extends FunSpec with ShouldMatchers{
  describe("En Passant") {
    it("should find only en passant take movement for white pawn") {
      val game = ChessGame.fromString(
        """........
          |........
          |........
          |........
          |........
          |..♟♙....
          |..♟↑....
          |........""".stripMargin)
      implicit val rules = game.rules

      val board = game.board
      val movements = game.whitePlayer.pieces(board).head.movements(board)

      movements.size shouldBe 1
      movements.toList.head shouldBe a [EnPassantTakeMovement]
    }
    it("should find 2 moves including en passant for black pawn") {
      val game = ChessGame.fromString(
        """........
          |........
          |...↓....
          |...♟♙...
          |........
          |........
          |........
          |........""".stripMargin)
      implicit val rules = game.rules

      val board = game.board
      game.blackPlayer.pieces(board).head.movements(board).size shouldBe 2
    }
    it("should not find en passant take move for black pawn, since king would be threatened") {
      val game = ChessGame.fromString(
        """....♖...
          |........
          |...↓....
          |...♙♟...
          |........
          |........
          |....♚...
          |........""".stripMargin)
      implicit val rules = game.rules.copy(whitePawnDirection = -1)

      val board = game.board
      game.whitePlayer.pieces(board).head.movements(board).size shouldBe 1
    }
  }
}
