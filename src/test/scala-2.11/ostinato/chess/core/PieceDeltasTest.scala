package ostinato.chess.core

import org.scalatest.{ FunSpec, ShouldMatchers }
import ostinato.core.{ Piece, XY }

class PieceDeltasTest extends FunSpec with ShouldMatchers {
  describe("Piece deltas on the board") {
    it("should find no deltas for trapped king") {
      val game = ChessGame.fromGridString(
        """........
          |........
          |...♜♜♜..
          |...♜♚♜..
          |...♜♜♜..
          |........
          |........
          |........""".stripMargin)

      game.board.kings.head.deltas(game.board) shouldBe Set()
    }
    it("should find only one delta for trapped king") {
      val game = ChessGame.fromGridString(
        """........
          |........
          |...♜♜♜..
          |...♜♚♜..
          |...♜.♜..
          |........
          |........
          |........""".stripMargin)

      game.board.kings.head.deltas(game.board) shouldBe Set(XY(0, 1))
    }
    it("should find all deltas for king (except castling)") {
      val game = ChessGame.fromGridString(
        """........
          |........
          |........
          |....♚...
          |........
          |........
          |........
          |........""".stripMargin)

      game.board.kings.head.deltas(game.board) shouldBe
        Piece.toXYs(Set((-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (1, 1), (-1, 1), (1, -1)))
    }
    it("should find all deltas for king (including castling but except going up)") {
      val game = ChessGame.fromGridString(
        """....♚...
          |........
          |........
          |........
          |........
          |........
          |........
          |........""".stripMargin)

      game.board.kings.head.deltas(game.board) shouldBe
        Piece.toXYs(Set((-1, 0), (1, 0), (0, 1), (1, 1), (-1, 1), (2, 0), (-2, 0)))
    }
    it("should find delta to capture enemy queen") {
      val game = ChessGame.fromGridString(
        """........
          |........
          |...♜♜♜..
          |...♜♚♕..
          |...♜♜♜..
          |........
          |........
          |........""".stripMargin)

      game.board.kings.head.deltas(game.board) shouldBe
        Piece.toXYs(Set((1, 0)))
    }
    it("should find all pawn deltas including en passant movement") {
      val game = ChessGame.fromGridString(
        """........
          |........
          |........
          |........
          |........
          |........
          |...♙....
          |........""".stripMargin)

      game.board.pawns.head.deltas(game.board) shouldBe
        Piece.toXYs(Set((0, -1), (0, -2), (-1, -1), (1, -1)))
    }
    it("should find all pawn deltas except en passant movement") {
      val game = ChessGame.fromGridString(
        """........
          |........
          |........
          |........
          |........
          |...♙....
          |........
          |........""".stripMargin)

      game.board.pawns.head.deltas(game.board) shouldBe
        Piece.toXYs(Set((0, -1), (-1, -1), (1, -1)))
    }
    it("should find all pawn deltas except en passant movement, and promotion quadruplication shouldn't affect it") {
      val game = ChessGame.fromGridString(
        """........
          |...♙....
          |........
          |........
          |........
          |........
          |........
          |........""".stripMargin)

      game.board.pawns.head.deltas(game.board) shouldBe
        Piece.toXYs(Set((0, -1), (-1, -1), (1, -1)))
    }
    it("should find all deltas for queen") {
      val game = ChessGame.fromGridString(
        """........
          |...♛....
          |........
          |........
          |........
          |........
          |........
          |........""".stripMargin)

      game.board.queens.head.deltas(game.board) shouldBe
        Piece.toXYs(Set((0, -1), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (-1, 0), (-2, 0), (-3, 0), (1, 0),
          (2, 0), (3, 0), (4, 0), (-1, -1), (1, -1), (-1, 1), (-2, 2), (-3, 3), (1, 1), (2, 2), (3, 3), (4, 4)))
    }

  }
}
