package ostinato.chess

import org.scalatest.{FunSpec, ShouldMatchers}
import ostinato.chess.core._

class InsufficientMaterialTest extends FunSpec with ShouldMatchers {
  describe("Board Insufficient material") {
    it("should find insufficient material on the Kk case") {
      val game = ChessGame.fromString(
        """........
          |........
          |........
          |...♔....
          |........
          |....♚...
          |........
          |........""".stripMargin)

      game.board.insufficientMaterial shouldBe true
    }
    it("should find insufficient material on the KBk case") {
      val game = ChessGame.fromString(
        """........
          |.....♗..
          |........
          |...♔....
          |........
          |....♚...
          |........
          |........""".stripMargin)

      game.board.insufficientMaterial shouldBe true
    }
    it("should find insufficient material on the Kkb case") {
      val game = ChessGame.fromString(
        """........
          |........
          |........
          |...♔....
          |........
          |....♚...
          |..♝.....
          |........""".stripMargin)

      game.board.insufficientMaterial shouldBe true
    }
    it("should find insufficient material on the KNk case") {
      val game = ChessGame.fromString(
        """........
          |........
          |......♘.
          |...♔....
          |........
          |....♚...
          |........
          |........""".stripMargin)

      game.board.insufficientMaterial shouldBe true
    }
    it("should find insufficient material on the Kkn case") {
      val game = ChessGame.fromString(
        """........
          |........
          |........
          |...♔....
          |........
          |....♚...
          |........
          |.♞......""".stripMargin)

      game.board.insufficientMaterial shouldBe true
    }
    it("should find insufficient material on the KBkb case") {
      val game = ChessGame.fromString(
        """♝.♝.♝.♝.
          |.♝.♝.♝.♝
          |♗.♗.♗.♗.
          |.♗.♔.♗.♗
          |..♗.....
          |....♚...
          |........
          |........""".stripMargin)

      game.board.insufficientMaterial shouldBe true
    }
    it("should find Draw based on insufficient material") {
      val game = ChessGame.fromString(
        """♝.♝.♝.♝.
          |.♝.♝.♝.♝
          |♗.♗.♗.♗.
          |.♗.♔.♗.♗
          |..♗.....
          |....♚...
          |........
          |........""".stripMargin)

      game.board.actions shouldBe Set(DrawAction(WhiteChessPlayer))
    }
  }
}
