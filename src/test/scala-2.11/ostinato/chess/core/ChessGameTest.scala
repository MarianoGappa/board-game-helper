package ostinato.chess.core

import ostinato.chess.core._
import org.scalatest.{FunSpec, ShouldMatchers}

class ChessGameTest extends FunSpec with ShouldMatchers {
  describe("ChessGame actions") {
    it("should print out a default starting game of Chess") {
      ChessGame.defaultGame.board.toString shouldBe
        """♜♞♝♛♚♝♞♜
          |♟♟♟♟♟♟♟♟
          |........
          |........
          |........
          |........
          |♙♙♙♙♙♙♙♙
          |♖♘♗♕♔♗♘♖""".stripMargin
    }

    it("should find 14 possible actions for a Rook") {
      val game = ChessGame.fromGridString(
        """........
          |........
          |........
          |...♜....
          |........
          |........
          |........
          |........""".stripMargin, turn = BlackChessPlayer)

      game.board.rooks.head.actions(game.board).size shouldBe 14
    }

    it("should find 0 possible actions for a Rook") {
      val game = ChessGame.fromGridString(
        """........
          |........
          |...♞....
          |..♞♜♞...
          |...♞....
          |........
          |........
          |........""".stripMargin, turn = BlackChessPlayer)

      game.board.rooks.head.actions(game.board).size shouldBe 0
    }

    it("should find 1 possible actions for a Rook") {
      val game = ChessGame.fromGridString(
        """........
          |........
          |...♞....
          |..♞♜♞...
          |...♖....
          |........
          |........
          |........""".stripMargin, turn = BlackChessPlayer)

      game.board.rooks.head.actions(game.board).size shouldBe 1
    }

    it("should find 13 possible actions for a Bishop") {
      val game = ChessGame.fromGridString(
        """........
          |........
          |........
          |...♝....
          |........
          |........
          |........
          |........""".stripMargin, turn = BlackChessPlayer)

      game.board.pieces.head.actions(game.board).size shouldBe 13
    }

    it("should find 0 possible actions for a Bishop") {
      val game = ChessGame.fromGridString(
        """........
          |........
          |..♞♞♞...
          |..♞♝♞...
          |..♞♞♞...
          |........
          |........
          |........""".stripMargin, turn = BlackChessPlayer)

      game.board.bishops.head.actions(game.board).size shouldBe 0
    }

    it("should find 0 possible actions for a Bishop (diagonally trapped)") {
      val game = ChessGame.fromGridString(
        """........
          |........
          |..♞♞♞...
          |..♞♝♞...
          |..♞.♞...
          |........
          |........
          |........""".stripMargin, turn = BlackChessPlayer)

      game.board.bishops.head.actions(game.board).size shouldBe 0
    }

    it("should find 0 possible actions for a Bishop (one diagonal free)") {
      val game = ChessGame.fromGridString(
        """........
          |........
          |..♞♞♞...
          |..♞♝♞...
          |....♞...
          |........
          |........
          |........""".stripMargin, turn = BlackChessPlayer)

      game.board.bishops.head.actions(game.board).size shouldBe 3
    }

    it("should find 1 possible actions for a Bishop (take)") {
      val game = ChessGame.fromGridString(
        """........
          |........
          |..♞♞♞...
          |..♞♝♞...
          |..♗.♞...
          |........
          |........
          |........""".stripMargin, turn = BlackChessPlayer)

      game.board.bishops.head.actions(game.board).size shouldBe 1
    }

    it("should find 8 possible actions for a Knight") {
      val game = ChessGame.fromGridString(
        """........
          |........
          |........
          |...♞....
          |........
          |........
          |........
          |........""".stripMargin, turn = BlackChessPlayer)

      game.board.pieces.head.actions(game.board).size shouldBe 8
    }

    it("should find 0 possible actions for a Knight") {
      val game = ChessGame.fromGridString(
        """♞.......
          |..♝.....
          |.♝......
          |........
          |........
          |........
          |........
          |........""".stripMargin, turn = BlackChessPlayer)

      game.board.knights.head.actions(game.board).size shouldBe 0
    }

    it("should find 1 possible actions for a Knight") {
      val game = ChessGame.fromGridString(
        """♞.......
          |..♝.....
          |.♗......
          |........
          |........
          |........
          |........
          |........""".stripMargin, turn = BlackChessPlayer)

      game.board.knights.head.actions(game.board).size shouldBe 1
    }

    it("should find 27 possible actions for a Queen") {
      val game = ChessGame.fromGridString(
        """........
          |........
          |........
          |...♛....
          |........
          |........
          |........
          |........""".stripMargin, turn = BlackChessPlayer)

      game.board.pieces.head.actions(game.board).size shouldBe 27
    }

    it("should find 7 possible actions for a Queen") {
      val game = ChessGame.fromGridString(
        """......♝♛
          |......♝.
          |........
          |........
          |........
          |........
          |........
          |........""".stripMargin, turn = BlackChessPlayer)

      game.board.queens.head.actions(game.board).size shouldBe 7
    }

    it("should find 1 possible actions for a Queen") {
      val game = ChessGame.fromGridString(
        """......♝♛
          |......♝♗
          |........
          |........
          |........
          |........
          |........
          |........""".stripMargin, turn = BlackChessPlayer)

      game.board.queens.head.actions(game.board).size shouldBe 1
    }

    it("should find 0 possible actions for a Queen; can't take King") {
      val game = ChessGame.fromGridString(
        """......♝♛
          |......♝♔
          |........
          |........
          |........
          |........
          |........
          |........""".stripMargin, turn = BlackChessPlayer)

      game.board.queens.head.actions(game.board).size shouldBe 0
    }

    it("should find 8 possible actions for a King") {
      val game = ChessGame.fromGridString(
        """........
          |........
          |........
          |...♔....
          |........
          |........
          |........
          |........""".stripMargin, turn = WhiteChessPlayer)

      game.board.actions.size shouldBe 10
    }

    it("should rotate the default starting game of Chess") {
      ChessGame.defaultGame.rotate.board.toString shouldBe
        """♖♘♗♔♕♗♘♖
          |♙♙♙♙♙♙♙♙
          |........
          |........
          |........
          |........
          |♟♟♟♟♟♟♟♟
          |♜♞♝♚♛♝♞♜""".stripMargin
    }
  }
}
