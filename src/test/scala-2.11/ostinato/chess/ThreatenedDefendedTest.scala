package ostinato.chess

import ostinato.chess.core._
import ostinato.core.XY
import org.scalatest.{ShouldMatchers, FunSpec}

class ThreatenedDefendedTest extends FunSpec with ShouldMatchers {
  describe("ChessGame threatened/defended pieces") {
    it("should find no actions for King if it's threatened in every direction") {
      val game = ChessGame.fromString(
        """..♛.....
          |........
          |♛.......
          |...♔....
          |.......♛
          |........
          |........
          |....♛...""".stripMargin, turn = WhiteChessPlayer)

      game.board.kings.head.actions(game.board) shouldBe Set()
    }
    it("should find that the Queen is defended") {
      val game = ChessGame.fromString(
        """..♛.....
          |........
          |..♛.....
          |........
          |........
          |........
          |........
          |........""".stripMargin)

      game.board.queens.head.isDefended(game.board) shouldBe true
    }

    it("should find that the Queen is threatened") {
      val game = ChessGame.fromString(
        """..♖.....
          |........
          |..♛.....
          |........
          |........
          |........
          |........
          |........""".stripMargin)

      game.board.queens.head.isThreatened(game.board) shouldBe true
    }

    it("should find that the Queen is not threatened") {
      val game = ChessGame.fromString(
        """...♖....
          |........
          |..♛.....
          |........
          |........
          |........
          |........
          |........""".stripMargin)

      game.board.queens.head.isThreatened(game.board) shouldBe false
    }
  }
}
