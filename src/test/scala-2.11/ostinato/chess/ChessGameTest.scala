package ostinato.chess

import ostinato.chess.core._
import ostinato.core.XY
import org.scalatest.{FunSpec, ShouldMatchers}

class ChessGameTest extends FunSpec with ShouldMatchers {
  describe("ChessGame movements") {
    it("should print out a default starting game of Chess") {
      ChessGame.defaultGame.board.toString shouldBe
        """♜♞♝♛♚♝♞♜
          |♟♟♟♟♟♟♟♟
          |........
          |........
          |........
          |........
          |♙♙♙♙♙♙♙♙
          |♖♘♗♕♔♗♘♖""".stripMargin
    }

    it("should find 14 possible movements for a Rook") {
      val game = ChessGame.fromString(
        """........
          |........
          |........
          |...♜....
          |........
          |........
          |........
          |........""".stripMargin, turn = BlackChessPlayer)

      game.board.movements.size shouldBe 14
    }

    it("should find 0 possible movements for a Rook") {
      val game = ChessGame.fromString(
        """........
          |........
          |...♞....
          |..♞♜♞...
          |...♞....
          |........
          |........
          |........""".stripMargin, turn = BlackChessPlayer)

      game.board.rooks.head.movements(game.board).size shouldBe 0
    }

    it("should find 1 possible movements for a Rook") {
      val game = ChessGame.fromString(
        """........
          |........
          |...♞....
          |..♞♜♞...
          |...♖....
          |........
          |........
          |........""".stripMargin, turn = BlackChessPlayer)

      game.board.rooks.head.movements(game.board).size shouldBe 1
    }

    it("should find 13 possible movements for a Bishop") {
      val game = ChessGame.fromString(
        """........
          |........
          |........
          |...♝....
          |........
          |........
          |........
          |........""".stripMargin, turn = BlackChessPlayer)

      game.board.movements.size shouldBe 13
    }

    it("should find 0 possible movements for a Bishop") {
      val game = ChessGame.fromString(
        """........
          |........
          |..♞♞♞...
          |..♞♝♞...
          |..♞♞♞...
          |........
          |........
          |........""".stripMargin, turn = BlackChessPlayer)

      game.board.bishops.head.movements(game.board).size shouldBe 0
    }

    it("should find 0 possible movements for a Bishop (diagonally trapped)") {
      val game = ChessGame.fromString(
        """........
          |........
          |..♞♞♞...
          |..♞♝♞...
          |..♞.♞...
          |........
          |........
          |........""".stripMargin, turn = BlackChessPlayer)

      game.board.bishops.head.movements(game.board).size shouldBe 0
    }

    it("should find 0 possible movements for a Bishop (one diagonal free)") {
      val game = ChessGame.fromString(
        """........
          |........
          |..♞♞♞...
          |..♞♝♞...
          |....♞...
          |........
          |........
          |........""".stripMargin, turn = BlackChessPlayer)

      game.board.bishops.head.movements(game.board).size shouldBe 3
    }

    it("should find 1 possible movements for a Bishop (take)") {
      val game = ChessGame.fromString(
        """........
          |........
          |..♞♞♞...
          |..♞♝♞...
          |..♗.♞...
          |........
          |........
          |........""".stripMargin, turn = BlackChessPlayer)

      game.board.bishops.head.movements(game.board).size shouldBe 1
    }

    it("should find 8 possible movements for a Knight") {
      val game = ChessGame.fromString(
        """........
          |........
          |........
          |...♞....
          |........
          |........
          |........
          |........""".stripMargin, turn = BlackChessPlayer)

      game.board.movements.size shouldBe 8
    }

    it("should find 0 possible movements for a Knight") {
      val game = ChessGame.fromString(
        """♞.......
          |..♝.....
          |.♝......
          |........
          |........
          |........
          |........
          |........""".stripMargin, turn = BlackChessPlayer)

      game.board.knights.head.movements(game.board).size shouldBe 0
    }

    it("should find 1 possible movements for a Knight") {
      val game = ChessGame.fromString(
        """♞.......
          |..♝.....
          |.♗......
          |........
          |........
          |........
          |........
          |........""".stripMargin, turn = BlackChessPlayer)

      game.board.knights.head.movements(game.board).size shouldBe 1
    }

    it("should find 27 possible movements for a Queen") {
      val game = ChessGame.fromString(
        """........
          |........
          |........
          |...♛....
          |........
          |........
          |........
          |........""".stripMargin, turn = BlackChessPlayer)

      game.board.movements.size shouldBe 27
    }

    it("should find 7 possible movements for a Queen") {
      val game = ChessGame.fromString(
        """......♝♛
          |......♝.
          |........
          |........
          |........
          |........
          |........
          |........""".stripMargin, turn = BlackChessPlayer)

      game.board.queens.head.movements(game.board).size shouldBe 7
    }

    it("should find 1 possible movements for a Queen") {
      val game = ChessGame.fromString(
        """......♝♛
          |......♝♗
          |........
          |........
          |........
          |........
          |........
          |........""".stripMargin, turn = BlackChessPlayer)

      game.board.queens.head.movements(game.board).size shouldBe 1
    }

    it("should find 0 possible movements for a Queen; can't take King") {
      val game = ChessGame.fromString(
        """......♝♛
          |......♝♔
          |........
          |........
          |........
          |........
          |........
          |........""".stripMargin, turn = BlackChessPlayer)

      game.board.queens.head.movements(game.board).size shouldBe 0
    }

    it("should find 8 possible movements for a King") {
      val game = ChessGame.fromString(
        """........
          |........
          |........
          |...♔....
          |........
          |........
          |........
          |........""".stripMargin, turn = WhiteChessPlayer)

      game.board.movements.size shouldBe 8
    }
  }
}
