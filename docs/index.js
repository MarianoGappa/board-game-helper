Index.PACKAGES = {"ostinato.core" : [{"name" : "ostinato.core.Action", "shortDescription" : "", "members_class" : [{"member" : "ostinato.core.Action#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/core\/Action.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/core\/Action.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/core\/Action.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/core\/Action.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/core\/Action.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/core\/Action.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/core\/Action.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/core\/Action.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/core\/Action.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/core\/Action.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/core\/Action.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/core\/Action.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "ostinato\/core\/Action.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/core\/Action.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/core\/Action.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/core\/Action.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/core\/Action.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/core\/Action.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/core\/Action.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "gridUpdates", "tail" : "(): List[(Int, Option[PC])]", "member" : "ostinato.core.Action.gridUpdates", "link" : "ostinato\/core\/Action.html#gridUpdates:List[(Int,Option[PC])]", "kind" : "abstract def"}], "class" : "ostinato\/core\/Action.html", "kind" : "class"}, {"name" : "ostinato.core.Ai", "shortDescription" : "", "members_class" : [{"label" : "random", "tail" : ": Random", "member" : "ostinato.core.Ai.random", "link" : "ostinato\/core\/Ai.html#random:scala.util.Random", "kind" : "lazy val"}, {"member" : "ostinato.core.Ai#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/core\/Ai.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/core\/Ai.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/core\/Ai.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/core\/Ai.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/core\/Ai.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/core\/Ai.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/core\/Ai.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/core\/Ai.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/core\/Ai.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/core\/Ai.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/core\/Ai.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/core\/Ai.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "ostinato\/core\/Ai.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/core\/Ai.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/core\/Ai.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/core\/Ai.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/core\/Ai.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/core\/Ai.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/core\/Ai.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "nextAction", "tail" : "(game: G)(rules: R): Option[A]", "member" : "ostinato.core.Ai.nextAction", "link" : "ostinato\/core\/Ai.html#nextAction(game:G)(implicitrules:R):Option[A]", "kind" : "abstract def"}], "class" : "ostinato\/core\/Ai.html", "kind" : "class"}, {"name" : "ostinato.core.Board", "shortDescription" : "", "members_class" : [{"label" : "xyBetween", "tail" : "(from: XY, to: XY)(boardSize: BoardSize): Set[XY]", "member" : "ostinato.core.Board.xyBetween", "link" : "ostinato\/core\/Board.html#xyBetween(from:ostinato.core.XY,to:ostinato.core.XY)(implicitboardSize:ostinato.core.BoardSize):Set[ostinato.core.XY]", "kind" : "def"}, {"label" : "between", "tail" : "(from: XY, to: XY)(boardSize: BoardSize): Set[Location]", "member" : "ostinato.core.Board.between", "link" : "ostinato\/core\/Board.html#between(from:ostinato.core.XY,to:ostinato.core.XY)(implicitboardSize:ostinato.core.BoardSize):Set[Board.this.Location]", "kind" : "def"}, {"label" : "applyUpdate", "tail" : "(grid: Vector[Option[PC]], update: (Int, Option[PC])): Vector[Option[PC]]", "member" : "ostinato.core.Board.applyUpdate", "link" : "ostinato\/core\/Board.html#applyUpdate(grid:Vector[Option[PC]],update:(Int,Option[PC])):scala.collection.immutable.Vector[Option[PC]]", "kind" : "def"}, {"label" : "pieces", "tail" : "(): Vector[PC]", "member" : "ostinato.core.Board.pieces", "link" : "ostinato\/core\/Board.html#pieces:scala.collection.immutable.Vector[PC]", "kind" : "def"}, {"label" : "isInBounds", "tail" : "(l: Location): Boolean", "member" : "ostinato.core.Board.isInBounds", "link" : "ostinato\/core\/Board.html#isInBounds(l:Board.this.Location):Boolean", "kind" : "def"}, {"label" : "isEmptyCell", "tail" : "(l: Location): Boolean", "member" : "ostinato.core.Board.isEmptyCell", "link" : "ostinato\/core\/Board.html#isEmptyCell(l:Board.this.Location):Boolean", "kind" : "def"}, {"label" : "isPiece", "tail" : "(l: Location): Boolean", "member" : "ostinato.core.Board.isPiece", "link" : "ostinato\/core\/Board.html#isPiece(l:Board.this.Location):Boolean", "kind" : "def"}, {"label" : "get", "tail" : "(pos: XY)(boardSize: BoardSize): Location", "member" : "ostinato.core.Board.get", "link" : "ostinato\/core\/Board.html#get(pos:ostinato.core.XY)(implicitboardSize:ostinato.core.BoardSize):Board.this.Location", "kind" : "def"}, {"label" : "Location", "tail" : "", "member" : "ostinato.core.Board.Location", "link" : "ostinato\/core\/Board.html#Location=Option[Board.this.Cell]", "kind" : "type"}, {"label" : "Cell", "tail" : "", "member" : "ostinato.core.Board.Cell", "link" : "ostinato\/core\/Board.html#Cell=Option[PC]", "kind" : "type"}, {"member" : "ostinato.core.Board#<init>", "error" : "unsupported entity"}, {"label" : "grid", "tail" : ": Vector[Option[PC]]", "member" : "ostinato.core.Board.grid", "link" : "ostinato\/core\/Board.html#grid:Vector[Option[PC]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/core\/Board.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/core\/Board.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/core\/Board.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/core\/Board.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/core\/Board.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/core\/Board.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/core\/Board.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/core\/Board.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/core\/Board.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/core\/Board.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/core\/Board.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/core\/Board.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "ostinato\/core\/Board.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/core\/Board.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/core\/Board.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/core\/Board.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/core\/Board.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/core\/Board.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/core\/Board.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "doAction", "tail" : "(a: A)(rules: R): Option[B]", "member" : "ostinato.core.Board.doAction", "link" : "ostinato\/core\/Board.html#doAction(a:A)(implicitrules:R):Option[B]", "kind" : "abstract def"}, {"label" : "movementsOfDelta", "tail" : "(from: XY, delta: XY)(rules: R): Set[A]", "member" : "ostinato.core.Board.movementsOfDelta", "link" : "ostinato\/core\/Board.html#movementsOfDelta(from:ostinato.core.XY,delta:ostinato.core.XY)(implicitrules:R):Set[A]", "kind" : "abstract def"}, {"label" : "actions", "tail" : "(rules: R): Set[A]", "member" : "ostinato.core.Board.actions", "link" : "ostinato\/core\/Board.html#actions(implicitrules:R):Set[A]", "kind" : "abstract def"}], "class" : "ostinato\/core\/Board.html", "kind" : "class"}, {"name" : "ostinato.core.BoardSize", "shortDescription" : "", "members_case class" : [{"member" : "ostinato.core.BoardSize#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": Int", "member" : "ostinato.core.BoardSize.y", "link" : "ostinato\/core\/BoardSize.html#y:Int", "kind" : "val"}, {"label" : "x", "tail" : ": Int", "member" : "ostinato.core.BoardSize.x", "link" : "ostinato\/core\/BoardSize.html#x:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/core\/BoardSize.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/core\/BoardSize.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/core\/BoardSize.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/core\/BoardSize.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/core\/BoardSize.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/core\/BoardSize.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/core\/BoardSize.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/core\/BoardSize.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/core\/BoardSize.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/core\/BoardSize.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/core\/BoardSize.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/core\/BoardSize.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/core\/BoardSize.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/core\/BoardSize.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/core\/BoardSize.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/core\/BoardSize.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/core\/BoardSize.html", "kind" : "case class"}, {"name" : "ostinato.core.Game", "shortDescription" : "", "members_class" : [{"member" : "ostinato.core.Game#<init>", "error" : "unsupported entity"}, {"label" : "rules", "tail" : ": Rules", "member" : "ostinato.core.Game.rules", "link" : "ostinato\/core\/Game.html#rules:ostinato.core.Rules", "kind" : "val"}, {"label" : "players", "tail" : ": List[PL]", "member" : "ostinato.core.Game.players", "link" : "ostinato\/core\/Game.html#players:List[PL]", "kind" : "val"}, {"label" : "board", "tail" : ": B", "member" : "ostinato.core.Game.board", "link" : "ostinato\/core\/Game.html#board:B", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/core\/Game.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/core\/Game.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/core\/Game.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/core\/Game.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/core\/Game.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/core\/Game.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/core\/Game.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/core\/Game.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/core\/Game.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/core\/Game.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/core\/Game.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/core\/Game.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "ostinato\/core\/Game.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/core\/Game.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/core\/Game.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/core\/Game.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/core\/Game.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/core\/Game.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/core\/Game.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "ostinato\/core\/Game.html", "kind" : "class"}, {"name" : "ostinato.core.Piece", "shortDescription" : "", "object" : "ostinato\/core\/Piece$.html", "members_class" : [{"label" : "movementsOfDelta", "tail" : "(from: XY, delta: XY, board: B)(rules: R): Set[A]", "member" : "ostinato.core.Piece.movementsOfDelta", "link" : "ostinato\/core\/Piece.html#movementsOfDelta(from:ostinato.core.XY,delta:ostinato.core.XY,board:B)(implicitrules:R):Set[A]", "kind" : "def"}, {"label" : "allMovementsOfDelta", "tail" : "(from: XY, delta: XY, board: B)(rules: R): Set[A]", "member" : "ostinato.core.Piece.allMovementsOfDelta", "link" : "ostinato\/core\/Piece.html#allMovementsOfDelta(from:ostinato.core.XY,delta:ostinato.core.XY,board:B)(implicitrules:R):Set[A]", "kind" : "def"}, {"member" : "ostinato.core.Piece#<init>", "error" : "unsupported entity"}, {"label" : "owner", "tail" : ": PL", "member" : "ostinato.core.Piece.owner", "link" : "ostinato\/core\/Piece.html#owner:PL", "kind" : "val"}, {"label" : "pos", "tail" : ": XY", "member" : "ostinato.core.Piece.pos", "link" : "ostinato\/core\/Piece.html#pos:ostinato.core.XY", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/core\/Piece.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/core\/Piece.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/core\/Piece.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/core\/Piece.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/core\/Piece.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/core\/Piece.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/core\/Piece.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/core\/Piece.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/core\/Piece.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/core\/Piece.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/core\/Piece.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/core\/Piece.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "ostinato\/core\/Piece.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/core\/Piece.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/core\/Piece.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/core\/Piece.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/core\/Piece.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/core\/Piece.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/core\/Piece.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "movedTo", "tail" : "(pos: XY): PC", "member" : "ostinato.core.Piece.movedTo", "link" : "ostinato\/core\/Piece.html#movedTo(pos:ostinato.core.XY):PC", "kind" : "abstract def"}, {"label" : "actions", "tail" : "(board: B)(rules: R): Set[A]", "member" : "ostinato.core.Piece.actions", "link" : "ostinato\/core\/Piece.html#actions(board:B)(implicitrules:R):Set[A]", "kind" : "abstract def"}], "members_object" : [{"label" : "toXYs", "tail" : "(points: Set[(Int, Int)]): Set[XY]", "member" : "ostinato.core.Piece.toXYs", "link" : "ostinato\/core\/Piece$.html#toXYs(points:Set[(Int,Int)]):Set[ostinato.core.XY]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/core\/Piece$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/core\/Piece$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/core\/Piece$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/core\/Piece$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/core\/Piece$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/core\/Piece$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/core\/Piece$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/core\/Piece$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/core\/Piece$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/core\/Piece$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/core\/Piece$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/core\/Piece$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "ostinato\/core\/Piece$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/core\/Piece$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/core\/Piece$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/core\/Piece$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/core\/Piece$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/core\/Piece$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/core\/Piece$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "ostinato\/core\/Piece.html", "kind" : "object"}, {"name" : "ostinato.core.Player", "shortDescription" : "", "members_class" : [{"label" : "actionStream", "tail" : "(board: B)(rules: R): Stream[A]", "member" : "ostinato.core.Player.actionStream", "link" : "ostinato\/core\/Player.html#actionStream(board:B)(implicitrules:R):Stream[A]", "kind" : "def"}, {"label" : "actions", "tail" : "(board: B)(rules: R): Set[A]", "member" : "ostinato.core.Player.actions", "link" : "ostinato\/core\/Player.html#actions(board:B)(implicitrules:R):Set[A]", "kind" : "def"}, {"label" : "pieces", "tail" : "(board: B): Set[PC]", "member" : "ostinato.core.Player.pieces", "link" : "ostinato\/core\/Player.html#pieces(board:B):Set[PC]", "kind" : "def"}, {"label" : "equals", "tail" : "(that: PL): Boolean", "member" : "ostinato.core.Player.equals", "link" : "ostinato\/core\/Player.html#equals(that:PL):Boolean", "kind" : "def"}, {"member" : "ostinato.core.Player#<init>", "error" : "unsupported entity"}, {"label" : "name", "tail" : ": String", "member" : "ostinato.core.Player.name", "link" : "ostinato\/core\/Player.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/core\/Player.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/core\/Player.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/core\/Player.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/core\/Player.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/core\/Player.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/core\/Player.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/core\/Player.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/core\/Player.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/core\/Player.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/core\/Player.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/core\/Player.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/core\/Player.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "ostinato\/core\/Player.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/core\/Player.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/core\/Player.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/core\/Player.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/core\/Player.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/core\/Player.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/core\/Player.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "ostinato\/core\/Player.html", "kind" : "class"}, {"name" : "ostinato.core.RandomAi", "shortDescription" : "", "members_class" : [{"label" : "nextAction", "tail" : "(game: G)(rules: R): Option[A]", "member" : "ostinato.core.RandomAi.nextAction", "link" : "ostinato\/core\/RandomAi.html#nextAction(game:G)(implicitrules:R):Option[A]", "kind" : "def"}, {"label" : "shuffleHead", "tail" : "(list: List[T]): Option[T]", "member" : "ostinato.core.RandomAi.shuffleHead", "link" : "ostinato\/core\/RandomAi.html#shuffleHead[T](list:List[T]):Option[T]", "kind" : "def"}, {"member" : "ostinato.core.RandomAi#<init>", "error" : "unsupported entity"}, {"label" : "random", "tail" : ": Random", "member" : "ostinato.core.Ai.random", "link" : "ostinato\/core\/RandomAi.html#random:scala.util.Random", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/core\/RandomAi.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/core\/RandomAi.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/core\/RandomAi.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/core\/RandomAi.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/core\/RandomAi.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/core\/RandomAi.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/core\/RandomAi.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/core\/RandomAi.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/core\/RandomAi.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/core\/RandomAi.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/core\/RandomAi.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/core\/RandomAi.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "ostinato\/core\/RandomAi.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/core\/RandomAi.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/core\/RandomAi.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/core\/RandomAi.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/core\/RandomAi.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/core\/RandomAi.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/core\/RandomAi.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "ostinato\/core\/RandomAi.html", "kind" : "class"}, {"name" : "ostinato.core.Rules", "shortDescription" : "", "members_class" : [{"member" : "ostinato.core.Rules#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/core\/Rules.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/core\/Rules.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/core\/Rules.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/core\/Rules.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/core\/Rules.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/core\/Rules.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/core\/Rules.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/core\/Rules.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/core\/Rules.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/core\/Rules.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/core\/Rules.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/core\/Rules.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "ostinato\/core\/Rules.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/core\/Rules.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/core\/Rules.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/core\/Rules.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/core\/Rules.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/core\/Rules.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/core\/Rules.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "ostinato\/core\/Rules.html", "kind" : "class"}, {"name" : "ostinato.core.XY", "shortDescription" : "", "object" : "ostinato\/core\/XY$.html", "members_object" : [{"label" : "fromI", "tail" : "(i: Int)(boardSize: BoardSize): XY", "member" : "ostinato.core.XY.fromI", "link" : "ostinato\/core\/XY$.html#fromI(i:Int)(implicitboardSize:ostinato.core.BoardSize):ostinato.core.XY", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/core\/XY$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/core\/XY$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/core\/XY$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/core\/XY$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/core\/XY$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/core\/XY$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/core\/XY$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/core\/XY$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/core\/XY$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/core\/XY$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/core\/XY$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/core\/XY$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "ostinato\/core\/XY$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/core\/XY$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/core\/XY$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/core\/XY$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/core\/XY$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/core\/XY$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/core\/XY$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "sign", "tail" : "(that: XY): XY", "member" : "ostinato.core.XY.sign", "link" : "ostinato\/core\/XY.html#sign(that:ostinato.core.XY):ostinato.core.XY", "kind" : "def"}, {"label" : "subtractXY", "tail" : ": Int", "member" : "ostinato.core.XY.subtractXY", "link" : "ostinato\/core\/XY.html#subtractXY:Int", "kind" : "lazy val"}, {"label" : "chebyshevDistance", "tail" : "(that: XY): Int", "member" : "ostinato.core.XY.chebyshevDistance", "link" : "ostinato\/core\/XY.html#chebyshevDistance(that:ostinato.core.XY):Int", "kind" : "def"}, {"label" : "distance", "tail" : "(that: XY): XY", "member" : "ostinato.core.XY.distance", "link" : "ostinato\/core\/XY.html#distance(that:ostinato.core.XY):ostinato.core.XY", "kind" : "def"}, {"label" : "abs", "tail" : ": XY", "member" : "ostinato.core.XY.abs", "link" : "ostinato\/core\/XY.html#abs:ostinato.core.XY", "kind" : "lazy val"}, {"label" : "sign", "tail" : ": XY", "member" : "ostinato.core.XY.sign", "link" : "ostinato\/core\/XY.html#sign:ostinato.core.XY", "kind" : "lazy val"}, {"label" : "exists", "tail" : "(boardSize: BoardSize): Boolean", "member" : "ostinato.core.XY.exists", "link" : "ostinato\/core\/XY.html#exists(implicitboardSize:ostinato.core.BoardSize):Boolean", "kind" : "def"}, {"label" : "*", "tail" : "(factor: Int): XY", "member" : "ostinato.core.XY.*", "link" : "ostinato\/core\/XY.html#*(factor:Int):ostinato.core.XY", "kind" : "def"}, {"label" : "-", "tail" : "(that: XY): XY", "member" : "ostinato.core.XY.-", "link" : "ostinato\/core\/XY.html#-(that:ostinato.core.XY):ostinato.core.XY", "kind" : "def"}, {"label" : "+", "tail" : "(that: XY): XY", "member" : "ostinato.core.XY.+", "link" : "ostinato\/core\/XY.html#+(that:ostinato.core.XY):ostinato.core.XY", "kind" : "def"}, {"label" : "toI", "tail" : "(boardSize: BoardSize): Int", "member" : "ostinato.core.XY.toI", "link" : "ostinato\/core\/XY.html#toI(implicitboardSize:ostinato.core.BoardSize):Int", "kind" : "def"}, {"member" : "ostinato.core.XY#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": Int", "member" : "ostinato.core.XY.y", "link" : "ostinato\/core\/XY.html#y:Int", "kind" : "val"}, {"label" : "x", "tail" : ": Int", "member" : "ostinato.core.XY.x", "link" : "ostinato\/core\/XY.html#x:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/core\/XY.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/core\/XY.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/core\/XY.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/core\/XY.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/core\/XY.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/core\/XY.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/core\/XY.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/core\/XY.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/core\/XY.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/core\/XY.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/core\/XY.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/core\/XY.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/core\/XY.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/core\/XY.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/core\/XY.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/core\/XY.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/core\/XY.html", "kind" : "object"}], "ostinato.chess.core" : [{"name" : "ostinato.chess.core.ActionSerialiser", "members_trait" : [{"label" : "genericPromotion", "tail" : "(toPiece: ChessPiece): Set[String]", "member" : "ostinato.chess.core.ActionSerialiser.genericPromotion", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#genericPromotion(toPiece:ostinato.chess.core.ChessPiece):scala.collection.immutable.Set[String]", "kind" : "def"}, {"label" : "CartesianProductableStringSet", "tail" : "", "member" : "ostinato.chess.core.ActionSerialiser.CartesianProductableStringSet", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#CartesianProductableStringSetextendsAnyRef", "kind" : "implicit class"}, {"label" : "CartesianProductableString", "tail" : "", "member" : "ostinato.chess.core.ActionSerialiser.CartesianProductableString", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#CartesianProductableStringextendsAnyRef", "kind" : "implicit class"}, {"label" : "serialiseAction", "tail" : "(a: ChessAction): Set[(String, (ChessAction, NotationRules))]", "member" : "ostinato.chess.core.ActionSerialiser.serialiseAction", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#serialiseAction(a:ostinato.chess.core.ChessAction):Set[(String,(ostinato.chess.core.ChessAction,ostinato.chess.core.NotationRules))]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/ActionSerialiser.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "draw", "tail" : "(a: DrawAction): Set[String]", "member" : "ostinato.chess.core.ActionSerialiser.draw", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#draw(a:ostinato.chess.core.DrawAction):Set[String]", "kind" : "abstract def"}, {"label" : "lose", "tail" : "(a: LoseAction): Set[String]", "member" : "ostinato.chess.core.ActionSerialiser.lose", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#lose(a:ostinato.chess.core.LoseAction):Set[String]", "kind" : "abstract def"}, {"label" : "castling", "tail" : "(a: CastlingAction): Set[String]", "member" : "ostinato.chess.core.ActionSerialiser.castling", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#castling(a:ostinato.chess.core.CastlingAction):Set[String]", "kind" : "abstract def"}, {"label" : "capturePromote", "tail" : "(a: CapturePromoteAction): Set[String]", "member" : "ostinato.chess.core.ActionSerialiser.capturePromote", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#capturePromote(a:ostinato.chess.core.CapturePromoteAction):Set[String]", "kind" : "abstract def"}, {"label" : "promote", "tail" : "(a: PromoteAction): Set[String]", "member" : "ostinato.chess.core.ActionSerialiser.promote", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#promote(a:ostinato.chess.core.PromoteAction):Set[String]", "kind" : "abstract def"}, {"label" : "enPassantCapture", "tail" : "(a: EnPassantCaptureAction): Set[String]", "member" : "ostinato.chess.core.ActionSerialiser.enPassantCapture", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#enPassantCapture(a:ostinato.chess.core.EnPassantCaptureAction):Set[String]", "kind" : "abstract def"}, {"label" : "capture", "tail" : "(a: CaptureAction): Set[String]", "member" : "ostinato.chess.core.ActionSerialiser.capture", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#capture(a:ostinato.chess.core.CaptureAction):Set[String]", "kind" : "abstract def"}, {"label" : "enPassant", "tail" : "(a: EnPassantAction): Set[String]", "member" : "ostinato.chess.core.ActionSerialiser.enPassant", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#enPassant(a:ostinato.chess.core.EnPassantAction):Set[String]", "kind" : "abstract def"}, {"label" : "move", "tail" : "(a: MoveAction): Set[String]", "member" : "ostinato.chess.core.ActionSerialiser.move", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#move(a:ostinato.chess.core.MoveAction):Set[String]", "kind" : "abstract def"}, {"label" : "r", "tail" : "(): NotationRules", "member" : "ostinato.chess.core.ActionSerialiser.r", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#r:ostinato.chess.core.NotationRules", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "ostinato\/chess\/core\/ActionSerialiser.html", "kind" : "trait"}, {"name" : "ostinato.chess.core.ActionWithPromotion", "members_trait" : [{"label" : "promotedPieceIccfCode", "tail" : "(): String", "member" : "ostinato.chess.core.ActionWithPromotion.promotedPieceIccfCode", "link" : "ostinato\/chess\/core\/ActionWithPromotion.html#promotedPieceIccfCode:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/ActionWithPromotion.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/ActionWithPromotion.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/ActionWithPromotion.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/ActionWithPromotion.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/ActionWithPromotion.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/ActionWithPromotion.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/ActionWithPromotion.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/ActionWithPromotion.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/ActionWithPromotion.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/ActionWithPromotion.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/ActionWithPromotion.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/ActionWithPromotion.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "ostinato\/chess\/core\/ActionWithPromotion.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/ActionWithPromotion.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/core\/ActionWithPromotion.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/chess\/core\/ActionWithPromotion.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/ActionWithPromotion.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/ActionWithPromotion.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/ActionWithPromotion.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "promotePiece", "tail" : ": ChessPiece", "member" : "ostinato.chess.core.ActionWithPromotion.promotePiece", "link" : "ostinato\/chess\/core\/ActionWithPromotion.html#promotePiece:ostinato.chess.core.ChessPiece", "kind" : "abstract val"}], "shortDescription" : "", "trait" : "ostinato\/chess\/core\/ActionWithPromotion.html", "kind" : "trait"}, {"name" : "ostinato.chess.core.AlgebraicNotation", "shortDescription" : "", "object" : "ostinato\/chess\/core\/AlgebraicNotation$.html", "members_object" : [{"label" : "allPossibleRules", "tail" : "(): Set[AlgebraicNotationRules]", "member" : "ostinato.chess.core.AlgebraicNotation.allPossibleRules", "link" : "ostinato\/chess\/core\/AlgebraicNotation$.html#allPossibleRules:Set[ostinato.chess.core.AlgebraicNotationRules]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/AlgebraicNotation$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/AlgebraicNotation$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/AlgebraicNotation$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/AlgebraicNotation$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/AlgebraicNotation$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/AlgebraicNotation$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/AlgebraicNotation$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/AlgebraicNotation$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/AlgebraicNotation$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/AlgebraicNotation$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/AlgebraicNotation$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/AlgebraicNotation$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "ostinato\/chess\/core\/AlgebraicNotation$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/AlgebraicNotation$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/core\/AlgebraicNotation$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/chess\/core\/AlgebraicNotation$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/AlgebraicNotation$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/AlgebraicNotation$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/AlgebraicNotation$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "ostinato.chess.core.AlgebraicNotationActionSerialiser", "shortDescription" : "", "members_case class" : [{"label" : "CartesianProductableStringSet", "tail" : "", "member" : "ostinato.chess.core.ActionSerialiser.CartesianProductableStringSet", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#CartesianProductableStringSetextendsAnyRef", "kind" : "implicit class"}, {"label" : "CartesianProductableString", "tail" : "", "member" : "ostinato.chess.core.ActionSerialiser.CartesianProductableString", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#CartesianProductableStringextendsAnyRef", "kind" : "implicit class"}, {"label" : "castling", "tail" : "(a: CastlingAction): Set[String]", "member" : "ostinato.chess.core.AlgebraicNotationActionSerialiser.castling", "link" : "ostinato\/chess\/core\/AlgebraicNotationActionSerialiser.html#castling(a:ostinato.chess.core.CastlingAction):Set[String]", "kind" : "def"}, {"label" : "enPassantCapture", "tail" : "(a: EnPassantCaptureAction): Set[String]", "member" : "ostinato.chess.core.AlgebraicNotationActionSerialiser.enPassantCapture", "link" : "ostinato\/chess\/core\/AlgebraicNotationActionSerialiser.html#enPassantCapture(a:ostinato.chess.core.EnPassantCaptureAction):scala.collection.immutable.Set[String]", "kind" : "def"}, {"label" : "capturePromote", "tail" : "(a: CapturePromoteAction): Set[String]", "member" : "ostinato.chess.core.AlgebraicNotationActionSerialiser.capturePromote", "link" : "ostinato\/chess\/core\/AlgebraicNotationActionSerialiser.html#capturePromote(a:ostinato.chess.core.CapturePromoteAction):scala.collection.immutable.Set[String]", "kind" : "def"}, {"label" : "capture", "tail" : "(a: CaptureAction): Set[String]", "member" : "ostinato.chess.core.AlgebraicNotationActionSerialiser.capture", "link" : "ostinato\/chess\/core\/AlgebraicNotationActionSerialiser.html#capture(a:ostinato.chess.core.CaptureAction):scala.collection.immutable.Set[String]", "kind" : "def"}, {"label" : "promote", "tail" : "(a: PromoteAction): Set[String]", "member" : "ostinato.chess.core.AlgebraicNotationActionSerialiser.promote", "link" : "ostinato\/chess\/core\/AlgebraicNotationActionSerialiser.html#promote(a:ostinato.chess.core.PromoteAction):scala.collection.immutable.Set[String]", "kind" : "def"}, {"label" : "enPassant", "tail" : "(a: EnPassantAction): Set[String]", "member" : "ostinato.chess.core.AlgebraicNotationActionSerialiser.enPassant", "link" : "ostinato\/chess\/core\/AlgebraicNotationActionSerialiser.html#enPassant(a:ostinato.chess.core.EnPassantAction):scala.collection.immutable.Set[String]", "kind" : "def"}, {"label" : "move", "tail" : "(a: MoveAction): Set[String]", "member" : "ostinato.chess.core.AlgebraicNotationActionSerialiser.move", "link" : "ostinato\/chess\/core\/AlgebraicNotationActionSerialiser.html#move(a:ostinato.chess.core.MoveAction):scala.collection.immutable.Set[String]", "kind" : "def"}, {"label" : "draw", "tail" : "(a: DrawAction): Set[String]", "member" : "ostinato.chess.core.AlgebraicNotationActionSerialiser.draw", "link" : "ostinato\/chess\/core\/AlgebraicNotationActionSerialiser.html#draw(a:ostinato.chess.core.DrawAction):Set[String]", "kind" : "def"}, {"label" : "lose", "tail" : "(a: LoseAction): Set[String]", "member" : "ostinato.chess.core.AlgebraicNotationActionSerialiser.lose", "link" : "ostinato\/chess\/core\/AlgebraicNotationActionSerialiser.html#lose(a:ostinato.chess.core.LoseAction):Set[String]", "kind" : "def"}, {"member" : "ostinato.chess.core.AlgebraicNotationActionSerialiser#<init>", "error" : "unsupported entity"}, {"label" : "r", "tail" : ": AlgebraicNotationRules", "member" : "ostinato.chess.core.AlgebraicNotationActionSerialiser.r", "link" : "ostinato\/chess\/core\/AlgebraicNotationActionSerialiser.html#r:ostinato.chess.core.AlgebraicNotationRules", "kind" : "val"}, {"label" : "genericPromotion", "tail" : "(toPiece: ChessPiece): Set[String]", "member" : "ostinato.chess.core.ActionSerialiser.genericPromotion", "link" : "ostinato\/chess\/core\/AlgebraicNotationActionSerialiser.html#genericPromotion(toPiece:ostinato.chess.core.ChessPiece):scala.collection.immutable.Set[String]", "kind" : "def"}, {"label" : "serialiseAction", "tail" : "(a: ChessAction): Set[(String, (ChessAction, NotationRules))]", "member" : "ostinato.chess.core.ActionSerialiser.serialiseAction", "link" : "ostinato\/chess\/core\/AlgebraicNotationActionSerialiser.html#serialiseAction(a:ostinato.chess.core.ChessAction):Set[(String,(ostinato.chess.core.ChessAction,ostinato.chess.core.NotationRules))]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/AlgebraicNotationActionSerialiser.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/AlgebraicNotationActionSerialiser.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/AlgebraicNotationActionSerialiser.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/AlgebraicNotationActionSerialiser.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/AlgebraicNotationActionSerialiser.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/AlgebraicNotationActionSerialiser.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/AlgebraicNotationActionSerialiser.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/AlgebraicNotationActionSerialiser.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/AlgebraicNotationActionSerialiser.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/AlgebraicNotationActionSerialiser.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/AlgebraicNotationActionSerialiser.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/AlgebraicNotationActionSerialiser.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/AlgebraicNotationActionSerialiser.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/AlgebraicNotationActionSerialiser.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/AlgebraicNotationActionSerialiser.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/AlgebraicNotationActionSerialiser.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/AlgebraicNotationActionSerialiser.html", "kind" : "case class"}, {"name" : "ostinato.chess.core.AlgebraicNotationRules", "shortDescription" : "", "members_case class" : [{"label" : "fullName", "tail" : ": String", "member" : "ostinato.chess.core.AlgebraicNotationRules.fullName", "link" : "ostinato\/chess\/core\/AlgebraicNotationRules.html#fullName:String", "kind" : "val"}, {"label" : "shortName", "tail" : ": String", "member" : "ostinato.chess.core.AlgebraicNotationRules.shortName", "link" : "ostinato\/chess\/core\/AlgebraicNotationRules.html#shortName:String", "kind" : "val"}, {"member" : "ostinato.chess.core.AlgebraicNotationRules#<init>", "error" : "unsupported entity"}, {"label" : "castlingNotation", "tail" : ": String", "member" : "ostinato.chess.core.AlgebraicNotationRules.castlingNotation", "link" : "ostinato\/chess\/core\/AlgebraicNotationRules.html#castlingNotation:String", "kind" : "val"}, {"label" : "colonForCaptures", "tail" : ": Boolean", "member" : "ostinato.chess.core.AlgebraicNotationRules.colonForCaptures", "link" : "ostinato\/chess\/core\/AlgebraicNotationRules.html#colonForCaptures:Boolean", "kind" : "val"}, {"label" : "distinguishCaptures", "tail" : ": Boolean", "member" : "ostinato.chess.core.AlgebraicNotationRules.distinguishCaptures", "link" : "ostinato\/chess\/core\/AlgebraicNotationRules.html#distinguishCaptures:Boolean", "kind" : "val"}, {"label" : "figurine", "tail" : ": Boolean", "member" : "ostinato.chess.core.AlgebraicNotationRules.figurine", "link" : "ostinato\/chess\/core\/AlgebraicNotationRules.html#figurine:Boolean", "kind" : "val"}, {"label" : "lowerCaseLetters", "tail" : ": Boolean", "member" : "ostinato.chess.core.AlgebraicNotationRules.lowerCaseLetters", "link" : "ostinato\/chess\/core\/AlgebraicNotationRules.html#lowerCaseLetters:Boolean", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/AlgebraicNotationRules.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/AlgebraicNotationRules.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/AlgebraicNotationRules.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/AlgebraicNotationRules.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/AlgebraicNotationRules.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/AlgebraicNotationRules.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/AlgebraicNotationRules.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/AlgebraicNotationRules.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/AlgebraicNotationRules.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/AlgebraicNotationRules.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/AlgebraicNotationRules.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/AlgebraicNotationRules.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/AlgebraicNotationRules.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/AlgebraicNotationRules.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/AlgebraicNotationRules.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/AlgebraicNotationRules.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/AlgebraicNotationRules.html", "kind" : "case class"}, {"name" : "ostinato.chess.core.AnPos", "shortDescription" : "", "members_case class" : [{"label" : "toString", "tail" : "(): String", "member" : "ostinato.chess.core.AnPos.toString", "link" : "ostinato\/chess\/core\/package$$AnPos.html#toString():String", "kind" : "def"}, {"member" : "ostinato.chess.core.AnPos#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": Int", "member" : "ostinato.chess.core.AnPos.y", "link" : "ostinato\/chess\/core\/package$$AnPos.html#y:Int", "kind" : "val"}, {"label" : "x", "tail" : ": Char", "member" : "ostinato.chess.core.AnPos.x", "link" : "ostinato\/chess\/core\/package$$AnPos.html#x:Char", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/package$$AnPos.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/package$$AnPos.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/package$$AnPos.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/package$$AnPos.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/package$$AnPos.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/package$$AnPos.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/package$$AnPos.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/package$$AnPos.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/package$$AnPos.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/package$$AnPos.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/package$$AnPos.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/package$$AnPos.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/package$$AnPos.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/package$$AnPos.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/package$$AnPos.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/package$$AnPos.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/package$$AnPos.html", "kind" : "case class"}, {"name" : "ostinato.chess.core.BlackChessPlayer", "shortDescription" : "", "object" : "ostinato\/chess\/core\/BlackChessPlayer$.html", "members_object" : [{"label" : "toFen", "tail" : "(): Char", "member" : "ostinato.chess.core.BlackChessPlayer.toFen", "link" : "ostinato\/chess\/core\/BlackChessPlayer$.html#toFen:Char", "kind" : "def"}, {"label" : "enemy", "tail" : "(): WhiteChessPlayer.type", "member" : "ostinato.chess.core.BlackChessPlayer.enemy", "link" : "ostinato\/chess\/core\/BlackChessPlayer$.html#enemy:ostinato.chess.core.WhiteChessPlayer.type", "kind" : "def"}, {"label" : "pawns", "tail" : "(board: ChessBoard): Set[♟]", "member" : "ostinato.chess.core.ChessPlayer.pawns", "link" : "ostinato\/chess\/core\/BlackChessPlayer$.html#pawns(board:ostinato.chess.core.ChessBoard):Set[ostinato.chess.core.♟]", "kind" : "def"}, {"label" : "kings", "tail" : "(board: ChessBoard): Set[♚]", "member" : "ostinato.chess.core.ChessPlayer.kings", "link" : "ostinato\/chess\/core\/BlackChessPlayer$.html#kings(board:ostinato.chess.core.ChessBoard):Set[ostinato.chess.core.♚]", "kind" : "def"}, {"label" : "queens", "tail" : "(board: ChessBoard): Set[♛]", "member" : "ostinato.chess.core.ChessPlayer.queens", "link" : "ostinato\/chess\/core\/BlackChessPlayer$.html#queens(board:ostinato.chess.core.ChessBoard):Set[ostinato.chess.core.♛]", "kind" : "def"}, {"label" : "bishops", "tail" : "(board: ChessBoard): Set[♝]", "member" : "ostinato.chess.core.ChessPlayer.bishops", "link" : "ostinato\/chess\/core\/BlackChessPlayer$.html#bishops(board:ostinato.chess.core.ChessBoard):Set[ostinato.chess.core.♝]", "kind" : "def"}, {"label" : "knights", "tail" : "(board: ChessBoard): Set[♞]", "member" : "ostinato.chess.core.ChessPlayer.knights", "link" : "ostinato\/chess\/core\/BlackChessPlayer$.html#knights(board:ostinato.chess.core.ChessBoard):Set[ostinato.chess.core.♞]", "kind" : "def"}, {"label" : "rooks", "tail" : "(board: ChessBoard): Set[♜]", "member" : "ostinato.chess.core.ChessPlayer.rooks", "link" : "ostinato\/chess\/core\/BlackChessPlayer$.html#rooks(board:ostinato.chess.core.ChessBoard):Set[ostinato.chess.core.♜]", "kind" : "def"}, {"label" : "nonFinalActions", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Set[ChessAction]", "member" : "ostinato.chess.core.ChessPlayer.nonFinalActions", "link" : "ostinato\/chess\/core\/BlackChessPlayer$.html#nonFinalActions(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):scala.collection.immutable.Set[ostinato.chess.core.ChessAction]", "kind" : "def"}, {"label" : "actionStream", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Stream[ChessAction]", "member" : "ostinato.chess.core.ChessPlayer.actionStream", "link" : "ostinato\/chess\/core\/BlackChessPlayer$.html#actionStream(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Stream[ostinato.chess.core.ChessAction]", "kind" : "def"}, {"label" : "actions", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Set[ChessAction]", "member" : "ostinato.chess.core.ChessPlayer.actions", "link" : "ostinato\/chess\/core\/BlackChessPlayer$.html#actions(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Set[ostinato.chess.core.ChessAction]", "kind" : "def"}, {"label" : "initialY", "tail" : "(): Int", "member" : "ostinato.chess.core.ChessPlayer.initialY", "link" : "ostinato\/chess\/core\/BlackChessPlayer$.html#initialY:Int", "kind" : "def"}, {"label" : "kingPiece", "tail" : "(board: ChessBoard): Option[ChessPiece]", "member" : "ostinato.chess.core.ChessPlayer.kingPiece", "link" : "ostinato\/chess\/core\/BlackChessPlayer$.html#kingPiece(board:ostinato.chess.core.ChessBoard):Option[ostinato.chess.core.ChessPiece]", "kind" : "def"}, {"label" : "pieces", "tail" : "(board: ChessBoard): Set[ChessPiece]", "member" : "ostinato.core.Player.pieces", "link" : "ostinato\/chess\/core\/BlackChessPlayer$.html#pieces(board:B):Set[PC]", "kind" : "def"}, {"label" : "equals", "tail" : "(that: ChessPlayer): Boolean", "member" : "ostinato.core.Player.equals", "link" : "ostinato\/chess\/core\/BlackChessPlayer$.html#equals(that:PL):Boolean", "kind" : "def"}, {"label" : "name", "tail" : ": String", "member" : "ostinato.core.Player.name", "link" : "ostinato\/chess\/core\/BlackChessPlayer$.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/BlackChessPlayer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/BlackChessPlayer$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/BlackChessPlayer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/BlackChessPlayer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/BlackChessPlayer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/BlackChessPlayer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/BlackChessPlayer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/BlackChessPlayer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/BlackChessPlayer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/BlackChessPlayer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/BlackChessPlayer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/BlackChessPlayer$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/BlackChessPlayer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/core\/BlackChessPlayer$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/BlackChessPlayer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/BlackChessPlayer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/BlackChessPlayer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "ostinato.chess.core.CaptureAction", "shortDescription" : "", "members_case class" : [{"label" : "toAn", "tail" : ": String", "member" : "ostinato.chess.core.CaptureAction.toAn", "link" : "ostinato\/chess\/core\/CaptureAction.html#toAn:String", "kind" : "val"}, {"label" : "withCheckmate", "tail" : "(): CaptureAction", "member" : "ostinato.chess.core.CaptureAction.withCheckmate", "link" : "ostinato\/chess\/core\/CaptureAction.html#withCheckmate:ostinato.chess.core.CaptureAction", "kind" : "def"}, {"label" : "withCheck", "tail" : "(): CaptureAction", "member" : "ostinato.chess.core.CaptureAction.withCheck", "link" : "ostinato\/chess\/core\/CaptureAction.html#withCheck:ostinato.chess.core.CaptureAction", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "ostinato.chess.core.CaptureAction.toString", "link" : "ostinato\/chess\/core\/CaptureAction.html#toString():String", "kind" : "def"}, {"member" : "ostinato.chess.core.CaptureAction#<init>", "error" : "unsupported entity"}, {"label" : "isCheckmate", "tail" : ": Boolean", "member" : "ostinato.chess.core.CaptureAction.isCheckmate", "link" : "ostinato\/chess\/core\/CaptureAction.html#isCheckmate:Boolean", "kind" : "val"}, {"label" : "isCheck", "tail" : ": Boolean", "member" : "ostinato.chess.core.CaptureAction.isCheck", "link" : "ostinato\/chess\/core\/CaptureAction.html#isCheck:Boolean", "kind" : "val"}, {"label" : "toPiece", "tail" : ": ChessPiece", "member" : "ostinato.chess.core.CaptureAction.toPiece", "link" : "ostinato\/chess\/core\/CaptureAction.html#toPiece:ostinato.chess.core.ChessPiece", "kind" : "val"}, {"label" : "delta", "tail" : ": XY", "member" : "ostinato.chess.core.CaptureAction.delta", "link" : "ostinato\/chess\/core\/CaptureAction.html#delta:ostinato.core.XY", "kind" : "val"}, {"label" : "fromPiece", "tail" : ": ChessPiece", "member" : "ostinato.chess.core.CaptureAction.fromPiece", "link" : "ostinato\/chess\/core\/CaptureAction.html#fromPiece:ostinato.chess.core.ChessPiece", "kind" : "val"}, {"label" : "gridUpdates", "tail" : "(): List[(Int, Option[ChessPiece])]", "member" : "ostinato.chess.core.ChessAction.gridUpdates", "link" : "ostinato\/chess\/core\/CaptureAction.html#gridUpdates:List[(Int,Option[ostinato.chess.core.ChessPiece])]", "kind" : "def"}, {"label" : "enemy", "tail" : ": ChessPlayer", "member" : "ostinato.chess.core.ChessAction.enemy", "link" : "ostinato\/chess\/core\/CaptureAction.html#enemy:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "turn", "tail" : ": ChessPlayer", "member" : "ostinato.chess.core.ChessAction.turn", "link" : "ostinato\/chess\/core\/CaptureAction.html#turn:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "isFinal", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessAction.isFinal", "link" : "ostinato\/chess\/core\/CaptureAction.html#isFinal:Boolean", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/CaptureAction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/CaptureAction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/CaptureAction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/CaptureAction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/CaptureAction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/CaptureAction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/CaptureAction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/CaptureAction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/CaptureAction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/CaptureAction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/CaptureAction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/CaptureAction.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/CaptureAction.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/CaptureAction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/CaptureAction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/CaptureAction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/CaptureAction.html", "kind" : "case class"}, {"name" : "ostinato.chess.core.CaptureActionFactory", "shortDescription" : "", "members_case class" : [{"label" : "complete", "tail" : "(isCheck: Boolean, isCheckmate: Boolean): CaptureAction", "member" : "ostinato.chess.core.CaptureActionFactory.complete", "link" : "ostinato\/chess\/core\/CaptureActionFactory.html#complete(isCheck:Boolean,isCheckmate:Boolean):ostinato.chess.core.CaptureAction", "kind" : "def"}, {"member" : "ostinato.chess.core.CaptureActionFactory#<init>", "error" : "unsupported entity"}, {"label" : "toPiece", "tail" : ": ChessPiece", "member" : "ostinato.chess.core.CaptureActionFactory.toPiece", "link" : "ostinato\/chess\/core\/CaptureActionFactory.html#toPiece:ostinato.chess.core.ChessPiece", "kind" : "val"}, {"label" : "delta", "tail" : ": XY", "member" : "ostinato.chess.core.CaptureActionFactory.delta", "link" : "ostinato\/chess\/core\/CaptureActionFactory.html#delta:ostinato.core.XY", "kind" : "val"}, {"label" : "fromPiece", "tail" : ": ChessPiece", "member" : "ostinato.chess.core.CaptureActionFactory.fromPiece", "link" : "ostinato\/chess\/core\/CaptureActionFactory.html#fromPiece:ostinato.chess.core.ChessPiece", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/CaptureActionFactory.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/CaptureActionFactory.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/CaptureActionFactory.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/CaptureActionFactory.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/CaptureActionFactory.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/CaptureActionFactory.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/CaptureActionFactory.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/CaptureActionFactory.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/CaptureActionFactory.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/CaptureActionFactory.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/CaptureActionFactory.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/CaptureActionFactory.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/CaptureActionFactory.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/CaptureActionFactory.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/CaptureActionFactory.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/CaptureActionFactory.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/CaptureActionFactory.html", "kind" : "case class"}, {"name" : "ostinato.chess.core.CapturePromoteAction", "shortDescription" : "", "members_case class" : [{"label" : "gridUpdates", "tail" : "(): List[(Int, Option[ChessPiece])]", "member" : "ostinato.chess.core.CapturePromoteAction.gridUpdates", "link" : "ostinato\/chess\/core\/CapturePromoteAction.html#gridUpdates:List[(Int,Option[ostinato.chess.core.ChessPiece])]", "kind" : "def"}, {"label" : "toAn", "tail" : ": String", "member" : "ostinato.chess.core.CapturePromoteAction.toAn", "link" : "ostinato\/chess\/core\/CapturePromoteAction.html#toAn:String", "kind" : "val"}, {"label" : "withCheckmate", "tail" : "(): CapturePromoteAction", "member" : "ostinato.chess.core.CapturePromoteAction.withCheckmate", "link" : "ostinato\/chess\/core\/CapturePromoteAction.html#withCheckmate:ostinato.chess.core.CapturePromoteAction", "kind" : "def"}, {"label" : "withCheck", "tail" : "(): CapturePromoteAction", "member" : "ostinato.chess.core.CapturePromoteAction.withCheck", "link" : "ostinato\/chess\/core\/CapturePromoteAction.html#withCheck:ostinato.chess.core.CapturePromoteAction", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "ostinato.chess.core.CapturePromoteAction.toString", "link" : "ostinato\/chess\/core\/CapturePromoteAction.html#toString():String", "kind" : "def"}, {"member" : "ostinato.chess.core.CapturePromoteAction#<init>", "error" : "unsupported entity"}, {"label" : "isCheckmate", "tail" : ": Boolean", "member" : "ostinato.chess.core.CapturePromoteAction.isCheckmate", "link" : "ostinato\/chess\/core\/CapturePromoteAction.html#isCheckmate:Boolean", "kind" : "val"}, {"label" : "isCheck", "tail" : ": Boolean", "member" : "ostinato.chess.core.CapturePromoteAction.isCheck", "link" : "ostinato\/chess\/core\/CapturePromoteAction.html#isCheck:Boolean", "kind" : "val"}, {"label" : "promotePiece", "tail" : ": ChessPiece", "member" : "ostinato.chess.core.CapturePromoteAction.promotePiece", "link" : "ostinato\/chess\/core\/CapturePromoteAction.html#promotePiece:ostinato.chess.core.ChessPiece", "kind" : "val"}, {"label" : "capturedPiece", "tail" : ": ChessPiece", "member" : "ostinato.chess.core.CapturePromoteAction.capturedPiece", "link" : "ostinato\/chess\/core\/CapturePromoteAction.html#capturedPiece:ostinato.chess.core.ChessPiece", "kind" : "val"}, {"label" : "delta", "tail" : ": XY", "member" : "ostinato.chess.core.CapturePromoteAction.delta", "link" : "ostinato\/chess\/core\/CapturePromoteAction.html#delta:ostinato.core.XY", "kind" : "val"}, {"label" : "fromPiece", "tail" : ": ChessPiece", "member" : "ostinato.chess.core.CapturePromoteAction.fromPiece", "link" : "ostinato\/chess\/core\/CapturePromoteAction.html#fromPiece:ostinato.chess.core.ChessPiece", "kind" : "val"}, {"label" : "enemy", "tail" : ": ChessPlayer", "member" : "ostinato.chess.core.ChessAction.enemy", "link" : "ostinato\/chess\/core\/CapturePromoteAction.html#enemy:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "turn", "tail" : ": ChessPlayer", "member" : "ostinato.chess.core.ChessAction.turn", "link" : "ostinato\/chess\/core\/CapturePromoteAction.html#turn:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "isFinal", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessAction.isFinal", "link" : "ostinato\/chess\/core\/CapturePromoteAction.html#isFinal:Boolean", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/CapturePromoteAction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/CapturePromoteAction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/CapturePromoteAction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/CapturePromoteAction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/CapturePromoteAction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/CapturePromoteAction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/CapturePromoteAction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/CapturePromoteAction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/CapturePromoteAction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/CapturePromoteAction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/CapturePromoteAction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/CapturePromoteAction.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/CapturePromoteAction.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/CapturePromoteAction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/CapturePromoteAction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/CapturePromoteAction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/CapturePromoteAction.html", "kind" : "case class"}, {"name" : "ostinato.chess.core.CapturePromoteActionFactory", "shortDescription" : "", "members_case class" : [{"label" : "complete", "tail" : "(isCheck: Boolean, isCheckmate: Boolean): CapturePromoteAction", "member" : "ostinato.chess.core.CapturePromoteActionFactory.complete", "link" : "ostinato\/chess\/core\/CapturePromoteActionFactory.html#complete(isCheck:Boolean,isCheckmate:Boolean):ostinato.chess.core.CapturePromoteAction", "kind" : "def"}, {"member" : "ostinato.chess.core.CapturePromoteActionFactory#<init>", "error" : "unsupported entity"}, {"label" : "promotePiece", "tail" : ": ChessPiece", "member" : "ostinato.chess.core.CapturePromoteActionFactory.promotePiece", "link" : "ostinato\/chess\/core\/CapturePromoteActionFactory.html#promotePiece:ostinato.chess.core.ChessPiece", "kind" : "val"}, {"label" : "capturedPiece", "tail" : ": ChessPiece", "member" : "ostinato.chess.core.CapturePromoteActionFactory.capturedPiece", "link" : "ostinato\/chess\/core\/CapturePromoteActionFactory.html#capturedPiece:ostinato.chess.core.ChessPiece", "kind" : "val"}, {"label" : "delta", "tail" : ": XY", "member" : "ostinato.chess.core.CapturePromoteActionFactory.delta", "link" : "ostinato\/chess\/core\/CapturePromoteActionFactory.html#delta:ostinato.core.XY", "kind" : "val"}, {"label" : "fromPiece", "tail" : ": ChessPiece", "member" : "ostinato.chess.core.CapturePromoteActionFactory.fromPiece", "link" : "ostinato\/chess\/core\/CapturePromoteActionFactory.html#fromPiece:ostinato.chess.core.ChessPiece", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/CapturePromoteActionFactory.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/CapturePromoteActionFactory.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/CapturePromoteActionFactory.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/CapturePromoteActionFactory.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/CapturePromoteActionFactory.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/CapturePromoteActionFactory.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/CapturePromoteActionFactory.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/CapturePromoteActionFactory.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/CapturePromoteActionFactory.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/CapturePromoteActionFactory.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/CapturePromoteActionFactory.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/CapturePromoteActionFactory.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/CapturePromoteActionFactory.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/CapturePromoteActionFactory.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/CapturePromoteActionFactory.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/CapturePromoteActionFactory.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/CapturePromoteActionFactory.html", "kind" : "case class"}, {"name" : "ostinato.chess.core.CastlingAction", "shortDescription" : "", "object" : "ostinato\/chess\/core\/CastlingAction$.html", "members_object" : [{"label" : "blackQueenside", "tail" : "(isCheck: Boolean, isCheckmate: Boolean): CastlingAction", "member" : "ostinato.chess.core.CastlingAction.blackQueenside", "link" : "ostinato\/chess\/core\/CastlingAction$.html#blackQueenside(isCheck:Boolean,isCheckmate:Boolean):ostinato.chess.core.CastlingAction", "kind" : "def"}, {"label" : "blackKingside", "tail" : "(isCheck: Boolean, isCheckmate: Boolean): CastlingAction", "member" : "ostinato.chess.core.CastlingAction.blackKingside", "link" : "ostinato\/chess\/core\/CastlingAction$.html#blackKingside(isCheck:Boolean,isCheckmate:Boolean):ostinato.chess.core.CastlingAction", "kind" : "def"}, {"label" : "whiteQueenside", "tail" : "(isCheck: Boolean, isCheckmate: Boolean): CastlingAction", "member" : "ostinato.chess.core.CastlingAction.whiteQueenside", "link" : "ostinato\/chess\/core\/CastlingAction$.html#whiteQueenside(isCheck:Boolean,isCheckmate:Boolean):ostinato.chess.core.CastlingAction", "kind" : "def"}, {"label" : "whiteKingside", "tail" : "(isCheck: Boolean, isCheckmate: Boolean): CastlingAction", "member" : "ostinato.chess.core.CastlingAction.whiteKingside", "link" : "ostinato\/chess\/core\/CastlingAction$.html#whiteKingside(isCheck:Boolean,isCheckmate:Boolean):ostinato.chess.core.CastlingAction", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/CastlingAction$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/CastlingAction$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/CastlingAction$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/CastlingAction$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/CastlingAction$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/CastlingAction$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/CastlingAction$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/CastlingAction$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/CastlingAction$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/CastlingAction$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/CastlingAction$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/CastlingAction$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "ostinato\/chess\/core\/CastlingAction$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/CastlingAction$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/core\/CastlingAction$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/chess\/core\/CastlingAction$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/CastlingAction$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/CastlingAction$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/CastlingAction$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "gridUpdates", "tail" : "(): List[(Int, Option[ChessPiece])]", "member" : "ostinato.chess.core.CastlingAction.gridUpdates", "link" : "ostinato\/chess\/core\/CastlingAction.html#gridUpdates:List[(Int,Option[ostinato.chess.core.ChessPiece])]", "kind" : "def"}, {"label" : "isQueenside", "tail" : "(): Boolean", "member" : "ostinato.chess.core.CastlingAction.isQueenside", "link" : "ostinato\/chess\/core\/CastlingAction.html#isQueenside:Boolean", "kind" : "def"}, {"label" : "isKingside", "tail" : "(): Boolean", "member" : "ostinato.chess.core.CastlingAction.isKingside", "link" : "ostinato\/chess\/core\/CastlingAction.html#isKingside:Boolean", "kind" : "def"}, {"label" : "toAn", "tail" : ": String", "member" : "ostinato.chess.core.CastlingAction.toAn", "link" : "ostinato\/chess\/core\/CastlingAction.html#toAn:String", "kind" : "val"}, {"label" : "withCheckmate", "tail" : "(): CastlingAction", "member" : "ostinato.chess.core.CastlingAction.withCheckmate", "link" : "ostinato\/chess\/core\/CastlingAction.html#withCheckmate:ostinato.chess.core.CastlingAction", "kind" : "def"}, {"label" : "withCheck", "tail" : "(): CastlingAction", "member" : "ostinato.chess.core.CastlingAction.withCheck", "link" : "ostinato\/chess\/core\/CastlingAction.html#withCheck:ostinato.chess.core.CastlingAction", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "ostinato.chess.core.CastlingAction.toString", "link" : "ostinato\/chess\/core\/CastlingAction.html#toString():String", "kind" : "def"}, {"member" : "ostinato.chess.core.CastlingAction#<init>", "error" : "unsupported entity"}, {"label" : "isCheckmate", "tail" : ": Boolean", "member" : "ostinato.chess.core.CastlingAction.isCheckmate", "link" : "ostinato\/chess\/core\/CastlingAction.html#isCheckmate:Boolean", "kind" : "val"}, {"label" : "isCheck", "tail" : ": Boolean", "member" : "ostinato.chess.core.CastlingAction.isCheck", "link" : "ostinato\/chess\/core\/CastlingAction.html#isCheck:Boolean", "kind" : "val"}, {"label" : "rookDelta", "tail" : ": XY", "member" : "ostinato.chess.core.CastlingAction.rookDelta", "link" : "ostinato\/chess\/core\/CastlingAction.html#rookDelta:ostinato.core.XY", "kind" : "val"}, {"label" : "targetRook", "tail" : ": ♜", "member" : "ostinato.chess.core.CastlingAction.targetRook", "link" : "ostinato\/chess\/core\/CastlingAction.html#targetRook:ostinato.chess.core.♜", "kind" : "val"}, {"label" : "kingDelta", "tail" : ": XY", "member" : "ostinato.chess.core.CastlingAction.kingDelta", "link" : "ostinato\/chess\/core\/CastlingAction.html#kingDelta:ostinato.core.XY", "kind" : "val"}, {"label" : "fromPiece", "tail" : ": ♚", "member" : "ostinato.chess.core.CastlingAction.fromPiece", "link" : "ostinato\/chess\/core\/CastlingAction.html#fromPiece:ostinato.chess.core.♚", "kind" : "val"}, {"label" : "enemy", "tail" : ": ChessPlayer", "member" : "ostinato.chess.core.ChessAction.enemy", "link" : "ostinato\/chess\/core\/CastlingAction.html#enemy:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "turn", "tail" : ": ChessPlayer", "member" : "ostinato.chess.core.ChessAction.turn", "link" : "ostinato\/chess\/core\/CastlingAction.html#turn:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "isFinal", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessAction.isFinal", "link" : "ostinato\/chess\/core\/CastlingAction.html#isFinal:Boolean", "kind" : "val"}, {"label" : "delta", "tail" : ": XY", "member" : "ostinato.chess.core.ChessAction.delta", "link" : "ostinato\/chess\/core\/CastlingAction.html#delta:ostinato.core.XY", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/CastlingAction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/CastlingAction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/CastlingAction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/CastlingAction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/CastlingAction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/CastlingAction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/CastlingAction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/CastlingAction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/CastlingAction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/CastlingAction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/CastlingAction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/CastlingAction.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/CastlingAction.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/CastlingAction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/CastlingAction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/CastlingAction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/CastlingAction.html", "kind" : "object"}, {"name" : "ostinato.chess.core.CastlingActionFactory", "shortDescription" : "", "members_case class" : [{"label" : "complete", "tail" : "(isCheck: Boolean, isCheckmate: Boolean): CastlingAction", "member" : "ostinato.chess.core.CastlingActionFactory.complete", "link" : "ostinato\/chess\/core\/CastlingActionFactory.html#complete(isCheck:Boolean,isCheckmate:Boolean):ostinato.chess.core.CastlingAction", "kind" : "def"}, {"member" : "ostinato.chess.core.CastlingActionFactory#<init>", "error" : "unsupported entity"}, {"label" : "rookDelta", "tail" : ": XY", "member" : "ostinato.chess.core.CastlingActionFactory.rookDelta", "link" : "ostinato\/chess\/core\/CastlingActionFactory.html#rookDelta:ostinato.core.XY", "kind" : "val"}, {"label" : "targetRook", "tail" : ": ♜", "member" : "ostinato.chess.core.CastlingActionFactory.targetRook", "link" : "ostinato\/chess\/core\/CastlingActionFactory.html#targetRook:ostinato.chess.core.♜", "kind" : "val"}, {"label" : "kingDelta", "tail" : ": XY", "member" : "ostinato.chess.core.CastlingActionFactory.kingDelta", "link" : "ostinato\/chess\/core\/CastlingActionFactory.html#kingDelta:ostinato.core.XY", "kind" : "val"}, {"label" : "fromPiece", "tail" : ": ♚", "member" : "ostinato.chess.core.CastlingActionFactory.fromPiece", "link" : "ostinato\/chess\/core\/CastlingActionFactory.html#fromPiece:ostinato.chess.core.♚", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/CastlingActionFactory.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/CastlingActionFactory.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/CastlingActionFactory.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/CastlingActionFactory.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/CastlingActionFactory.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/CastlingActionFactory.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/CastlingActionFactory.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/CastlingActionFactory.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/CastlingActionFactory.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/CastlingActionFactory.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/CastlingActionFactory.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/CastlingActionFactory.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/CastlingActionFactory.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/CastlingActionFactory.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/CastlingActionFactory.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/CastlingActionFactory.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/CastlingActionFactory.html", "kind" : "case class"}, {"name" : "ostinato.chess.core.CastlingSide", "shortDescription" : "", "object" : "ostinato\/chess\/core\/package$$CastlingSide$.html", "members_object" : [{"label" : "Val", "tail" : "", "member" : "scala.Enumeration.Val", "link" : "ostinato\/chess\/core\/package$$CastlingSide$.html#ValextendsEnumeration.this.ValuewithSerializable", "kind" : "class"}, {"label" : "ValueSet", "tail" : "", "member" : "scala.Enumeration.ValueSet", "link" : "ostinato\/chess\/core\/package$$CastlingSide$.html#ValueSetextendsAbstractSet[Enumeration.this.Value]withSortedSet[Enumeration.this.Value]withSortedSetLike[Enumeration.this.Value,Enumeration.this.ValueSet]withSerializable", "kind" : "class"}, {"label" : "Value", "tail" : "", "member" : "scala.Enumeration.Value", "link" : "ostinato\/chess\/core\/package$$CastlingSide$.html#ValueextendsOrdered[Enumeration.this.Value]withSerializable", "kind" : "abstract class"}, {"label" : "Kingside", "tail" : ": Value", "member" : "ostinato.chess.core.CastlingSide.Kingside", "link" : "ostinato\/chess\/core\/package$$CastlingSide$.html#Kingside:ostinato.chess.core.CastlingSide.Value", "kind" : "val"}, {"label" : "Queenside", "tail" : ": Value", "member" : "ostinato.chess.core.CastlingSide.Queenside", "link" : "ostinato\/chess\/core\/package$$CastlingSide$.html#Queenside:ostinato.chess.core.CastlingSide.Value", "kind" : "val"}, {"label" : "CastlingSide", "tail" : "", "member" : "ostinato.chess.core.CastlingSide.CastlingSide", "link" : "ostinato\/chess\/core\/package$$CastlingSide$.html#CastlingSide=ostinato.chess.core.CastlingSide.Value", "kind" : "type"}, {"label" : "Value", "tail" : "(i: Int, name: String): Value", "member" : "scala.Enumeration.Value", "link" : "ostinato\/chess\/core\/package$$CastlingSide$.html#Value(i:Int,name:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(name: String): Value", "member" : "scala.Enumeration.Value", "link" : "ostinato\/chess\/core\/package$$CastlingSide$.html#Value(name:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(i: Int): Value", "member" : "scala.Enumeration.Value", "link" : "ostinato\/chess\/core\/package$$CastlingSide$.html#Value(i:Int):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(): Value", "member" : "scala.Enumeration.Value", "link" : "ostinato\/chess\/core\/package$$CastlingSide$.html#Value:Enumeration.this.Value", "kind" : "final def"}, {"label" : "withName", "tail" : "(s: String): Value", "member" : "scala.Enumeration.withName", "link" : "ostinato\/chess\/core\/package$$CastlingSide$.html#withName(s:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "apply", "tail" : "(x: Int): Value", "member" : "scala.Enumeration.apply", "link" : "ostinato\/chess\/core\/package$$CastlingSide$.html#apply(x:Int):Enumeration.this.Value", "kind" : "final def"}, {"label" : "maxId", "tail" : "(): Int", "member" : "scala.Enumeration.maxId", "link" : "ostinato\/chess\/core\/package$$CastlingSide$.html#maxId:Int", "kind" : "final def"}, {"label" : "nextName", "tail" : ": Iterator[String]", "member" : "scala.Enumeration.nextName", "link" : "ostinato\/chess\/core\/package$$CastlingSide$.html#nextName:Iterator[String]", "kind" : "var"}, {"label" : "nextId", "tail" : ": Int", "member" : "scala.Enumeration.nextId", "link" : "ostinato\/chess\/core\/package$$CastlingSide$.html#nextId:Int", "kind" : "var"}, {"label" : "values", "tail" : "(): ValueSet", "member" : "scala.Enumeration.values", "link" : "ostinato\/chess\/core\/package$$CastlingSide$.html#values:Enumeration.this.ValueSet", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Enumeration.toString", "link" : "ostinato\/chess\/core\/package$$CastlingSide$.html#toString():String", "kind" : "def"}, {"label" : "readResolve", "tail" : "(): AnyRef", "member" : "scala.Enumeration.readResolve", "link" : "ostinato\/chess\/core\/package$$CastlingSide$.html#readResolve():AnyRef", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/package$$CastlingSide$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/package$$CastlingSide$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/package$$CastlingSide$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/package$$CastlingSide$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/package$$CastlingSide$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/package$$CastlingSide$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/package$$CastlingSide$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/package$$CastlingSide$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/package$$CastlingSide$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/package$$CastlingSide$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/package$$CastlingSide$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/package$$CastlingSide$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/package$$CastlingSide$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/core\/package$$CastlingSide$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/chess\/core\/package$$CastlingSide$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/package$$CastlingSide$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/package$$CastlingSide$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/package$$CastlingSide$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "ostinato.chess.core.ChessAction", "shortDescription" : "", "members_class" : [{"label" : "gridUpdates", "tail" : "(): List[(Int, Option[ChessPiece])]", "member" : "ostinato.chess.core.ChessAction.gridUpdates", "link" : "ostinato\/chess\/core\/ChessAction.html#gridUpdates:List[(Int,Option[ostinato.chess.core.ChessPiece])]", "kind" : "def"}, {"label" : "enemy", "tail" : ": ChessPlayer", "member" : "ostinato.chess.core.ChessAction.enemy", "link" : "ostinato\/chess\/core\/ChessAction.html#enemy:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "turn", "tail" : ": ChessPlayer", "member" : "ostinato.chess.core.ChessAction.turn", "link" : "ostinato\/chess\/core\/ChessAction.html#turn:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "isFinal", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessAction.isFinal", "link" : "ostinato\/chess\/core\/ChessAction.html#isFinal:Boolean", "kind" : "val"}, {"member" : "ostinato.chess.core.ChessAction#<init>", "error" : "unsupported entity"}, {"label" : "isCheckmate", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessAction.isCheckmate", "link" : "ostinato\/chess\/core\/ChessAction.html#isCheckmate:Boolean", "kind" : "val"}, {"label" : "isCheck", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessAction.isCheck", "link" : "ostinato\/chess\/core\/ChessAction.html#isCheck:Boolean", "kind" : "val"}, {"label" : "delta", "tail" : ": XY", "member" : "ostinato.chess.core.ChessAction.delta", "link" : "ostinato\/chess\/core\/ChessAction.html#delta:ostinato.core.XY", "kind" : "val"}, {"label" : "fromPiece", "tail" : ": ChessPiece", "member" : "ostinato.chess.core.ChessAction.fromPiece", "link" : "ostinato\/chess\/core\/ChessAction.html#fromPiece:ostinato.chess.core.ChessPiece", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/ChessAction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/ChessAction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/ChessAction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/ChessAction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/ChessAction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/ChessAction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/ChessAction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/ChessAction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/ChessAction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/ChessAction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/ChessAction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/ChessAction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "ostinato\/chess\/core\/ChessAction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/ChessAction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/core\/ChessAction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/chess\/core\/ChessAction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/ChessAction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/ChessAction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/ChessAction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toAn", "tail" : ": String", "member" : "ostinato.chess.core.ChessAction.toAn", "link" : "ostinato\/chess\/core\/ChessAction.html#toAn:String", "kind" : "abstract val"}], "class" : "ostinato\/chess\/core\/ChessAction.html", "kind" : "class"}, {"name" : "ostinato.chess.core.ChessActionFactory", "shortDescription" : "", "members_class" : [{"member" : "ostinato.chess.core.ChessActionFactory#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/ChessActionFactory.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/ChessActionFactory.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/ChessActionFactory.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/ChessActionFactory.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/ChessActionFactory.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/ChessActionFactory.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/ChessActionFactory.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/ChessActionFactory.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/ChessActionFactory.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/ChessActionFactory.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/ChessActionFactory.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/ChessActionFactory.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "ostinato\/chess\/core\/ChessActionFactory.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/ChessActionFactory.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/core\/ChessActionFactory.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/chess\/core\/ChessActionFactory.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/ChessActionFactory.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/ChessActionFactory.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/ChessActionFactory.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "complete", "tail" : "(isCheck: Boolean, isCheckmate: Boolean): ChessAction", "member" : "ostinato.chess.core.ChessActionFactory.complete", "link" : "ostinato\/chess\/core\/ChessActionFactory.html#complete(isCheck:Boolean,isCheckmate:Boolean):ostinato.chess.core.ChessAction", "kind" : "abstract def"}], "class" : "ostinato\/chess\/core\/ChessActionFactory.html", "kind" : "class"}, {"name" : "ostinato.chess.core.ChessBoard", "shortDescription" : "", "members_case class" : [{"label" : "rotate", "tail" : ": ChessBoard", "member" : "ostinato.chess.core.ChessBoard.rotate", "link" : "ostinato\/chess\/core\/ChessBoard.html#rotate:ostinato.chess.core.ChessBoard", "kind" : "lazy val"}, {"label" : "equals", "tail" : "(any: Any): Boolean", "member" : "ostinato.chess.core.ChessBoard.equals", "link" : "ostinato\/chess\/core\/ChessBoard.html#equals(any:Any):Boolean", "kind" : "def"}, {"label" : "game", "tail" : "(opts: ChessOptimisations): ChessGame", "member" : "ostinato.chess.core.ChessBoard.game", "link" : "ostinato\/chess\/core\/ChessBoard.html#game(implicitopts:ostinato.chess.core.ChessOptimisations):ostinato.chess.core.ChessGame", "kind" : "def"}, {"label" : "pawns", "tail" : ": Vector[♟]", "member" : "ostinato.chess.core.ChessBoard.pawns", "link" : "ostinato\/chess\/core\/ChessBoard.html#pawns:Vector[ostinato.chess.core.♟]", "kind" : "lazy val"}, {"label" : "kings", "tail" : ": Vector[♚]", "member" : "ostinato.chess.core.ChessBoard.kings", "link" : "ostinato\/chess\/core\/ChessBoard.html#kings:Vector[ostinato.chess.core.♚]", "kind" : "lazy val"}, {"label" : "queens", "tail" : ": Vector[♛]", "member" : "ostinato.chess.core.ChessBoard.queens", "link" : "ostinato\/chess\/core\/ChessBoard.html#queens:Vector[ostinato.chess.core.♛]", "kind" : "lazy val"}, {"label" : "bishops", "tail" : ": Vector[♝]", "member" : "ostinato.chess.core.ChessBoard.bishops", "link" : "ostinato\/chess\/core\/ChessBoard.html#bishops:Vector[ostinato.chess.core.♝]", "kind" : "lazy val"}, {"label" : "knights", "tail" : ": Vector[♞]", "member" : "ostinato.chess.core.ChessBoard.knights", "link" : "ostinato\/chess\/core\/ChessBoard.html#knights:Vector[ostinato.chess.core.♞]", "kind" : "lazy val"}, {"label" : "rooks", "tail" : ": Vector[♜]", "member" : "ostinato.chess.core.ChessBoard.rooks", "link" : "ostinato\/chess\/core\/ChessBoard.html#rooks:Vector[ostinato.chess.core.♜]", "kind" : "lazy val"}, {"label" : "actionStream", "tail" : "(opts: ChessOptimisations): Stream[ChessAction]", "member" : "ostinato.chess.core.ChessBoard.actionStream", "link" : "ostinato\/chess\/core\/ChessBoard.html#actionStream(implicitopts:ostinato.chess.core.ChessOptimisations):Stream[ostinato.chess.core.ChessAction]", "kind" : "def"}, {"label" : "actions", "tail" : "(opts: ChessOptimisations): Set[ChessAction]", "member" : "ostinato.chess.core.ChessBoard.actions", "link" : "ostinato\/chess\/core\/ChessBoard.html#actions(implicitopts:ostinato.chess.core.ChessOptimisations):Set[ostinato.chess.core.ChessAction]", "kind" : "def"}, {"label" : "nonFinalActions", "tail" : "(opts: ChessOptimisations): Set[ChessAction]", "member" : "ostinato.chess.core.ChessBoard.nonFinalActions", "link" : "ostinato\/chess\/core\/ChessBoard.html#nonFinalActions(implicitopts:ostinato.chess.core.ChessOptimisations):scala.collection.immutable.Set[ostinato.chess.core.ChessAction]", "kind" : "def"}, {"label" : "doAllNonFinalActions", "tail" : "(opts: ChessOptimisations): Set[ChessBoard]", "member" : "ostinato.chess.core.ChessBoard.doAllNonFinalActions", "link" : "ostinato\/chess\/core\/ChessBoard.html#doAllNonFinalActions(implicitopts:ostinato.chess.core.ChessOptimisations):scala.collection.immutable.Set[ostinato.chess.core.ChessBoard]", "kind" : "def"}, {"label" : "doAllActions", "tail" : "(opts: ChessOptimisations): Set[ChessBoard]", "member" : "ostinato.chess.core.ChessBoard.doAllActions", "link" : "ostinato\/chess\/core\/ChessBoard.html#doAllActions(implicitopts:ostinato.chess.core.ChessOptimisations):scala.collection.immutable.Set[ostinato.chess.core.ChessBoard]", "kind" : "def"}, {"label" : "canClaimThreefoldRepetition", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessBoard.canClaimThreefoldRepetition", "link" : "ostinato\/chess\/core\/ChessBoard.html#canClaimThreefoldRepetition:Boolean", "kind" : "lazy val"}, {"label" : "isInThreefoldRepetition", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessBoard.isInThreefoldRepetition", "link" : "ostinato\/chess\/core\/ChessBoard.html#isInThreefoldRepetition:Boolean", "kind" : "lazy val"}, {"label" : "allSerialisedPastBoardsFor3FR", "tail" : ": List[String]", "member" : "ostinato.chess.core.ChessBoard.allSerialisedPastBoardsFor3FR", "link" : "ostinato\/chess\/core\/ChessBoard.html#allSerialisedPastBoardsFor3FR:List[String]", "kind" : "lazy val"}, {"label" : "isInStalemate", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessBoard.isInStalemate", "link" : "ostinato\/chess\/core\/ChessBoard.html#isInStalemate:Boolean", "kind" : "lazy val"}, {"label" : "isInFiftyMoveRule", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessBoard.isInFiftyMoveRule", "link" : "ostinato\/chess\/core\/ChessBoard.html#isInFiftyMoveRule:Boolean", "kind" : "lazy val"}, {"label" : "hasInsufficientMaterial", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessBoard.hasInsufficientMaterial", "link" : "ostinato\/chess\/core\/ChessBoard.html#hasInsufficientMaterial:Boolean", "kind" : "lazy val"}, {"label" : "serialisedFor3FR", "tail" : ": String", "member" : "ostinato.chess.core.ChessBoard.serialisedFor3FR", "link" : "ostinato\/chess\/core\/ChessBoard.html#serialisedFor3FR:String", "kind" : "lazy val"}, {"label" : "toOstinatoString", "tail" : ": String", "member" : "ostinato.chess.core.ChessBoard.toOstinatoString", "link" : "ostinato\/chess\/core\/ChessBoard.html#toOstinatoString:String", "kind" : "lazy val"}, {"label" : "toFen", "tail" : ": String", "member" : "ostinato.chess.core.ChessBoard.toFen", "link" : "ostinato\/chess\/core\/ChessBoard.html#toFen:String", "kind" : "lazy val"}, {"label" : "toShortFen", "tail" : ": String", "member" : "ostinato.chess.core.ChessBoard.toShortFen", "link" : "ostinato\/chess\/core\/ChessBoard.html#toShortFen:String", "kind" : "lazy val"}, {"label" : "toString", "tail" : ": String", "member" : "ostinato.chess.core.ChessBoard.toString", "link" : "ostinato\/chess\/core\/ChessBoard.html#toString:String", "kind" : "lazy val"}, {"label" : "isLossFor", "tail" : "(player: ChessPlayer, basedOnCheckKnown: Boolean)(opts: ChessOptimisations): Boolean", "member" : "ostinato.chess.core.ChessBoard.isLossFor", "link" : "ostinato\/chess\/core\/ChessBoard.html#isLossFor(player:ostinato.chess.core.ChessPlayer,basedOnCheckKnown:Boolean)(implicitopts:ostinato.chess.core.ChessOptimisations):Boolean", "kind" : "def"}, {"label" : "isLoss", "tail" : "(opts: ChessOptimisations): Boolean", "member" : "ostinato.chess.core.ChessBoard.isLoss", "link" : "ostinato\/chess\/core\/ChessBoard.html#isLoss(implicitopts:ostinato.chess.core.ChessOptimisations):Boolean", "kind" : "def"}, {"label" : "isDrawFor", "tail" : "(player: ChessPlayer)(opts: ChessOptimisations): Boolean", "member" : "ostinato.chess.core.ChessBoard.isDrawFor", "link" : "ostinato\/chess\/core\/ChessBoard.html#isDrawFor(player:ostinato.chess.core.ChessPlayer)(implicitopts:ostinato.chess.core.ChessOptimisations):Boolean", "kind" : "def"}, {"label" : "isDraw", "tail" : "(opts: ChessOptimisations): Boolean", "member" : "ostinato.chess.core.ChessBoard.isDraw", "link" : "ostinato\/chess\/core\/ChessBoard.html#isDraw(implicitopts:ostinato.chess.core.ChessOptimisations):Boolean", "kind" : "def"}, {"label" : "movementsOfDelta", "tail" : "(from: XY, delta: XY)(opts: ChessOptimisations): Set[ChessAction]", "member" : "ostinato.chess.core.ChessBoard.movementsOfDelta", "link" : "ostinato\/chess\/core\/ChessBoard.html#movementsOfDelta(from:ostinato.core.XY,delta:ostinato.core.XY)(implicitopts:ostinato.chess.core.ChessOptimisations):Set[ostinato.chess.core.ChessAction]", "kind" : "def"}, {"label" : "doAction", "tail" : "(a: ChessAction)(opts: ChessOptimisations): Option[ChessBoard]", "member" : "ostinato.chess.core.ChessBoard.doAction", "link" : "ostinato\/chess\/core\/ChessBoard.html#doAction(a:ostinato.chess.core.ChessAction)(implicitopts:ostinato.chess.core.ChessOptimisations):Option[ostinato.chess.core.ChessBoard]", "kind" : "def"}, {"member" : "ostinato.chess.core.ChessBoard#<init>", "error" : "unsupported entity"}, {"label" : "history", "tail" : ": List[GameStep]", "member" : "ostinato.chess.core.ChessBoard.history", "link" : "ostinato\/chess\/core\/ChessBoard.html#history:List[ostinato.chess.core.GameStep]", "kind" : "val"}, {"label" : "halfMoveClock", "tail" : ": Int", "member" : "ostinato.chess.core.ChessBoard.halfMoveClock", "link" : "ostinato\/chess\/core\/ChessBoard.html#halfMoveClock:Int", "kind" : "val"}, {"label" : "fullMoveNumber", "tail" : ": Int", "member" : "ostinato.chess.core.ChessBoard.fullMoveNumber", "link" : "ostinato\/chess\/core\/ChessBoard.html#fullMoveNumber:Int", "kind" : "val"}, {"label" : "castlingAvailable", "tail" : ": Map[(ChessPlayer, CastlingSide.Value), Boolean]", "member" : "ostinato.chess.core.ChessBoard.castlingAvailable", "link" : "ostinato\/chess\/core\/ChessBoard.html#castlingAvailable:Map[(ostinato.chess.core.ChessPlayer,ostinato.chess.core.CastlingSide.Value),Boolean]", "kind" : "val"}, {"label" : "enPassantPawn", "tail" : ": Option[EnPassantPawn]", "member" : "ostinato.chess.core.ChessBoard.enPassantPawn", "link" : "ostinato\/chess\/core\/ChessBoard.html#enPassantPawn:Option[ostinato.chess.core.EnPassantPawn]", "kind" : "val"}, {"label" : "turn", "tail" : ": ChessPlayer", "member" : "ostinato.chess.core.ChessBoard.turn", "link" : "ostinato\/chess\/core\/ChessBoard.html#turn:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "grid", "tail" : ": Vector[Option[ChessPiece]]", "member" : "ostinato.chess.core.ChessBoard.grid", "link" : "ostinato\/chess\/core\/ChessBoard.html#grid:Vector[Option[ostinato.chess.core.ChessPiece]]", "kind" : "val"}, {"label" : "xyBetween", "tail" : "(from: XY, to: XY)(boardSize: BoardSize): Set[XY]", "member" : "ostinato.core.Board.xyBetween", "link" : "ostinato\/chess\/core\/ChessBoard.html#xyBetween(from:ostinato.core.XY,to:ostinato.core.XY)(implicitboardSize:ostinato.core.BoardSize):Set[ostinato.core.XY]", "kind" : "def"}, {"label" : "between", "tail" : "(from: XY, to: XY)(boardSize: BoardSize): Set[Location]", "member" : "ostinato.core.Board.between", "link" : "ostinato\/chess\/core\/ChessBoard.html#between(from:ostinato.core.XY,to:ostinato.core.XY)(implicitboardSize:ostinato.core.BoardSize):Set[Board.this.Location]", "kind" : "def"}, {"label" : "applyUpdate", "tail" : "(grid: Vector[Option[ChessPiece]], update: (Int, Option[ChessPiece])): Vector[Option[ChessPiece]]", "member" : "ostinato.core.Board.applyUpdate", "link" : "ostinato\/chess\/core\/ChessBoard.html#applyUpdate(grid:Vector[Option[PC]],update:(Int,Option[PC])):scala.collection.immutable.Vector[Option[PC]]", "kind" : "def"}, {"label" : "pieces", "tail" : "(): Vector[ChessPiece]", "member" : "ostinato.core.Board.pieces", "link" : "ostinato\/chess\/core\/ChessBoard.html#pieces:scala.collection.immutable.Vector[PC]", "kind" : "def"}, {"label" : "isInBounds", "tail" : "(l: Location): Boolean", "member" : "ostinato.core.Board.isInBounds", "link" : "ostinato\/chess\/core\/ChessBoard.html#isInBounds(l:Board.this.Location):Boolean", "kind" : "def"}, {"label" : "isEmptyCell", "tail" : "(l: Location): Boolean", "member" : "ostinato.core.Board.isEmptyCell", "link" : "ostinato\/chess\/core\/ChessBoard.html#isEmptyCell(l:Board.this.Location):Boolean", "kind" : "def"}, {"label" : "isPiece", "tail" : "(l: Location): Boolean", "member" : "ostinato.core.Board.isPiece", "link" : "ostinato\/chess\/core\/ChessBoard.html#isPiece(l:Board.this.Location):Boolean", "kind" : "def"}, {"label" : "get", "tail" : "(pos: XY)(boardSize: BoardSize): Location", "member" : "ostinato.core.Board.get", "link" : "ostinato\/chess\/core\/ChessBoard.html#get(pos:ostinato.core.XY)(implicitboardSize:ostinato.core.BoardSize):Board.this.Location", "kind" : "def"}, {"label" : "Location", "tail" : "", "member" : "ostinato.core.Board.Location", "link" : "ostinato\/chess\/core\/ChessBoard.html#Location=Option[Board.this.Cell]", "kind" : "type"}, {"label" : "Cell", "tail" : "", "member" : "ostinato.core.Board.Cell", "link" : "ostinato\/chess\/core\/ChessBoard.html#Cell=Option[PC]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/ChessBoard.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/ChessBoard.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/ChessBoard.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/ChessBoard.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/ChessBoard.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/ChessBoard.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/ChessBoard.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/ChessBoard.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/ChessBoard.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/ChessBoard.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/ChessBoard.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/ChessBoard.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/ChessBoard.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/ChessBoard.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/ChessBoard.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/ChessBoard.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/ChessBoard.html", "kind" : "case class"}, {"name" : "ostinato.chess.core.ChessGame", "shortDescription" : "", "object" : "ostinato\/chess\/core\/ChessGame$.html", "members_object" : [{"label" : "defaultGame", "tail" : ": ChessGame", "member" : "ostinato.chess.core.ChessGame.defaultGame", "link" : "ostinato\/chess\/core\/ChessGame$.html#defaultGame:ostinato.chess.core.ChessGame", "kind" : "val"}, {"label" : "fromOstinatoString", "tail" : "(string: String): Try[ChessGame]", "member" : "ostinato.chess.core.ChessGame.fromOstinatoString", "link" : "ostinato\/chess\/core\/ChessGame$.html#fromOstinatoString(string:String):scala.util.Try[ostinato.chess.core.ChessGame]", "kind" : "def"}, {"label" : "fromShortFen", "tail" : "(shortFenString: String): Try[ChessGame]", "member" : "ostinato.chess.core.ChessGame.fromShortFen", "link" : "ostinato\/chess\/core\/ChessGame$.html#fromShortFen(shortFenString:String):scala.util.Try[ostinato.chess.core.ChessGame]", "kind" : "def"}, {"label" : "fromFen", "tail" : "(fenString: String): Try[ChessGame]", "member" : "ostinato.chess.core.ChessGame.fromFen", "link" : "ostinato\/chess\/core\/ChessGame$.html#fromFen(fenString:String):scala.util.Try[ostinato.chess.core.ChessGame]", "kind" : "def"}, {"label" : "fromGridString", "tail" : "(string: String, turn: ChessPlayer, castlingAvailable: Map[(ChessPlayer, CastlingSide.Value), Boolean], fullMoveNumber: Int, halfMoveClock: Int): Try[ChessGame]", "member" : "ostinato.chess.core.ChessGame.fromGridString", "link" : "ostinato\/chess\/core\/ChessGame$.html#fromGridString(string:String,turn:ostinato.chess.core.ChessPlayer,castlingAvailable:Map[(ostinato.chess.core.ChessPlayer,ostinato.chess.core.CastlingSide.Value),Boolean],fullMoveNumber:Int,halfMoveClock:Int):scala.util.Try[ostinato.chess.core.ChessGame]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/ChessGame$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/ChessGame$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/ChessGame$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/ChessGame$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/ChessGame$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/ChessGame$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/ChessGame$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/ChessGame$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/ChessGame$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/ChessGame$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/ChessGame$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/ChessGame$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "ostinato\/chess\/core\/ChessGame$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/ChessGame$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/core\/ChessGame$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/chess\/core\/ChessGame$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/ChessGame$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/ChessGame$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/ChessGame$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "rotate", "tail" : "(): ChessGame", "member" : "ostinato.chess.core.ChessGame.rotate", "link" : "ostinato\/chess\/core\/ChessGame.html#rotate:ostinato.chess.core.ChessGame", "kind" : "def"}, {"label" : "toOstinatoString", "tail" : "(): String", "member" : "ostinato.chess.core.ChessGame.toOstinatoString", "link" : "ostinato\/chess\/core\/ChessGame.html#toOstinatoString:String", "kind" : "def"}, {"label" : "toFen", "tail" : "(): String", "member" : "ostinato.chess.core.ChessGame.toFen", "link" : "ostinato\/chess\/core\/ChessGame.html#toFen:String", "kind" : "def"}, {"label" : "toShortFen", "tail" : "(): String", "member" : "ostinato.chess.core.ChessGame.toShortFen", "link" : "ostinato\/chess\/core\/ChessGame.html#toShortFen:String", "kind" : "def"}, {"label" : "isDraw", "tail" : "(opts: ChessOptimisations): Boolean", "member" : "ostinato.chess.core.ChessGame.isDraw", "link" : "ostinato\/chess\/core\/ChessGame.html#isDraw(implicitopts:ostinato.chess.core.ChessOptimisations):Boolean", "kind" : "def"}, {"label" : "lossFor", "tail" : "(opts: ChessOptimisations): Option[ChessPlayer]", "member" : "ostinato.chess.core.ChessGame.lossFor", "link" : "ostinato\/chess\/core\/ChessGame.html#lossFor(implicitopts:ostinato.chess.core.ChessOptimisations):Option[ostinato.chess.core.ChessPlayer]", "kind" : "def"}, {"label" : "isGameOver", "tail" : "(opts: ChessOptimisations): Boolean", "member" : "ostinato.chess.core.ChessGame.isGameOver", "link" : "ostinato\/chess\/core\/ChessGame.html#isGameOver(implicitopts:ostinato.chess.core.ChessOptimisations):Boolean", "kind" : "def"}, {"label" : "blackPlayer", "tail" : ": BlackChessPlayer.type", "member" : "ostinato.chess.core.ChessGame.blackPlayer", "link" : "ostinato\/chess\/core\/ChessGame.html#blackPlayer:ostinato.chess.core.BlackChessPlayer.type", "kind" : "val"}, {"label" : "whitePlayer", "tail" : ": WhiteChessPlayer.type", "member" : "ostinato.chess.core.ChessGame.whitePlayer", "link" : "ostinato\/chess\/core\/ChessGame.html#whitePlayer:ostinato.chess.core.WhiteChessPlayer.type", "kind" : "val"}, {"member" : "ostinato.chess.core.ChessGame#<init>", "error" : "unsupported entity"}, {"label" : "rules", "tail" : ": ChessOptimisations", "member" : "ostinato.chess.core.ChessGame.rules", "link" : "ostinato\/chess\/core\/ChessGame.html#rules:ostinato.chess.core.ChessOptimisations", "kind" : "val"}, {"label" : "board", "tail" : ": ChessBoard", "member" : "ostinato.chess.core.ChessGame.board", "link" : "ostinato\/chess\/core\/ChessGame.html#board:ostinato.chess.core.ChessBoard", "kind" : "val"}, {"label" : "players", "tail" : ": List[ChessPlayer]", "member" : "ostinato.core.Game.players", "link" : "ostinato\/chess\/core\/ChessGame.html#players:List[PL]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/ChessGame.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/ChessGame.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/ChessGame.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/ChessGame.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/ChessGame.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/ChessGame.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/ChessGame.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/ChessGame.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/ChessGame.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/ChessGame.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/ChessGame.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/ChessGame.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/ChessGame.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/ChessGame.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/ChessGame.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/ChessGame.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/ChessGame.html", "kind" : "object"}, {"name" : "ostinato.chess.core.ChessGrid", "shortDescription" : "", "object" : "ostinato\/chess\/core\/package$$ChessGrid$.html", "members_object" : [{"label" : "charVector", "tail" : "(s: String): Vector[(Char, Int)]", "member" : "ostinato.chess.core.ChessGrid.charVector", "link" : "ostinato\/chess\/core\/package$$ChessGrid$.html#charVector(s:String):Vector[(Char,Int)]", "kind" : "def"}, {"label" : "fromGridString", "tail" : "(s: String): Vector[Option[ChessPiece]]", "member" : "ostinato.chess.core.ChessGrid.fromGridString", "link" : "ostinato\/chess\/core\/package$$ChessGrid$.html#fromGridString(s:String):Vector[Option[ostinato.chess.core.ChessPiece]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/package$$ChessGrid$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/package$$ChessGrid$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/package$$ChessGrid$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/package$$ChessGrid$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/package$$ChessGrid$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/package$$ChessGrid$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/package$$ChessGrid$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/package$$ChessGrid$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/package$$ChessGrid$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/package$$ChessGrid$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/package$$ChessGrid$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/package$$ChessGrid$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "ostinato\/chess\/core\/package$$ChessGrid$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/package$$ChessGrid$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/core\/package$$ChessGrid$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/chess\/core\/package$$ChessGrid$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/package$$ChessGrid$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/package$$ChessGrid$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/package$$ChessGrid$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "ostinato.chess.core.ChessOptimisations", "shortDescription" : "", "object" : "ostinato\/chess\/core\/ChessOptimisations$.html", "members_object" : [{"label" : "beOptimistic", "tail" : "(): ChessOptimisations", "member" : "ostinato.chess.core.ChessOptimisations.beOptimistic", "link" : "ostinato\/chess\/core\/ChessOptimisations$.html#beOptimistic:ostinato.chess.core.ChessOptimisations", "kind" : "def"}, {"label" : "noCheckForThreatens", "tail" : "(): ChessOptimisations", "member" : "ostinato.chess.core.ChessOptimisations.noCheckForThreatens", "link" : "ostinato\/chess\/core\/ChessOptimisations$.html#noCheckForThreatens:ostinato.chess.core.ChessOptimisations", "kind" : "def"}, {"label" : "default", "tail" : "(): ChessOptimisations", "member" : "ostinato.chess.core.ChessOptimisations.default", "link" : "ostinato\/chess\/core\/ChessOptimisations$.html#default:ostinato.chess.core.ChessOptimisations", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/ChessOptimisations$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/ChessOptimisations$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/ChessOptimisations$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/ChessOptimisations$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/ChessOptimisations$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/ChessOptimisations$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/ChessOptimisations$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/ChessOptimisations$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/ChessOptimisations$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/ChessOptimisations$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/ChessOptimisations$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/ChessOptimisations$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "ostinato\/chess\/core\/ChessOptimisations$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/ChessOptimisations$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/core\/ChessOptimisations$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/chess\/core\/ChessOptimisations$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/ChessOptimisations$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/ChessOptimisations$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/ChessOptimisations$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "ostinato.chess.core.ChessOptimisations#<init>", "error" : "unsupported entity"}, {"label" : "optimistic", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessOptimisations.optimistic", "link" : "ostinato\/chess\/core\/ChessOptimisations.html#optimistic:Boolean", "kind" : "val"}, {"label" : "dontCalculateHistory", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessOptimisations.dontCalculateHistory", "link" : "ostinato\/chess\/core\/ChessOptimisations.html#dontCalculateHistory:Boolean", "kind" : "val"}, {"label" : "extraValidationOnActionApply", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessOptimisations.extraValidationOnActionApply", "link" : "ostinato\/chess\/core\/ChessOptimisations.html#extraValidationOnActionApply:Boolean", "kind" : "val"}, {"label" : "validateDeltasOnActionCalculation", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessOptimisations.validateDeltasOnActionCalculation", "link" : "ostinato\/chess\/core\/ChessOptimisations.html#validateDeltasOnActionCalculation:Boolean", "kind" : "val"}, {"label" : "checkForThreatens", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessOptimisations.checkForThreatens", "link" : "ostinato\/chess\/core\/ChessOptimisations.html#checkForThreatens:Boolean", "kind" : "val"}, {"label" : "kingIsTakeable", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessOptimisations.kingIsTakeable", "link" : "ostinato\/chess\/core\/ChessOptimisations.html#kingIsTakeable:Boolean", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/ChessOptimisations.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/ChessOptimisations.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/ChessOptimisations.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/ChessOptimisations.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/ChessOptimisations.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/ChessOptimisations.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/ChessOptimisations.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/ChessOptimisations.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/ChessOptimisations.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/ChessOptimisations.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/ChessOptimisations.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/ChessOptimisations.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/ChessOptimisations.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/ChessOptimisations.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/ChessOptimisations.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/ChessOptimisations.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/ChessOptimisations.html", "kind" : "object"}, {"name" : "ostinato.chess.core.ChessPiece", "shortDescription" : "", "members_class" : [{"label" : "actions", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Set[ChessAction]", "member" : "ostinato.chess.core.ChessPiece.actions", "link" : "ostinato\/chess\/core\/ChessPiece.html#actions(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Set[ostinato.chess.core.ChessAction]", "kind" : "def"}, {"label" : "canMoveTo", "tail" : "(to: XY, board: ChessBoard)(opts: ChessOptimisations): Boolean", "member" : "ostinato.chess.core.ChessPiece.canMoveTo", "link" : "ostinato\/chess\/core\/ChessPiece.html#canMoveTo(to:ostinato.core.XY,board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Boolean", "kind" : "def"}, {"label" : "defendedBy", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Option[ChessPiece]", "member" : "ostinato.chess.core.ChessPiece.defendedBy", "link" : "ostinato\/chess\/core\/ChessPiece.html#defendedBy(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Option[ostinato.chess.core.ChessPiece]", "kind" : "def"}, {"label" : "threatenedBy", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Option[ChessPiece]", "member" : "ostinato.chess.core.ChessPiece.threatenedBy", "link" : "ostinato\/chess\/core\/ChessPiece.html#threatenedBy(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Option[ostinato.chess.core.ChessPiece]", "kind" : "def"}, {"label" : "deltas", "tail" : "(board: ChessBoard): Set[XY]", "member" : "ostinato.chess.core.ChessPiece.deltas", "link" : "ostinato\/chess\/core\/ChessPiece.html#deltas(board:ostinato.chess.core.ChessBoard):Set[ostinato.core.XY]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "ostinato.chess.core.ChessPiece.toString", "link" : "ostinato\/chess\/core\/ChessPiece.html#toString():String", "kind" : "def"}, {"label" : "equals", "tail" : "(that: ChessPiece): Boolean", "member" : "ostinato.chess.core.ChessPiece.equals", "link" : "ostinato\/chess\/core\/ChessPiece.html#equals(that:ostinato.chess.core.ChessPiece):Boolean", "kind" : "def"}, {"label" : "enemy", "tail" : ": ChessPlayer", "member" : "ostinato.chess.core.ChessPiece.enemy", "link" : "ostinato\/chess\/core\/ChessPiece.html#enemy:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "isDefended", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Boolean", "member" : "ostinato.chess.core.ChessPiece.isDefended", "link" : "ostinato\/chess\/core\/ChessPiece.html#isDefended(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Boolean", "kind" : "def"}, {"label" : "isThreatened", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Boolean", "member" : "ostinato.chess.core.ChessPiece.isThreatened", "link" : "ostinato\/chess\/core\/ChessPiece.html#isThreatened(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Boolean", "kind" : "def"}, {"label" : "isPawn", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessPiece.isPawn", "link" : "ostinato\/chess\/core\/ChessPiece.html#isPawn:Boolean", "kind" : "val"}, {"label" : "isKing", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessPiece.isKing", "link" : "ostinato\/chess\/core\/ChessPiece.html#isKing:Boolean", "kind" : "val"}, {"label" : "isQueen", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessPiece.isQueen", "link" : "ostinato\/chess\/core\/ChessPiece.html#isQueen:Boolean", "kind" : "val"}, {"label" : "isBishop", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessPiece.isBishop", "link" : "ostinato\/chess\/core\/ChessPiece.html#isBishop:Boolean", "kind" : "val"}, {"label" : "isKnight", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessPiece.isKnight", "link" : "ostinato\/chess\/core\/ChessPiece.html#isKnight:Boolean", "kind" : "val"}, {"label" : "isRook", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessPiece.isRook", "link" : "ostinato\/chess\/core\/ChessPiece.html#isRook:Boolean", "kind" : "val"}, {"member" : "ostinato.chess.core.ChessPiece#<init>", "error" : "unsupported entity"}, {"label" : "movementsOfDelta", "tail" : "(from: XY, delta: XY, board: ChessBoard)(rules: ChessOptimisations): Set[ChessAction]", "member" : "ostinato.core.Piece.movementsOfDelta", "link" : "ostinato\/chess\/core\/ChessPiece.html#movementsOfDelta(from:ostinato.core.XY,delta:ostinato.core.XY,board:B)(implicitrules:R):Set[A]", "kind" : "def"}, {"label" : "allMovementsOfDelta", "tail" : "(from: XY, delta: XY, board: ChessBoard)(rules: ChessOptimisations): Set[ChessAction]", "member" : "ostinato.core.Piece.allMovementsOfDelta", "link" : "ostinato\/chess\/core\/ChessPiece.html#allMovementsOfDelta(from:ostinato.core.XY,delta:ostinato.core.XY,board:B)(implicitrules:R):Set[A]", "kind" : "def"}, {"label" : "owner", "tail" : ": ChessPlayer", "member" : "ostinato.core.Piece.owner", "link" : "ostinato\/chess\/core\/ChessPiece.html#owner:PL", "kind" : "val"}, {"label" : "pos", "tail" : ": XY", "member" : "ostinato.core.Piece.pos", "link" : "ostinato\/chess\/core\/ChessPiece.html#pos:ostinato.core.XY", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/ChessPiece.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/ChessPiece.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/ChessPiece.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/ChessPiece.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/ChessPiece.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/ChessPiece.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/ChessPiece.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/ChessPiece.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/ChessPiece.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/ChessPiece.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/ChessPiece.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/ChessPiece.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/ChessPiece.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/core\/ChessPiece.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/chess\/core\/ChessPiece.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/ChessPiece.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/ChessPiece.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/ChessPiece.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "hasRecursiveDeltas", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessPiece.hasRecursiveDeltas", "link" : "ostinato\/chess\/core\/ChessPiece.html#hasRecursiveDeltas:Boolean", "kind" : "abstract val"}, {"label" : "deltaPatterns", "tail" : ": Set[XY]", "member" : "ostinato.chess.core.ChessPiece.deltaPatterns", "link" : "ostinato\/chess\/core\/ChessPiece.html#deltaPatterns:Set[ostinato.core.XY]", "kind" : "abstract val"}, {"label" : "withOwner", "tail" : "(newOwner: ChessPlayer): ChessPiece", "member" : "ostinato.chess.core.ChessPiece.withOwner", "link" : "ostinato\/chess\/core\/ChessPiece.html#withOwner(newOwner:ostinato.chess.core.ChessPlayer):ostinato.chess.core.ChessPiece", "kind" : "abstract def"}, {"label" : "cantMove", "tail" : "(to: XY, board: ChessBoard): Boolean", "member" : "ostinato.chess.core.ChessPiece.cantMove", "link" : "ostinato\/chess\/core\/ChessPiece.html#cantMove(to:ostinato.core.XY,board:ostinato.chess.core.ChessBoard):Boolean", "kind" : "abstract def"}, {"label" : "pieceName", "tail" : ": String", "member" : "ostinato.chess.core.ChessPiece.pieceName", "link" : "ostinato\/chess\/core\/ChessPiece.html#pieceName:String", "kind" : "abstract val"}, {"label" : "toFigurine", "tail" : ": Char", "member" : "ostinato.chess.core.ChessPiece.toFigurine", "link" : "ostinato\/chess\/core\/ChessPiece.html#toFigurine:Char", "kind" : "abstract val"}, {"label" : "toDn", "tail" : ": Set[String]", "member" : "ostinato.chess.core.ChessPiece.toDn", "link" : "ostinato\/chess\/core\/ChessPiece.html#toDn:Set[String]", "kind" : "abstract val"}, {"label" : "toIccf", "tail" : ": Int", "member" : "ostinato.chess.core.ChessPiece.toIccf", "link" : "ostinato\/chess\/core\/ChessPiece.html#toIccf:Int", "kind" : "abstract val"}, {"label" : "toFen", "tail" : ": Char", "member" : "ostinato.chess.core.ChessPiece.toFen", "link" : "ostinato\/chess\/core\/ChessPiece.html#toFen:Char", "kind" : "abstract val"}, {"label" : "toAn", "tail" : ": String", "member" : "ostinato.chess.core.ChessPiece.toAn", "link" : "ostinato\/chess\/core\/ChessPiece.html#toAn:String", "kind" : "abstract val"}, {"label" : "movedTo", "tail" : "(pos: XY): ChessPiece", "member" : "ostinato.core.Piece.movedTo", "link" : "ostinato\/chess\/core\/ChessPiece.html#movedTo(pos:ostinato.core.XY):PC", "kind" : "abstract def"}], "class" : "ostinato\/chess\/core\/ChessPiece.html", "kind" : "class"}, {"name" : "ostinato.chess.core.ChessPlayer", "shortDescription" : "", "members_class" : [{"label" : "pawns", "tail" : "(board: ChessBoard): Set[♟]", "member" : "ostinato.chess.core.ChessPlayer.pawns", "link" : "ostinato\/chess\/core\/ChessPlayer.html#pawns(board:ostinato.chess.core.ChessBoard):Set[ostinato.chess.core.♟]", "kind" : "def"}, {"label" : "kings", "tail" : "(board: ChessBoard): Set[♚]", "member" : "ostinato.chess.core.ChessPlayer.kings", "link" : "ostinato\/chess\/core\/ChessPlayer.html#kings(board:ostinato.chess.core.ChessBoard):Set[ostinato.chess.core.♚]", "kind" : "def"}, {"label" : "queens", "tail" : "(board: ChessBoard): Set[♛]", "member" : "ostinato.chess.core.ChessPlayer.queens", "link" : "ostinato\/chess\/core\/ChessPlayer.html#queens(board:ostinato.chess.core.ChessBoard):Set[ostinato.chess.core.♛]", "kind" : "def"}, {"label" : "bishops", "tail" : "(board: ChessBoard): Set[♝]", "member" : "ostinato.chess.core.ChessPlayer.bishops", "link" : "ostinato\/chess\/core\/ChessPlayer.html#bishops(board:ostinato.chess.core.ChessBoard):Set[ostinato.chess.core.♝]", "kind" : "def"}, {"label" : "knights", "tail" : "(board: ChessBoard): Set[♞]", "member" : "ostinato.chess.core.ChessPlayer.knights", "link" : "ostinato\/chess\/core\/ChessPlayer.html#knights(board:ostinato.chess.core.ChessBoard):Set[ostinato.chess.core.♞]", "kind" : "def"}, {"label" : "rooks", "tail" : "(board: ChessBoard): Set[♜]", "member" : "ostinato.chess.core.ChessPlayer.rooks", "link" : "ostinato\/chess\/core\/ChessPlayer.html#rooks(board:ostinato.chess.core.ChessBoard):Set[ostinato.chess.core.♜]", "kind" : "def"}, {"label" : "nonFinalActions", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Set[ChessAction]", "member" : "ostinato.chess.core.ChessPlayer.nonFinalActions", "link" : "ostinato\/chess\/core\/ChessPlayer.html#nonFinalActions(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):scala.collection.immutable.Set[ostinato.chess.core.ChessAction]", "kind" : "def"}, {"label" : "actionStream", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Stream[ChessAction]", "member" : "ostinato.chess.core.ChessPlayer.actionStream", "link" : "ostinato\/chess\/core\/ChessPlayer.html#actionStream(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Stream[ostinato.chess.core.ChessAction]", "kind" : "def"}, {"label" : "actions", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Set[ChessAction]", "member" : "ostinato.chess.core.ChessPlayer.actions", "link" : "ostinato\/chess\/core\/ChessPlayer.html#actions(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Set[ostinato.chess.core.ChessAction]", "kind" : "def"}, {"label" : "initialY", "tail" : "(): Int", "member" : "ostinato.chess.core.ChessPlayer.initialY", "link" : "ostinato\/chess\/core\/ChessPlayer.html#initialY:Int", "kind" : "def"}, {"label" : "kingPiece", "tail" : "(board: ChessBoard): Option[ChessPiece]", "member" : "ostinato.chess.core.ChessPlayer.kingPiece", "link" : "ostinato\/chess\/core\/ChessPlayer.html#kingPiece(board:ostinato.chess.core.ChessBoard):Option[ostinato.chess.core.ChessPiece]", "kind" : "def"}, {"member" : "ostinato.chess.core.ChessPlayer#<init>", "error" : "unsupported entity"}, {"label" : "pieces", "tail" : "(board: ChessBoard): Set[ChessPiece]", "member" : "ostinato.core.Player.pieces", "link" : "ostinato\/chess\/core\/ChessPlayer.html#pieces(board:B):Set[PC]", "kind" : "def"}, {"label" : "equals", "tail" : "(that: ChessPlayer): Boolean", "member" : "ostinato.core.Player.equals", "link" : "ostinato\/chess\/core\/ChessPlayer.html#equals(that:PL):Boolean", "kind" : "def"}, {"label" : "name", "tail" : ": String", "member" : "ostinato.core.Player.name", "link" : "ostinato\/chess\/core\/ChessPlayer.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/ChessPlayer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/ChessPlayer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/ChessPlayer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/ChessPlayer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/ChessPlayer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/ChessPlayer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/ChessPlayer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/ChessPlayer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/ChessPlayer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/ChessPlayer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/ChessPlayer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/ChessPlayer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "ostinato\/chess\/core\/ChessPlayer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/ChessPlayer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/core\/ChessPlayer.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/chess\/core\/ChessPlayer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/ChessPlayer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/ChessPlayer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/ChessPlayer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toFen", "tail" : "(): Char", "member" : "ostinato.chess.core.ChessPlayer.toFen", "link" : "ostinato\/chess\/core\/ChessPlayer.html#toFen:Char", "kind" : "abstract def"}, {"label" : "enemy", "tail" : "(): ChessPlayer", "member" : "ostinato.chess.core.ChessPlayer.enemy", "link" : "ostinato\/chess\/core\/ChessPlayer.html#enemy:ostinato.chess.core.ChessPlayer", "kind" : "abstract def"}], "class" : "ostinato\/chess\/core\/ChessPlayer.html", "kind" : "class"}, {"name" : "ostinato.chess.core.ChessXY", "shortDescription" : "", "object" : "ostinato\/chess\/core\/package$$ChessXY$.html", "members_class" : [{"label" : "toDn", "tail" : "(turn: ChessPlayer): Set[DnPos]", "member" : "ostinato.chess.core.ChessXY.toDn", "link" : "ostinato\/chess\/core\/package$$ChessXY.html#toDn(turn:ostinato.chess.core.ChessPlayer):scala.collection.immutable.Set[ostinato.chess.core.package.DnPos]", "kind" : "def"}, {"label" : "iccfConversions", "tail" : ": Map[Char, Int]", "member" : "ostinato.chess.core.ChessXY.iccfConversions", "link" : "ostinato\/chess\/core\/package$$ChessXY.html#iccfConversions:scala.collection.immutable.Map[Char,Int]", "kind" : "lazy val"}, {"label" : "dnConversions", "tail" : ": Map[Char, Set[String]]", "member" : "ostinato.chess.core.ChessXY.dnConversions", "link" : "ostinato\/chess\/core\/package$$ChessXY.html#dnConversions:scala.collection.immutable.Map[Char,scala.collection.immutable.Set[String]]", "kind" : "lazy val"}, {"label" : "toIccf", "tail" : ": IccfPos", "member" : "ostinato.chess.core.ChessXY.toIccf", "link" : "ostinato\/chess\/core\/package$$ChessXY.html#toIccf:ostinato.chess.core.package.IccfPos", "kind" : "val"}, {"label" : "toAn", "tail" : ": AnPos", "member" : "ostinato.chess.core.ChessXY.toAn", "link" : "ostinato\/chess\/core\/package$$ChessXY.html#toAn:ostinato.chess.core.package.AnPos", "kind" : "val"}, {"label" : "squareColor", "tail" : "(): SquareColor.Value", "member" : "ostinato.chess.core.ChessXY.squareColor", "link" : "ostinato\/chess\/core\/package$$ChessXY.html#squareColor:ostinato.chess.core.package.SquareColor.Value", "kind" : "def"}, {"member" : "ostinato.chess.core.ChessXY#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/package$$ChessXY.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/package$$ChessXY.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/package$$ChessXY.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/package$$ChessXY.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/package$$ChessXY.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/package$$ChessXY.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/package$$ChessXY.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/package$$ChessXY.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/package$$ChessXY.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/package$$ChessXY.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/package$$ChessXY.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/package$$ChessXY.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "ostinato\/chess\/core\/package$$ChessXY.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/package$$ChessXY.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/core\/package$$ChessXY.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/chess\/core\/package$$ChessXY.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/package$$ChessXY.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/package$$ChessXY.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/package$$ChessXY.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "fromAn", "tail" : "(string: String): Option[XY]", "member" : "ostinato.chess.core.ChessXY.fromAn", "link" : "ostinato\/chess\/core\/package$$ChessXY$.html#fromAn(string:String):Option[ostinato.core.XY]", "kind" : "def"}, {"label" : "chars", "tail" : ": String", "member" : "ostinato.chess.core.ChessXY.chars", "link" : "ostinato\/chess\/core\/package$$ChessXY$.html#chars:String", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/package$$ChessXY$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/package$$ChessXY$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/package$$ChessXY$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/package$$ChessXY$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/package$$ChessXY$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/package$$ChessXY$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/package$$ChessXY$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/package$$ChessXY$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/package$$ChessXY$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/package$$ChessXY$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/package$$ChessXY$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/package$$ChessXY$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "ostinato\/chess\/core\/package$$ChessXY$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/package$$ChessXY$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/core\/package$$ChessXY$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/chess\/core\/package$$ChessXY$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/package$$ChessXY$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/package$$ChessXY$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/package$$ChessXY$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "ostinato\/chess\/core\/package$$ChessXY.html", "kind" : "object"}, {"name" : "ostinato.chess.core.CoordinateNotation", "shortDescription" : "", "object" : "ostinato\/chess\/core\/CoordinateNotation$.html", "members_object" : [{"label" : "allPossibleRules", "tail" : "(): Set[CoordinateNotationRules]", "member" : "ostinato.chess.core.CoordinateNotation.allPossibleRules", "link" : "ostinato\/chess\/core\/CoordinateNotation$.html#allPossibleRules:Set[ostinato.chess.core.CoordinateNotationRules]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/CoordinateNotation$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/CoordinateNotation$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/CoordinateNotation$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/CoordinateNotation$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/CoordinateNotation$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/CoordinateNotation$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/CoordinateNotation$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/CoordinateNotation$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/CoordinateNotation$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/CoordinateNotation$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/CoordinateNotation$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/CoordinateNotation$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "ostinato\/chess\/core\/CoordinateNotation$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/CoordinateNotation$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/core\/CoordinateNotation$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/chess\/core\/CoordinateNotation$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/CoordinateNotation$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/CoordinateNotation$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/CoordinateNotation$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "ostinato.chess.core.CoordinateNotationActionSerialiser", "shortDescription" : "", "members_case class" : [{"label" : "CartesianProductableStringSet", "tail" : "", "member" : "ostinato.chess.core.ActionSerialiser.CartesianProductableStringSet", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#CartesianProductableStringSetextendsAnyRef", "kind" : "implicit class"}, {"label" : "CartesianProductableString", "tail" : "", "member" : "ostinato.chess.core.ActionSerialiser.CartesianProductableString", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#CartesianProductableStringextendsAnyRef", "kind" : "implicit class"}, {"label" : "castling", "tail" : "(a: CastlingAction): Set[String]", "member" : "ostinato.chess.core.CoordinateNotationActionSerialiser.castling", "link" : "ostinato\/chess\/core\/CoordinateNotationActionSerialiser.html#castling(a:ostinato.chess.core.CastlingAction):Set[String]", "kind" : "def"}, {"label" : "capturePromote", "tail" : "(a: CapturePromoteAction): Set[String]", "member" : "ostinato.chess.core.CoordinateNotationActionSerialiser.capturePromote", "link" : "ostinato\/chess\/core\/CoordinateNotationActionSerialiser.html#capturePromote(a:ostinato.chess.core.CapturePromoteAction):scala.collection.immutable.Set[String]", "kind" : "def"}, {"label" : "promote", "tail" : "(a: PromoteAction): Set[String]", "member" : "ostinato.chess.core.CoordinateNotationActionSerialiser.promote", "link" : "ostinato\/chess\/core\/CoordinateNotationActionSerialiser.html#promote(a:ostinato.chess.core.PromoteAction):scala.collection.immutable.Set[String]", "kind" : "def"}, {"label" : "action", "tail" : "(a: ChessAction): Set[String]", "member" : "ostinato.chess.core.CoordinateNotationActionSerialiser.action", "link" : "ostinato\/chess\/core\/CoordinateNotationActionSerialiser.html#action(a:ostinato.chess.core.ChessAction):scala.collection.immutable.Set[String]", "kind" : "def"}, {"label" : "enPassant", "tail" : "(a: EnPassantAction): Set[String]", "member" : "ostinato.chess.core.CoordinateNotationActionSerialiser.enPassant", "link" : "ostinato\/chess\/core\/CoordinateNotationActionSerialiser.html#enPassant(a:ostinato.chess.core.EnPassantAction):scala.collection.immutable.Set[String]", "kind" : "def"}, {"label" : "move", "tail" : "(a: MoveAction): Set[String]", "member" : "ostinato.chess.core.CoordinateNotationActionSerialiser.move", "link" : "ostinato\/chess\/core\/CoordinateNotationActionSerialiser.html#move(a:ostinato.chess.core.MoveAction):scala.collection.immutable.Set[String]", "kind" : "def"}, {"label" : "enPassantCapture", "tail" : "(a: EnPassantCaptureAction): Set[String]", "member" : "ostinato.chess.core.CoordinateNotationActionSerialiser.enPassantCapture", "link" : "ostinato\/chess\/core\/CoordinateNotationActionSerialiser.html#enPassantCapture(a:ostinato.chess.core.EnPassantCaptureAction):scala.collection.immutable.Set[String]", "kind" : "def"}, {"label" : "capture", "tail" : "(a: CaptureAction): Set[String]", "member" : "ostinato.chess.core.CoordinateNotationActionSerialiser.capture", "link" : "ostinato\/chess\/core\/CoordinateNotationActionSerialiser.html#capture(a:ostinato.chess.core.CaptureAction):scala.collection.immutable.Set[String]", "kind" : "def"}, {"label" : "draw", "tail" : "(a: DrawAction): Set[String]", "member" : "ostinato.chess.core.CoordinateNotationActionSerialiser.draw", "link" : "ostinato\/chess\/core\/CoordinateNotationActionSerialiser.html#draw(a:ostinato.chess.core.DrawAction):Set[String]", "kind" : "def"}, {"label" : "lose", "tail" : "(a: LoseAction): Set[String]", "member" : "ostinato.chess.core.CoordinateNotationActionSerialiser.lose", "link" : "ostinato\/chess\/core\/CoordinateNotationActionSerialiser.html#lose(a:ostinato.chess.core.LoseAction):Set[String]", "kind" : "def"}, {"member" : "ostinato.chess.core.CoordinateNotationActionSerialiser#<init>", "error" : "unsupported entity"}, {"label" : "r", "tail" : ": CoordinateNotationRules", "member" : "ostinato.chess.core.CoordinateNotationActionSerialiser.r", "link" : "ostinato\/chess\/core\/CoordinateNotationActionSerialiser.html#r:ostinato.chess.core.CoordinateNotationRules", "kind" : "val"}, {"label" : "genericPromotion", "tail" : "(toPiece: ChessPiece): Set[String]", "member" : "ostinato.chess.core.ActionSerialiser.genericPromotion", "link" : "ostinato\/chess\/core\/CoordinateNotationActionSerialiser.html#genericPromotion(toPiece:ostinato.chess.core.ChessPiece):scala.collection.immutable.Set[String]", "kind" : "def"}, {"label" : "serialiseAction", "tail" : "(a: ChessAction): Set[(String, (ChessAction, NotationRules))]", "member" : "ostinato.chess.core.ActionSerialiser.serialiseAction", "link" : "ostinato\/chess\/core\/CoordinateNotationActionSerialiser.html#serialiseAction(a:ostinato.chess.core.ChessAction):Set[(String,(ostinato.chess.core.ChessAction,ostinato.chess.core.NotationRules))]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/CoordinateNotationActionSerialiser.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/CoordinateNotationActionSerialiser.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/CoordinateNotationActionSerialiser.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/CoordinateNotationActionSerialiser.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/CoordinateNotationActionSerialiser.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/CoordinateNotationActionSerialiser.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/CoordinateNotationActionSerialiser.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/CoordinateNotationActionSerialiser.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/CoordinateNotationActionSerialiser.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/CoordinateNotationActionSerialiser.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/CoordinateNotationActionSerialiser.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/CoordinateNotationActionSerialiser.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/CoordinateNotationActionSerialiser.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/CoordinateNotationActionSerialiser.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/CoordinateNotationActionSerialiser.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/CoordinateNotationActionSerialiser.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/CoordinateNotationActionSerialiser.html", "kind" : "case class"}, {"name" : "ostinato.chess.core.CoordinateNotationRules", "shortDescription" : "", "members_case class" : [{"label" : "fullName", "tail" : ": String", "member" : "ostinato.chess.core.CoordinateNotationRules.fullName", "link" : "ostinato\/chess\/core\/CoordinateNotationRules.html#fullName:String", "kind" : "val"}, {"label" : "shortName", "tail" : ": String", "member" : "ostinato.chess.core.CoordinateNotationRules.shortName", "link" : "ostinato\/chess\/core\/CoordinateNotationRules.html#shortName:String", "kind" : "val"}, {"member" : "ostinato.chess.core.CoordinateNotationRules#<init>", "error" : "unsupported entity"}, {"label" : "castlingNotation", "tail" : ": String", "member" : "ostinato.chess.core.CoordinateNotationRules.castlingNotation", "link" : "ostinato\/chess\/core\/CoordinateNotationRules.html#castlingNotation:String", "kind" : "val"}, {"label" : "distinguishCaptures", "tail" : ": Boolean", "member" : "ostinato.chess.core.CoordinateNotationRules.distinguishCaptures", "link" : "ostinato\/chess\/core\/CoordinateNotationRules.html#distinguishCaptures:Boolean", "kind" : "val"}, {"label" : "useDashDelimiter", "tail" : ": Boolean", "member" : "ostinato.chess.core.CoordinateNotationRules.useDashDelimiter", "link" : "ostinato\/chess\/core\/CoordinateNotationRules.html#useDashDelimiter:Boolean", "kind" : "val"}, {"label" : "lowerCaseLetters", "tail" : ": Boolean", "member" : "ostinato.chess.core.CoordinateNotationRules.lowerCaseLetters", "link" : "ostinato\/chess\/core\/CoordinateNotationRules.html#lowerCaseLetters:Boolean", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/CoordinateNotationRules.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/CoordinateNotationRules.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/CoordinateNotationRules.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/CoordinateNotationRules.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/CoordinateNotationRules.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/CoordinateNotationRules.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/CoordinateNotationRules.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/CoordinateNotationRules.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/CoordinateNotationRules.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/CoordinateNotationRules.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/CoordinateNotationRules.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/CoordinateNotationRules.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/CoordinateNotationRules.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/CoordinateNotationRules.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/CoordinateNotationRules.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/CoordinateNotationRules.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/CoordinateNotationRules.html", "kind" : "case class"}, {"name" : "ostinato.chess.core.DescriptiveNotation", "shortDescription" : "", "object" : "ostinato\/chess\/core\/DescriptiveNotation$.html", "members_object" : [{"label" : "allPossibleRules", "tail" : "(): Set[DescriptiveNotationRules]", "member" : "ostinato.chess.core.DescriptiveNotation.allPossibleRules", "link" : "ostinato\/chess\/core\/DescriptiveNotation$.html#allPossibleRules:Set[ostinato.chess.core.DescriptiveNotationRules]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/DescriptiveNotation$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/DescriptiveNotation$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/DescriptiveNotation$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/DescriptiveNotation$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/DescriptiveNotation$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/DescriptiveNotation$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/DescriptiveNotation$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/DescriptiveNotation$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/DescriptiveNotation$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/DescriptiveNotation$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/DescriptiveNotation$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/DescriptiveNotation$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "ostinato\/chess\/core\/DescriptiveNotation$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/DescriptiveNotation$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/core\/DescriptiveNotation$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/chess\/core\/DescriptiveNotation$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/DescriptiveNotation$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/DescriptiveNotation$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/DescriptiveNotation$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "ostinato.chess.core.DescriptiveNotationActionSerialiser", "shortDescription" : "", "members_case class" : [{"label" : "CartesianProductableStringSet", "tail" : "", "member" : "ostinato.chess.core.ActionSerialiser.CartesianProductableStringSet", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#CartesianProductableStringSetextendsAnyRef", "kind" : "implicit class"}, {"label" : "CartesianProductableString", "tail" : "", "member" : "ostinato.chess.core.ActionSerialiser.CartesianProductableString", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#CartesianProductableStringextendsAnyRef", "kind" : "implicit class"}, {"label" : "capturePromote", "tail" : "(a: CapturePromoteAction): Set[String]", "member" : "ostinato.chess.core.DescriptiveNotationActionSerialiser.capturePromote", "link" : "ostinato\/chess\/core\/DescriptiveNotationActionSerialiser.html#capturePromote(a:ostinato.chess.core.CapturePromoteAction):Set[String]", "kind" : "def"}, {"label" : "promote", "tail" : "(a: PromoteAction): Set[String]", "member" : "ostinato.chess.core.DescriptiveNotationActionSerialiser.promote", "link" : "ostinato\/chess\/core\/DescriptiveNotationActionSerialiser.html#promote(a:ostinato.chess.core.PromoteAction):Set[String]", "kind" : "def"}, {"label" : "enPassantCapture", "tail" : "(a: EnPassantCaptureAction): Set[String]", "member" : "ostinato.chess.core.DescriptiveNotationActionSerialiser.enPassantCapture", "link" : "ostinato\/chess\/core\/DescriptiveNotationActionSerialiser.html#enPassantCapture(a:ostinato.chess.core.EnPassantCaptureAction):Set[String]", "kind" : "def"}, {"label" : "draw", "tail" : "(a: DrawAction): Set[String]", "member" : "ostinato.chess.core.DescriptiveNotationActionSerialiser.draw", "link" : "ostinato\/chess\/core\/DescriptiveNotationActionSerialiser.html#draw(a:ostinato.chess.core.DrawAction):Set[String]", "kind" : "def"}, {"label" : "lose", "tail" : "(a: LoseAction): Set[String]", "member" : "ostinato.chess.core.DescriptiveNotationActionSerialiser.lose", "link" : "ostinato\/chess\/core\/DescriptiveNotationActionSerialiser.html#lose(a:ostinato.chess.core.LoseAction):Set[String]", "kind" : "def"}, {"label" : "castling", "tail" : "(a: CastlingAction): Set[String]", "member" : "ostinato.chess.core.DescriptiveNotationActionSerialiser.castling", "link" : "ostinato\/chess\/core\/DescriptiveNotationActionSerialiser.html#castling(a:ostinato.chess.core.CastlingAction):Set[String]", "kind" : "def"}, {"label" : "capture", "tail" : "(a: CaptureAction): Set[String]", "member" : "ostinato.chess.core.DescriptiveNotationActionSerialiser.capture", "link" : "ostinato\/chess\/core\/DescriptiveNotationActionSerialiser.html#capture(a:ostinato.chess.core.CaptureAction):Set[String]", "kind" : "def"}, {"label" : "enPassant", "tail" : "(a: EnPassantAction): Set[String]", "member" : "ostinato.chess.core.DescriptiveNotationActionSerialiser.enPassant", "link" : "ostinato\/chess\/core\/DescriptiveNotationActionSerialiser.html#enPassant(a:ostinato.chess.core.EnPassantAction):Set[String]", "kind" : "def"}, {"label" : "move", "tail" : "(a: MoveAction): Set[String]", "member" : "ostinato.chess.core.DescriptiveNotationActionSerialiser.move", "link" : "ostinato\/chess\/core\/DescriptiveNotationActionSerialiser.html#move(a:ostinato.chess.core.MoveAction):Set[String]", "kind" : "def"}, {"member" : "ostinato.chess.core.DescriptiveNotationActionSerialiser#<init>", "error" : "unsupported entity"}, {"label" : "r", "tail" : ": DescriptiveNotationRules", "member" : "ostinato.chess.core.DescriptiveNotationActionSerialiser.r", "link" : "ostinato\/chess\/core\/DescriptiveNotationActionSerialiser.html#r:ostinato.chess.core.DescriptiveNotationRules", "kind" : "val"}, {"label" : "genericPromotion", "tail" : "(toPiece: ChessPiece): Set[String]", "member" : "ostinato.chess.core.ActionSerialiser.genericPromotion", "link" : "ostinato\/chess\/core\/DescriptiveNotationActionSerialiser.html#genericPromotion(toPiece:ostinato.chess.core.ChessPiece):scala.collection.immutable.Set[String]", "kind" : "def"}, {"label" : "serialiseAction", "tail" : "(a: ChessAction): Set[(String, (ChessAction, NotationRules))]", "member" : "ostinato.chess.core.ActionSerialiser.serialiseAction", "link" : "ostinato\/chess\/core\/DescriptiveNotationActionSerialiser.html#serialiseAction(a:ostinato.chess.core.ChessAction):Set[(String,(ostinato.chess.core.ChessAction,ostinato.chess.core.NotationRules))]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/DescriptiveNotationActionSerialiser.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/DescriptiveNotationActionSerialiser.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/DescriptiveNotationActionSerialiser.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/DescriptiveNotationActionSerialiser.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/DescriptiveNotationActionSerialiser.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/DescriptiveNotationActionSerialiser.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/DescriptiveNotationActionSerialiser.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/DescriptiveNotationActionSerialiser.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/DescriptiveNotationActionSerialiser.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/DescriptiveNotationActionSerialiser.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/DescriptiveNotationActionSerialiser.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/DescriptiveNotationActionSerialiser.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/DescriptiveNotationActionSerialiser.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/DescriptiveNotationActionSerialiser.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/DescriptiveNotationActionSerialiser.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/DescriptiveNotationActionSerialiser.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/DescriptiveNotationActionSerialiser.html", "kind" : "case class"}, {"name" : "ostinato.chess.core.DescriptiveNotationRules", "shortDescription" : "", "members_case class" : [{"label" : "fullName", "tail" : ": String", "member" : "ostinato.chess.core.DescriptiveNotationRules.fullName", "link" : "ostinato\/chess\/core\/DescriptiveNotationRules.html#fullName:String", "kind" : "val"}, {"label" : "shortName", "tail" : ": String", "member" : "ostinato.chess.core.DescriptiveNotationRules.shortName", "link" : "ostinato\/chess\/core\/DescriptiveNotationRules.html#shortName:String", "kind" : "val"}, {"member" : "ostinato.chess.core.DescriptiveNotationRules#<init>", "error" : "unsupported entity"}, {"label" : "castlingNotation", "tail" : ": String", "member" : "ostinato.chess.core.DescriptiveNotationRules.castlingNotation", "link" : "ostinato\/chess\/core\/DescriptiveNotationRules.html#castlingNotation:String", "kind" : "val"}, {"label" : "omitFirstRank", "tail" : ": Boolean", "member" : "ostinato.chess.core.DescriptiveNotationRules.omitFirstRank", "link" : "ostinato\/chess\/core\/DescriptiveNotationRules.html#omitFirstRank:Boolean", "kind" : "val"}, {"label" : "numericalRankBeforeFile", "tail" : ": Boolean", "member" : "ostinato.chess.core.DescriptiveNotationRules.numericalRankBeforeFile", "link" : "ostinato\/chess\/core\/DescriptiveNotationRules.html#numericalRankBeforeFile:Boolean", "kind" : "val"}, {"label" : "omitDash", "tail" : ": Boolean", "member" : "ostinato.chess.core.DescriptiveNotationRules.omitDash", "link" : "ostinato\/chess\/core\/DescriptiveNotationRules.html#omitDash:Boolean", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/DescriptiveNotationRules.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/DescriptiveNotationRules.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/DescriptiveNotationRules.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/DescriptiveNotationRules.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/DescriptiveNotationRules.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/DescriptiveNotationRules.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/DescriptiveNotationRules.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/DescriptiveNotationRules.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/DescriptiveNotationRules.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/DescriptiveNotationRules.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/DescriptiveNotationRules.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/DescriptiveNotationRules.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/DescriptiveNotationRules.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/DescriptiveNotationRules.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/DescriptiveNotationRules.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/DescriptiveNotationRules.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/DescriptiveNotationRules.html", "kind" : "case class"}, {"name" : "ostinato.chess.core.DnPos", "shortDescription" : "", "members_case class" : [{"label" : "toString", "tail" : "(): String", "member" : "ostinato.chess.core.DnPos.toString", "link" : "ostinato\/chess\/core\/package$$DnPos.html#toString():String", "kind" : "def"}, {"member" : "ostinato.chess.core.DnPos#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": Int", "member" : "ostinato.chess.core.DnPos.y", "link" : "ostinato\/chess\/core\/package$$DnPos.html#y:Int", "kind" : "val"}, {"label" : "x", "tail" : ": String", "member" : "ostinato.chess.core.DnPos.x", "link" : "ostinato\/chess\/core\/package$$DnPos.html#x:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/package$$DnPos.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/package$$DnPos.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/package$$DnPos.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/package$$DnPos.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/package$$DnPos.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/package$$DnPos.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/package$$DnPos.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/package$$DnPos.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/package$$DnPos.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/package$$DnPos.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/package$$DnPos.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/package$$DnPos.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/package$$DnPos.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/package$$DnPos.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/package$$DnPos.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/package$$DnPos.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/package$$DnPos.html", "kind" : "case class"}, {"name" : "ostinato.chess.core.DrawAction", "shortDescription" : "", "members_case class" : [{"label" : "gridUpdates", "tail" : "(): List[Nothing]", "member" : "ostinato.chess.core.DrawAction.gridUpdates", "link" : "ostinato\/chess\/core\/DrawAction.html#gridUpdates:List[Nothing]", "kind" : "def"}, {"label" : "toAn", "tail" : ": String", "member" : "ostinato.chess.core.DrawAction.toAn", "link" : "ostinato\/chess\/core\/DrawAction.html#toAn:String", "kind" : "val"}, {"label" : "withCheckmate", "tail" : "(): DrawAction", "member" : "ostinato.chess.core.DrawAction.withCheckmate", "link" : "ostinato\/chess\/core\/DrawAction.html#withCheckmate:ostinato.chess.core.DrawAction", "kind" : "def"}, {"label" : "withCheck", "tail" : "(): DrawAction", "member" : "ostinato.chess.core.DrawAction.withCheck", "link" : "ostinato\/chess\/core\/DrawAction.html#withCheck:ostinato.chess.core.DrawAction", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "ostinato.chess.core.DrawAction.toString", "link" : "ostinato\/chess\/core\/DrawAction.html#toString():String", "kind" : "def"}, {"label" : "isDraw", "tail" : ": Boolean", "member" : "ostinato.chess.core.DrawAction.isDraw", "link" : "ostinato\/chess\/core\/DrawAction.html#isDraw:Boolean", "kind" : "val"}, {"member" : "ostinato.chess.core.DrawAction#<init>", "error" : "unsupported entity"}, {"label" : "isCheckmate", "tail" : ": Boolean", "member" : "ostinato.chess.core.DrawAction.isCheckmate", "link" : "ostinato\/chess\/core\/DrawAction.html#isCheckmate:Boolean", "kind" : "val"}, {"label" : "isCheck", "tail" : ": Boolean", "member" : "ostinato.chess.core.DrawAction.isCheck", "link" : "ostinato\/chess\/core\/DrawAction.html#isCheck:Boolean", "kind" : "val"}, {"label" : "player", "tail" : ": ChessPlayer", "member" : "ostinato.chess.core.DrawAction.player", "link" : "ostinato\/chess\/core\/DrawAction.html#player:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "isFinal", "tail" : ": Boolean", "member" : "ostinato.chess.core.FinalAction.isFinal", "link" : "ostinato\/chess\/core\/DrawAction.html#isFinal:Boolean", "kind" : "val"}, {"label" : "isLoss", "tail" : ": Boolean", "member" : "ostinato.chess.core.FinalAction.isLoss", "link" : "ostinato\/chess\/core\/DrawAction.html#isLoss:Boolean", "kind" : "val"}, {"label" : "enemy", "tail" : ": ChessPlayer", "member" : "ostinato.chess.core.ChessAction.enemy", "link" : "ostinato\/chess\/core\/DrawAction.html#enemy:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "turn", "tail" : ": ChessPlayer", "member" : "ostinato.chess.core.ChessAction.turn", "link" : "ostinato\/chess\/core\/DrawAction.html#turn:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "delta", "tail" : ": XY", "member" : "ostinato.chess.core.ChessAction.delta", "link" : "ostinato\/chess\/core\/DrawAction.html#delta:ostinato.core.XY", "kind" : "val"}, {"label" : "fromPiece", "tail" : ": ChessPiece", "member" : "ostinato.chess.core.ChessAction.fromPiece", "link" : "ostinato\/chess\/core\/DrawAction.html#fromPiece:ostinato.chess.core.ChessPiece", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/DrawAction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/DrawAction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/DrawAction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/DrawAction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/DrawAction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/DrawAction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/DrawAction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/DrawAction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/DrawAction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/DrawAction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/DrawAction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/DrawAction.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/DrawAction.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/DrawAction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/DrawAction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/DrawAction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/DrawAction.html", "kind" : "case class"}, {"name" : "ostinato.chess.core.DrawActionFactory", "shortDescription" : "", "members_case class" : [{"label" : "complete", "tail" : "(isCheck: Boolean, isCheckmate: Boolean): DrawAction", "member" : "ostinato.chess.core.DrawActionFactory.complete", "link" : "ostinato\/chess\/core\/DrawActionFactory.html#complete(isCheck:Boolean,isCheckmate:Boolean):ostinato.chess.core.DrawAction", "kind" : "def"}, {"member" : "ostinato.chess.core.DrawActionFactory#<init>", "error" : "unsupported entity"}, {"label" : "player", "tail" : ": ChessPlayer", "member" : "ostinato.chess.core.DrawActionFactory.player", "link" : "ostinato\/chess\/core\/DrawActionFactory.html#player:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/DrawActionFactory.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/DrawActionFactory.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/DrawActionFactory.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/DrawActionFactory.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/DrawActionFactory.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/DrawActionFactory.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/DrawActionFactory.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/DrawActionFactory.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/DrawActionFactory.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/DrawActionFactory.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/DrawActionFactory.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/DrawActionFactory.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/DrawActionFactory.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/DrawActionFactory.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/DrawActionFactory.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/DrawActionFactory.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/DrawActionFactory.html", "kind" : "case class"}, {"name" : "ostinato.chess.core.EnPassantAction", "shortDescription" : "", "members_case class" : [{"label" : "toAn", "tail" : ": String", "member" : "ostinato.chess.core.EnPassantAction.toAn", "link" : "ostinato\/chess\/core\/EnPassantAction.html#toAn:String", "kind" : "val"}, {"label" : "withCheckmate", "tail" : "(): EnPassantAction", "member" : "ostinato.chess.core.EnPassantAction.withCheckmate", "link" : "ostinato\/chess\/core\/EnPassantAction.html#withCheckmate:ostinato.chess.core.EnPassantAction", "kind" : "def"}, {"label" : "withCheck", "tail" : "(): EnPassantAction", "member" : "ostinato.chess.core.EnPassantAction.withCheck", "link" : "ostinato\/chess\/core\/EnPassantAction.html#withCheck:ostinato.chess.core.EnPassantAction", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "ostinato.chess.core.EnPassantAction.toString", "link" : "ostinato\/chess\/core\/EnPassantAction.html#toString():String", "kind" : "def"}, {"member" : "ostinato.chess.core.EnPassantAction#<init>", "error" : "unsupported entity"}, {"label" : "isCheckmate", "tail" : ": Boolean", "member" : "ostinato.chess.core.EnPassantAction.isCheckmate", "link" : "ostinato\/chess\/core\/EnPassantAction.html#isCheckmate:Boolean", "kind" : "val"}, {"label" : "isCheck", "tail" : ": Boolean", "member" : "ostinato.chess.core.EnPassantAction.isCheck", "link" : "ostinato\/chess\/core\/EnPassantAction.html#isCheck:Boolean", "kind" : "val"}, {"label" : "delta", "tail" : ": XY", "member" : "ostinato.chess.core.EnPassantAction.delta", "link" : "ostinato\/chess\/core\/EnPassantAction.html#delta:ostinato.core.XY", "kind" : "val"}, {"label" : "fromPawn", "tail" : ": ♟", "member" : "ostinato.chess.core.EnPassantAction.fromPawn", "link" : "ostinato\/chess\/core\/EnPassantAction.html#fromPawn:ostinato.chess.core.♟", "kind" : "val"}, {"label" : "gridUpdates", "tail" : "(): List[(Int, Option[ChessPiece])]", "member" : "ostinato.chess.core.ChessAction.gridUpdates", "link" : "ostinato\/chess\/core\/EnPassantAction.html#gridUpdates:List[(Int,Option[ostinato.chess.core.ChessPiece])]", "kind" : "def"}, {"label" : "enemy", "tail" : ": ChessPlayer", "member" : "ostinato.chess.core.ChessAction.enemy", "link" : "ostinato\/chess\/core\/EnPassantAction.html#enemy:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "turn", "tail" : ": ChessPlayer", "member" : "ostinato.chess.core.ChessAction.turn", "link" : "ostinato\/chess\/core\/EnPassantAction.html#turn:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "isFinal", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessAction.isFinal", "link" : "ostinato\/chess\/core\/EnPassantAction.html#isFinal:Boolean", "kind" : "val"}, {"label" : "fromPiece", "tail" : ": ChessPiece", "member" : "ostinato.chess.core.ChessAction.fromPiece", "link" : "ostinato\/chess\/core\/EnPassantAction.html#fromPiece:ostinato.chess.core.ChessPiece", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/EnPassantAction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/EnPassantAction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/EnPassantAction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/EnPassantAction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/EnPassantAction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/EnPassantAction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/EnPassantAction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/EnPassantAction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/EnPassantAction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/EnPassantAction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/EnPassantAction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/EnPassantAction.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/EnPassantAction.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/EnPassantAction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/EnPassantAction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/EnPassantAction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/EnPassantAction.html", "kind" : "case class"}, {"name" : "ostinato.chess.core.EnPassantActionFactory", "shortDescription" : "", "members_case class" : [{"label" : "complete", "tail" : "(isCheck: Boolean, isCheckmate: Boolean): EnPassantAction", "member" : "ostinato.chess.core.EnPassantActionFactory.complete", "link" : "ostinato\/chess\/core\/EnPassantActionFactory.html#complete(isCheck:Boolean,isCheckmate:Boolean):ostinato.chess.core.EnPassantAction", "kind" : "def"}, {"member" : "ostinato.chess.core.EnPassantActionFactory#<init>", "error" : "unsupported entity"}, {"label" : "delta", "tail" : ": XY", "member" : "ostinato.chess.core.EnPassantActionFactory.delta", "link" : "ostinato\/chess\/core\/EnPassantActionFactory.html#delta:ostinato.core.XY", "kind" : "val"}, {"label" : "fromPawn", "tail" : ": ♟", "member" : "ostinato.chess.core.EnPassantActionFactory.fromPawn", "link" : "ostinato\/chess\/core\/EnPassantActionFactory.html#fromPawn:ostinato.chess.core.♟", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/EnPassantActionFactory.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/EnPassantActionFactory.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/EnPassantActionFactory.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/EnPassantActionFactory.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/EnPassantActionFactory.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/EnPassantActionFactory.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/EnPassantActionFactory.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/EnPassantActionFactory.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/EnPassantActionFactory.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/EnPassantActionFactory.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/EnPassantActionFactory.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/EnPassantActionFactory.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/EnPassantActionFactory.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/EnPassantActionFactory.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/EnPassantActionFactory.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/EnPassantActionFactory.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/EnPassantActionFactory.html", "kind" : "case class"}, {"name" : "ostinato.chess.core.EnPassantCaptureAction", "shortDescription" : "", "members_case class" : [{"label" : "gridUpdates", "tail" : "(): List[(Int, Option[ChessPiece])]", "member" : "ostinato.chess.core.EnPassantCaptureAction.gridUpdates", "link" : "ostinato\/chess\/core\/EnPassantCaptureAction.html#gridUpdates:List[(Int,Option[ostinato.chess.core.ChessPiece])]", "kind" : "def"}, {"label" : "toAn", "tail" : ": String", "member" : "ostinato.chess.core.EnPassantCaptureAction.toAn", "link" : "ostinato\/chess\/core\/EnPassantCaptureAction.html#toAn:String", "kind" : "val"}, {"label" : "withCheckmate", "tail" : "(): EnPassantCaptureAction", "member" : "ostinato.chess.core.EnPassantCaptureAction.withCheckmate", "link" : "ostinato\/chess\/core\/EnPassantCaptureAction.html#withCheckmate:ostinato.chess.core.EnPassantCaptureAction", "kind" : "def"}, {"label" : "withCheck", "tail" : "(): EnPassantCaptureAction", "member" : "ostinato.chess.core.EnPassantCaptureAction.withCheck", "link" : "ostinato\/chess\/core\/EnPassantCaptureAction.html#withCheck:ostinato.chess.core.EnPassantCaptureAction", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "ostinato.chess.core.EnPassantCaptureAction.toString", "link" : "ostinato\/chess\/core\/EnPassantCaptureAction.html#toString():String", "kind" : "def"}, {"member" : "ostinato.chess.core.EnPassantCaptureAction#<init>", "error" : "unsupported entity"}, {"label" : "isCheckmate", "tail" : ": Boolean", "member" : "ostinato.chess.core.EnPassantCaptureAction.isCheckmate", "link" : "ostinato\/chess\/core\/EnPassantCaptureAction.html#isCheckmate:Boolean", "kind" : "val"}, {"label" : "isCheck", "tail" : ": Boolean", "member" : "ostinato.chess.core.EnPassantCaptureAction.isCheck", "link" : "ostinato\/chess\/core\/EnPassantCaptureAction.html#isCheck:Boolean", "kind" : "val"}, {"label" : "toPawn", "tail" : ": ♟", "member" : "ostinato.chess.core.EnPassantCaptureAction.toPawn", "link" : "ostinato\/chess\/core\/EnPassantCaptureAction.html#toPawn:ostinato.chess.core.♟", "kind" : "val"}, {"label" : "delta", "tail" : ": XY", "member" : "ostinato.chess.core.EnPassantCaptureAction.delta", "link" : "ostinato\/chess\/core\/EnPassantCaptureAction.html#delta:ostinato.core.XY", "kind" : "val"}, {"label" : "fromPawn", "tail" : ": ♟", "member" : "ostinato.chess.core.EnPassantCaptureAction.fromPawn", "link" : "ostinato\/chess\/core\/EnPassantCaptureAction.html#fromPawn:ostinato.chess.core.♟", "kind" : "val"}, {"label" : "enemy", "tail" : ": ChessPlayer", "member" : "ostinato.chess.core.ChessAction.enemy", "link" : "ostinato\/chess\/core\/EnPassantCaptureAction.html#enemy:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "turn", "tail" : ": ChessPlayer", "member" : "ostinato.chess.core.ChessAction.turn", "link" : "ostinato\/chess\/core\/EnPassantCaptureAction.html#turn:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "isFinal", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessAction.isFinal", "link" : "ostinato\/chess\/core\/EnPassantCaptureAction.html#isFinal:Boolean", "kind" : "val"}, {"label" : "fromPiece", "tail" : ": ChessPiece", "member" : "ostinato.chess.core.ChessAction.fromPiece", "link" : "ostinato\/chess\/core\/EnPassantCaptureAction.html#fromPiece:ostinato.chess.core.ChessPiece", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/EnPassantCaptureAction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/EnPassantCaptureAction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/EnPassantCaptureAction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/EnPassantCaptureAction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/EnPassantCaptureAction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/EnPassantCaptureAction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/EnPassantCaptureAction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/EnPassantCaptureAction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/EnPassantCaptureAction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/EnPassantCaptureAction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/EnPassantCaptureAction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/EnPassantCaptureAction.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/EnPassantCaptureAction.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/EnPassantCaptureAction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/EnPassantCaptureAction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/EnPassantCaptureAction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/EnPassantCaptureAction.html", "kind" : "case class"}, {"name" : "ostinato.chess.core.EnPassantPawn", "shortDescription" : "", "object" : "ostinato\/chess\/core\/EnPassantPawn$.html", "members_object" : [{"label" : "fromXYD", "tail" : "(pos: XY, delta: XY, grid: Vector[Option[ChessPiece]]): Option[EnPassantPawn]", "member" : "ostinato.chess.core.EnPassantPawn.fromXYD", "link" : "ostinato\/chess\/core\/EnPassantPawn$.html#fromXYD(pos:ostinato.core.XY,delta:ostinato.core.XY,grid:Vector[Option[ostinato.chess.core.ChessPiece]]):Option[ostinato.chess.core.EnPassantPawn]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/EnPassantPawn$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/EnPassantPawn$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/EnPassantPawn$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/EnPassantPawn$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/EnPassantPawn$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/EnPassantPawn$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/EnPassantPawn$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/EnPassantPawn$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/EnPassantPawn$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/EnPassantPawn$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/EnPassantPawn$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/EnPassantPawn$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "ostinato\/chess\/core\/EnPassantPawn$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/EnPassantPawn$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/core\/EnPassantPawn$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/chess\/core\/EnPassantPawn$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/EnPassantPawn$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/EnPassantPawn$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/EnPassantPawn$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "ostinato.chess.core.EnPassantPawn#<init>", "error" : "unsupported entity"}, {"label" : "pawn", "tail" : ": ♟", "member" : "ostinato.chess.core.EnPassantPawn.pawn", "link" : "ostinato\/chess\/core\/EnPassantPawn.html#pawn:ostinato.chess.core.♟", "kind" : "val"}, {"label" : "from", "tail" : ": XY", "member" : "ostinato.chess.core.EnPassantPawn.from", "link" : "ostinato\/chess\/core\/EnPassantPawn.html#from:ostinato.core.XY", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/EnPassantPawn.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/EnPassantPawn.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/EnPassantPawn.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/EnPassantPawn.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/EnPassantPawn.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/EnPassantPawn.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/EnPassantPawn.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/EnPassantPawn.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/EnPassantPawn.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/EnPassantPawn.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/EnPassantPawn.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/EnPassantPawn.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/EnPassantPawn.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/EnPassantPawn.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/EnPassantPawn.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/EnPassantPawn.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/EnPassantPawn.html", "kind" : "object"}, {"name" : "ostinato.chess.core.EnPassantTakeActionFactory", "shortDescription" : "", "members_case class" : [{"label" : "complete", "tail" : "(isCheck: Boolean, isCheckmate: Boolean): EnPassantCaptureAction", "member" : "ostinato.chess.core.EnPassantTakeActionFactory.complete", "link" : "ostinato\/chess\/core\/EnPassantTakeActionFactory.html#complete(isCheck:Boolean,isCheckmate:Boolean):ostinato.chess.core.EnPassantCaptureAction", "kind" : "def"}, {"member" : "ostinato.chess.core.EnPassantTakeActionFactory#<init>", "error" : "unsupported entity"}, {"label" : "toPawn", "tail" : ": ♟", "member" : "ostinato.chess.core.EnPassantTakeActionFactory.toPawn", "link" : "ostinato\/chess\/core\/EnPassantTakeActionFactory.html#toPawn:ostinato.chess.core.♟", "kind" : "val"}, {"label" : "delta", "tail" : ": XY", "member" : "ostinato.chess.core.EnPassantTakeActionFactory.delta", "link" : "ostinato\/chess\/core\/EnPassantTakeActionFactory.html#delta:ostinato.core.XY", "kind" : "val"}, {"label" : "fromPawn", "tail" : ": ♟", "member" : "ostinato.chess.core.EnPassantTakeActionFactory.fromPawn", "link" : "ostinato\/chess\/core\/EnPassantTakeActionFactory.html#fromPawn:ostinato.chess.core.♟", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/EnPassantTakeActionFactory.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/EnPassantTakeActionFactory.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/EnPassantTakeActionFactory.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/EnPassantTakeActionFactory.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/EnPassantTakeActionFactory.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/EnPassantTakeActionFactory.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/EnPassantTakeActionFactory.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/EnPassantTakeActionFactory.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/EnPassantTakeActionFactory.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/EnPassantTakeActionFactory.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/EnPassantTakeActionFactory.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/EnPassantTakeActionFactory.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/EnPassantTakeActionFactory.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/EnPassantTakeActionFactory.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/EnPassantTakeActionFactory.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/EnPassantTakeActionFactory.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/EnPassantTakeActionFactory.html", "kind" : "case class"}, {"name" : "ostinato.chess.core.Fan", "shortDescription" : "", "object" : "ostinato\/chess\/core\/package$$Fan$.html", "members_object" : [{"label" : "draw", "tail" : "(): String", "member" : "ostinato.chess.core.Fan.draw", "link" : "ostinato\/chess\/core\/package$$Fan$.html#draw:String", "kind" : "def"}, {"label" : "queenSideCastle", "tail" : "(): String", "member" : "ostinato.chess.core.Fan.queenSideCastle", "link" : "ostinato\/chess\/core\/package$$Fan$.html#queenSideCastle:String", "kind" : "def"}, {"label" : "kingSideCastle", "tail" : "(): String", "member" : "ostinato.chess.core.Fan.kingSideCastle", "link" : "ostinato\/chess\/core\/package$$Fan$.html#kingSideCastle:String", "kind" : "def"}, {"label" : "check", "tail" : "(): String", "member" : "ostinato.chess.core.Fan.check", "link" : "ostinato\/chess\/core\/package$$Fan$.html#check:String", "kind" : "def"}, {"label" : "checkmate", "tail" : "(winner: ChessPlayer): String", "member" : "ostinato.chess.core.Fan.checkmate", "link" : "ostinato\/chess\/core\/package$$Fan$.html#checkmate(winner:ostinato.chess.core.ChessPlayer):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/package$$Fan$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/package$$Fan$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/package$$Fan$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/package$$Fan$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/package$$Fan$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/package$$Fan$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/package$$Fan$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/package$$Fan$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/package$$Fan$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/package$$Fan$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/package$$Fan$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/package$$Fan$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "ostinato\/chess\/core\/package$$Fan$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/package$$Fan$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/core\/package$$Fan$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/chess\/core\/package$$Fan$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/package$$Fan$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/package$$Fan$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/package$$Fan$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "ostinato.chess.core.Fen", "shortDescription" : "", "object" : "ostinato\/chess\/core\/Fen$.html", "members_object" : [{"label" : "calculateNumber", "tail" : "(s: String): Try[Int]", "member" : "ostinato.chess.core.Fen.calculateNumber", "link" : "ostinato\/chess\/core\/Fen$.html#calculateNumber(s:String):scala.util.Try[Int]", "kind" : "def"}, {"label" : "calculateEnPassantPawn", "tail" : "(s: String, turn: ChessPlayer): Option[EnPassantPawn]", "member" : "ostinato.chess.core.Fen.calculateEnPassantPawn", "link" : "ostinato\/chess\/core\/Fen$.html#calculateEnPassantPawn(s:String,turn:ostinato.chess.core.ChessPlayer):Option[ostinato.chess.core.EnPassantPawn]", "kind" : "def"}, {"label" : "calculateCastlingAvailable", "tail" : "(s: String): Map[(ChessPlayer, CastlingSide.Value), Boolean]", "member" : "ostinato.chess.core.Fen.calculateCastlingAvailable", "link" : "ostinato\/chess\/core\/Fen$.html#calculateCastlingAvailable(s:String):Map[(ostinato.chess.core.ChessPlayer,ostinato.chess.core.CastlingSide.Value),Boolean]", "kind" : "def"}, {"label" : "calculateTurn", "tail" : "(s: String): Option[ChessPlayer]", "member" : "ostinato.chess.core.Fen.calculateTurn", "link" : "ostinato\/chess\/core\/Fen$.html#calculateTurn(s:String):Option[ostinato.chess.core.ChessPlayer]", "kind" : "def"}, {"label" : "shortFenTransformation", "tail" : ": Map[Char, String]", "member" : "ostinato.chess.core.Fen.shortFenTransformation", "link" : "ostinato\/chess\/core\/Fen$.html#shortFenTransformation:Map[Char,String]", "kind" : "lazy val"}, {"label" : "isValidShortFen", "tail" : "(s: String): Boolean", "member" : "ostinato.chess.core.Fen.isValidShortFen", "link" : "ostinato\/chess\/core\/Fen$.html#isValidShortFen(s:String):Boolean", "kind" : "def"}, {"label" : "isValidFen", "tail" : "(s: String): Boolean", "member" : "ostinato.chess.core.Fen.isValidFen", "link" : "ostinato\/chess\/core\/Fen$.html#isValidFen(s:String):Boolean", "kind" : "def"}, {"label" : "+", "tail" : "(f: Fen, char: Char): Fen", "member" : "ostinato.chess.core.Fen.+", "link" : "ostinato\/chess\/core\/Fen$.html#+(f:ostinato.chess.core.Fen,char:Char):ostinato.chess.core.Fen", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/Fen$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/Fen$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/Fen$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/Fen$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/Fen$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/Fen$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/Fen$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/Fen$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/Fen$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/Fen$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/Fen$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/Fen$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "ostinato\/chess\/core\/Fen$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/Fen$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/core\/Fen$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/chess\/core\/Fen$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/Fen$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/Fen$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/Fen$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "toString", "tail" : "(): String", "member" : "ostinato.chess.core.Fen.toString", "link" : "ostinato\/chess\/core\/Fen.html#toString():String", "kind" : "def"}, {"member" : "ostinato.chess.core.Fen#<init>", "error" : "unsupported entity"}, {"label" : "emptyCells", "tail" : ": Int", "member" : "ostinato.chess.core.Fen.emptyCells", "link" : "ostinato\/chess\/core\/Fen.html#emptyCells:Int", "kind" : "val"}, {"label" : "cellCount", "tail" : ": Int", "member" : "ostinato.chess.core.Fen.cellCount", "link" : "ostinato\/chess\/core\/Fen.html#cellCount:Int", "kind" : "val"}, {"label" : "partialString", "tail" : ": String", "member" : "ostinato.chess.core.Fen.partialString", "link" : "ostinato\/chess\/core\/Fen.html#partialString:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/Fen.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/Fen.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/Fen.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/Fen.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/Fen.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/Fen.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/Fen.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/Fen.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/Fen.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/Fen.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/Fen.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/Fen.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/Fen.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/Fen.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/Fen.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/Fen.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/Fen.html", "kind" : "object"}, {"name" : "ostinato.chess.core.FenStringRegexMismatchException", "shortDescription" : "", "object" : "ostinato\/chess\/core\/FenStringRegexMismatchException$.html", "members_object" : [{"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "scala.util.control.NoStackTrace.fillInStackTrace", "link" : "ostinato\/chess\/core\/FenStringRegexMismatchException$.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "ostinato\/chess\/core\/FenStringRegexMismatchException$.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "ostinato\/chess\/core\/FenStringRegexMismatchException$.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "ostinato\/chess\/core\/FenStringRegexMismatchException$.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "ostinato\/chess\/core\/FenStringRegexMismatchException$.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "ostinato\/chess\/core\/FenStringRegexMismatchException$.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "ostinato\/chess\/core\/FenStringRegexMismatchException$.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "ostinato\/chess\/core\/FenStringRegexMismatchException$.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "ostinato\/chess\/core\/FenStringRegexMismatchException$.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "ostinato\/chess\/core\/FenStringRegexMismatchException$.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "ostinato\/chess\/core\/FenStringRegexMismatchException$.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "ostinato\/chess\/core\/FenStringRegexMismatchException$.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "ostinato\/chess\/core\/FenStringRegexMismatchException$.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/FenStringRegexMismatchException$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/FenStringRegexMismatchException$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/FenStringRegexMismatchException$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/FenStringRegexMismatchException$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/FenStringRegexMismatchException$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/FenStringRegexMismatchException$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/FenStringRegexMismatchException$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/FenStringRegexMismatchException$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/FenStringRegexMismatchException$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/FenStringRegexMismatchException$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/FenStringRegexMismatchException$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/FenStringRegexMismatchException$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/FenStringRegexMismatchException$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/core\/FenStringRegexMismatchException$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/FenStringRegexMismatchException$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/FenStringRegexMismatchException$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/FenStringRegexMismatchException$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "ostinato.chess.core.FinalAction", "shortDescription" : "", "members_class" : [{"label" : "isFinal", "tail" : ": Boolean", "member" : "ostinato.chess.core.FinalAction.isFinal", "link" : "ostinato\/chess\/core\/FinalAction.html#isFinal:Boolean", "kind" : "val"}, {"label" : "isLoss", "tail" : ": Boolean", "member" : "ostinato.chess.core.FinalAction.isLoss", "link" : "ostinato\/chess\/core\/FinalAction.html#isLoss:Boolean", "kind" : "val"}, {"label" : "isDraw", "tail" : ": Boolean", "member" : "ostinato.chess.core.FinalAction.isDraw", "link" : "ostinato\/chess\/core\/FinalAction.html#isDraw:Boolean", "kind" : "val"}, {"member" : "ostinato.chess.core.FinalAction#<init>", "error" : "unsupported entity"}, {"label" : "gridUpdates", "tail" : "(): List[(Int, Option[ChessPiece])]", "member" : "ostinato.chess.core.ChessAction.gridUpdates", "link" : "ostinato\/chess\/core\/FinalAction.html#gridUpdates:List[(Int,Option[ostinato.chess.core.ChessPiece])]", "kind" : "def"}, {"label" : "enemy", "tail" : ": ChessPlayer", "member" : "ostinato.chess.core.ChessAction.enemy", "link" : "ostinato\/chess\/core\/FinalAction.html#enemy:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "turn", "tail" : ": ChessPlayer", "member" : "ostinato.chess.core.ChessAction.turn", "link" : "ostinato\/chess\/core\/FinalAction.html#turn:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "isCheckmate", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessAction.isCheckmate", "link" : "ostinato\/chess\/core\/FinalAction.html#isCheckmate:Boolean", "kind" : "val"}, {"label" : "isCheck", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessAction.isCheck", "link" : "ostinato\/chess\/core\/FinalAction.html#isCheck:Boolean", "kind" : "val"}, {"label" : "delta", "tail" : ": XY", "member" : "ostinato.chess.core.ChessAction.delta", "link" : "ostinato\/chess\/core\/FinalAction.html#delta:ostinato.core.XY", "kind" : "val"}, {"label" : "fromPiece", "tail" : ": ChessPiece", "member" : "ostinato.chess.core.ChessAction.fromPiece", "link" : "ostinato\/chess\/core\/FinalAction.html#fromPiece:ostinato.chess.core.ChessPiece", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/FinalAction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/FinalAction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/FinalAction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/FinalAction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/FinalAction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/FinalAction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/FinalAction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/FinalAction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/FinalAction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/FinalAction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/FinalAction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/FinalAction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "ostinato\/chess\/core\/FinalAction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/FinalAction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/core\/FinalAction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/chess\/core\/FinalAction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/FinalAction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/FinalAction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/FinalAction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toAn", "tail" : ": String", "member" : "ostinato.chess.core.ChessAction.toAn", "link" : "ostinato\/chess\/core\/FinalAction.html#toAn:String", "kind" : "abstract val"}], "class" : "ostinato\/chess\/core\/FinalAction.html", "kind" : "class"}, {"name" : "ostinato.chess.core.GameStep", "shortDescription" : "", "members_case class" : [{"member" : "ostinato.chess.core.GameStep#<init>", "error" : "unsupported entity"}, {"label" : "board", "tail" : ": ChessBoard", "member" : "ostinato.chess.core.GameStep.board", "link" : "ostinato\/chess\/core\/package$$GameStep.html#board:ostinato.chess.core.ChessBoard", "kind" : "val"}, {"label" : "action", "tail" : ": Option[ChessAction]", "member" : "ostinato.chess.core.GameStep.action", "link" : "ostinato\/chess\/core\/package$$GameStep.html#action:Option[ostinato.chess.core.ChessAction]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/package$$GameStep.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/package$$GameStep.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/package$$GameStep.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/package$$GameStep.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/package$$GameStep.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/package$$GameStep.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/package$$GameStep.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/package$$GameStep.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/package$$GameStep.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/package$$GameStep.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/package$$GameStep.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/package$$GameStep.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/package$$GameStep.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/package$$GameStep.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/package$$GameStep.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/package$$GameStep.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/package$$GameStep.html", "kind" : "case class"}, {"name" : "ostinato.chess.core.IccfActionStringAmbiguous", "shortDescription" : "", "object" : "ostinato\/chess\/core\/IccfActionStringAmbiguous$.html", "members_object" : [{"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "scala.util.control.NoStackTrace.fillInStackTrace", "link" : "ostinato\/chess\/core\/IccfActionStringAmbiguous$.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "ostinato\/chess\/core\/IccfActionStringAmbiguous$.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "ostinato\/chess\/core\/IccfActionStringAmbiguous$.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "ostinato\/chess\/core\/IccfActionStringAmbiguous$.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "ostinato\/chess\/core\/IccfActionStringAmbiguous$.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "ostinato\/chess\/core\/IccfActionStringAmbiguous$.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "ostinato\/chess\/core\/IccfActionStringAmbiguous$.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "ostinato\/chess\/core\/IccfActionStringAmbiguous$.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "ostinato\/chess\/core\/IccfActionStringAmbiguous$.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "ostinato\/chess\/core\/IccfActionStringAmbiguous$.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "ostinato\/chess\/core\/IccfActionStringAmbiguous$.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "ostinato\/chess\/core\/IccfActionStringAmbiguous$.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "ostinato\/chess\/core\/IccfActionStringAmbiguous$.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/IccfActionStringAmbiguous$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/IccfActionStringAmbiguous$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/IccfActionStringAmbiguous$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/IccfActionStringAmbiguous$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/IccfActionStringAmbiguous$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/IccfActionStringAmbiguous$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/IccfActionStringAmbiguous$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/IccfActionStringAmbiguous$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/IccfActionStringAmbiguous$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/IccfActionStringAmbiguous$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/IccfActionStringAmbiguous$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/IccfActionStringAmbiguous$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/IccfActionStringAmbiguous$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/core\/IccfActionStringAmbiguous$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/IccfActionStringAmbiguous$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/IccfActionStringAmbiguous$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/IccfActionStringAmbiguous$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "ostinato.chess.core.IccfActionStringTooLong", "shortDescription" : "", "object" : "ostinato\/chess\/core\/IccfActionStringTooLong$.html", "members_object" : [{"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "scala.util.control.NoStackTrace.fillInStackTrace", "link" : "ostinato\/chess\/core\/IccfActionStringTooLong$.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "ostinato\/chess\/core\/IccfActionStringTooLong$.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "ostinato\/chess\/core\/IccfActionStringTooLong$.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "ostinato\/chess\/core\/IccfActionStringTooLong$.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "ostinato\/chess\/core\/IccfActionStringTooLong$.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "ostinato\/chess\/core\/IccfActionStringTooLong$.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "ostinato\/chess\/core\/IccfActionStringTooLong$.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "ostinato\/chess\/core\/IccfActionStringTooLong$.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "ostinato\/chess\/core\/IccfActionStringTooLong$.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "ostinato\/chess\/core\/IccfActionStringTooLong$.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "ostinato\/chess\/core\/IccfActionStringTooLong$.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "ostinato\/chess\/core\/IccfActionStringTooLong$.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "ostinato\/chess\/core\/IccfActionStringTooLong$.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/IccfActionStringTooLong$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/IccfActionStringTooLong$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/IccfActionStringTooLong$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/IccfActionStringTooLong$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/IccfActionStringTooLong$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/IccfActionStringTooLong$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/IccfActionStringTooLong$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/IccfActionStringTooLong$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/IccfActionStringTooLong$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/IccfActionStringTooLong$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/IccfActionStringTooLong$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/IccfActionStringTooLong$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/IccfActionStringTooLong$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/core\/IccfActionStringTooLong$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/IccfActionStringTooLong$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/IccfActionStringTooLong$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/IccfActionStringTooLong$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "ostinato.chess.core.IccfNotation", "shortDescription" : "", "object" : "ostinato\/chess\/core\/IccfNotation$.html", "members_object" : [{"label" : "parseActionString", "tail" : "(s: String, board: ChessBoard): Try[GameStep]", "member" : "ostinato.chess.core.IccfNotation.parseActionString", "link" : "ostinato\/chess\/core\/IccfNotation$.html#parseActionString(s:String,board:ostinato.chess.core.ChessBoard):scala.util.Try[ostinato.chess.core.GameStep]", "kind" : "def"}, {"label" : "allPossibleRules", "tail" : "(): Set[IccfNotationRules]", "member" : "ostinato.chess.core.IccfNotation.allPossibleRules", "link" : "ostinato\/chess\/core\/IccfNotation$.html#allPossibleRules:Set[ostinato.chess.core.IccfNotationRules]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/IccfNotation$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/IccfNotation$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/IccfNotation$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/IccfNotation$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/IccfNotation$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/IccfNotation$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/IccfNotation$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/IccfNotation$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/IccfNotation$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/IccfNotation$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/IccfNotation$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/IccfNotation$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "ostinato\/chess\/core\/IccfNotation$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/IccfNotation$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/core\/IccfNotation$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/chess\/core\/IccfNotation$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/IccfNotation$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/IccfNotation$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/IccfNotation$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "ostinato.chess.core.IccfNotationActionSerialiser", "shortDescription" : "", "members_case class" : [{"label" : "CartesianProductableStringSet", "tail" : "", "member" : "ostinato.chess.core.ActionSerialiser.CartesianProductableStringSet", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#CartesianProductableStringSetextendsAnyRef", "kind" : "implicit class"}, {"label" : "CartesianProductableString", "tail" : "", "member" : "ostinato.chess.core.ActionSerialiser.CartesianProductableString", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#CartesianProductableStringextendsAnyRef", "kind" : "implicit class"}, {"label" : "capturePromote", "tail" : "(a: CapturePromoteAction): Set[String]", "member" : "ostinato.chess.core.IccfNotationActionSerialiser.capturePromote", "link" : "ostinato\/chess\/core\/IccfNotationActionSerialiser.html#capturePromote(a:ostinato.chess.core.CapturePromoteAction):scala.collection.immutable.Set[String]", "kind" : "def"}, {"label" : "draw", "tail" : "(a: DrawAction): Set[String]", "member" : "ostinato.chess.core.IccfNotationActionSerialiser.draw", "link" : "ostinato\/chess\/core\/IccfNotationActionSerialiser.html#draw(a:ostinato.chess.core.DrawAction):scala.collection.immutable.Set[String]", "kind" : "def"}, {"label" : "lose", "tail" : "(a: LoseAction): Set[String]", "member" : "ostinato.chess.core.IccfNotationActionSerialiser.lose", "link" : "ostinato\/chess\/core\/IccfNotationActionSerialiser.html#lose(a:ostinato.chess.core.LoseAction):scala.collection.immutable.Set[String]", "kind" : "def"}, {"label" : "promote", "tail" : "(a: PromoteAction): Set[String]", "member" : "ostinato.chess.core.IccfNotationActionSerialiser.promote", "link" : "ostinato\/chess\/core\/IccfNotationActionSerialiser.html#promote(a:ostinato.chess.core.PromoteAction):scala.collection.immutable.Set[String]", "kind" : "def"}, {"label" : "castling", "tail" : "(a: CastlingAction): Set[String]", "member" : "ostinato.chess.core.IccfNotationActionSerialiser.castling", "link" : "ostinato\/chess\/core\/IccfNotationActionSerialiser.html#castling(a:ostinato.chess.core.CastlingAction):scala.collection.immutable.Set[String]", "kind" : "def"}, {"label" : "enPassantCapture", "tail" : "(a: EnPassantCaptureAction): Set[String]", "member" : "ostinato.chess.core.IccfNotationActionSerialiser.enPassantCapture", "link" : "ostinato\/chess\/core\/IccfNotationActionSerialiser.html#enPassantCapture(a:ostinato.chess.core.EnPassantCaptureAction):scala.collection.immutable.Set[String]", "kind" : "def"}, {"label" : "capture", "tail" : "(a: CaptureAction): Set[String]", "member" : "ostinato.chess.core.IccfNotationActionSerialiser.capture", "link" : "ostinato\/chess\/core\/IccfNotationActionSerialiser.html#capture(a:ostinato.chess.core.CaptureAction):scala.collection.immutable.Set[String]", "kind" : "def"}, {"label" : "enPassant", "tail" : "(a: EnPassantAction): Set[String]", "member" : "ostinato.chess.core.IccfNotationActionSerialiser.enPassant", "link" : "ostinato\/chess\/core\/IccfNotationActionSerialiser.html#enPassant(a:ostinato.chess.core.EnPassantAction):scala.collection.immutable.Set[String]", "kind" : "def"}, {"label" : "move", "tail" : "(a: MoveAction): Set[String]", "member" : "ostinato.chess.core.IccfNotationActionSerialiser.move", "link" : "ostinato\/chess\/core\/IccfNotationActionSerialiser.html#move(a:ostinato.chess.core.MoveAction):scala.collection.immutable.Set[String]", "kind" : "def"}, {"member" : "ostinato.chess.core.IccfNotationActionSerialiser#<init>", "error" : "unsupported entity"}, {"label" : "r", "tail" : ": IccfNotationRules", "member" : "ostinato.chess.core.IccfNotationActionSerialiser.r", "link" : "ostinato\/chess\/core\/IccfNotationActionSerialiser.html#r:ostinato.chess.core.IccfNotationRules", "kind" : "val"}, {"label" : "genericPromotion", "tail" : "(toPiece: ChessPiece): Set[String]", "member" : "ostinato.chess.core.ActionSerialiser.genericPromotion", "link" : "ostinato\/chess\/core\/IccfNotationActionSerialiser.html#genericPromotion(toPiece:ostinato.chess.core.ChessPiece):scala.collection.immutable.Set[String]", "kind" : "def"}, {"label" : "serialiseAction", "tail" : "(a: ChessAction): Set[(String, (ChessAction, NotationRules))]", "member" : "ostinato.chess.core.ActionSerialiser.serialiseAction", "link" : "ostinato\/chess\/core\/IccfNotationActionSerialiser.html#serialiseAction(a:ostinato.chess.core.ChessAction):Set[(String,(ostinato.chess.core.ChessAction,ostinato.chess.core.NotationRules))]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/IccfNotationActionSerialiser.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/IccfNotationActionSerialiser.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/IccfNotationActionSerialiser.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/IccfNotationActionSerialiser.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/IccfNotationActionSerialiser.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/IccfNotationActionSerialiser.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/IccfNotationActionSerialiser.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/IccfNotationActionSerialiser.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/IccfNotationActionSerialiser.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/IccfNotationActionSerialiser.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/IccfNotationActionSerialiser.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/IccfNotationActionSerialiser.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/IccfNotationActionSerialiser.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/IccfNotationActionSerialiser.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/IccfNotationActionSerialiser.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/IccfNotationActionSerialiser.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/IccfNotationActionSerialiser.html", "kind" : "case class"}, {"name" : "ostinato.chess.core.IccfNotationRules", "shortDescription" : "", "members_case class" : [{"label" : "fullName", "tail" : ": String", "member" : "ostinato.chess.core.IccfNotationRules.fullName", "link" : "ostinato\/chess\/core\/IccfNotationRules.html#fullName:String", "kind" : "val"}, {"label" : "shortName", "tail" : ": String", "member" : "ostinato.chess.core.IccfNotationRules.shortName", "link" : "ostinato\/chess\/core\/IccfNotationRules.html#shortName:String", "kind" : "val"}, {"member" : "ostinato.chess.core.IccfNotationRules#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/IccfNotationRules.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/IccfNotationRules.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/IccfNotationRules.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/IccfNotationRules.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/IccfNotationRules.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/IccfNotationRules.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/IccfNotationRules.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/IccfNotationRules.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/IccfNotationRules.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/IccfNotationRules.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/IccfNotationRules.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/IccfNotationRules.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/IccfNotationRules.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/IccfNotationRules.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/IccfNotationRules.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/IccfNotationRules.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/IccfNotationRules.html", "kind" : "case class"}, {"name" : "ostinato.chess.core.IccfPos", "shortDescription" : "", "object" : "ostinato\/chess\/core\/package$$IccfPos$.html", "members_object" : [{"label" : "fromString", "tail" : "(s: String): Try[IccfPos]", "member" : "ostinato.chess.core.IccfPos.fromString", "link" : "ostinato\/chess\/core\/package$$IccfPos$.html#fromString(s:String):scala.util.Try[ostinato.chess.core.package.IccfPos]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/package$$IccfPos$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/package$$IccfPos$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/package$$IccfPos$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/package$$IccfPos$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/package$$IccfPos$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/package$$IccfPos$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/package$$IccfPos$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/package$$IccfPos$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/package$$IccfPos$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/package$$IccfPos$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/package$$IccfPos$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/package$$IccfPos$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "ostinato\/chess\/core\/package$$IccfPos$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/package$$IccfPos$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/core\/package$$IccfPos$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/chess\/core\/package$$IccfPos$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/package$$IccfPos$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/package$$IccfPos$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/package$$IccfPos$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "toXY", "tail" : ": XY", "member" : "ostinato.chess.core.IccfPos.toXY", "link" : "ostinato\/chess\/core\/package$$IccfPos.html#toXY:ostinato.core.XY", "kind" : "lazy val"}, {"label" : "toString", "tail" : "(): String", "member" : "ostinato.chess.core.IccfPos.toString", "link" : "ostinato\/chess\/core\/package$$IccfPos.html#toString():String", "kind" : "def"}, {"member" : "ostinato.chess.core.IccfPos#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": Int", "member" : "ostinato.chess.core.IccfPos.y", "link" : "ostinato\/chess\/core\/package$$IccfPos.html#y:Int", "kind" : "val"}, {"label" : "x", "tail" : ": Int", "member" : "ostinato.chess.core.IccfPos.x", "link" : "ostinato\/chess\/core\/package$$IccfPos.html#x:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/package$$IccfPos.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/package$$IccfPos.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/package$$IccfPos.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/package$$IccfPos.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/package$$IccfPos.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/package$$IccfPos.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/package$$IccfPos.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/package$$IccfPos.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/package$$IccfPos.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/package$$IccfPos.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/package$$IccfPos.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/package$$IccfPos.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/package$$IccfPos.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/package$$IccfPos.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/package$$IccfPos.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/package$$IccfPos.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/package$$IccfPos.html", "kind" : "object"}, {"name" : "ostinato.chess.core.InvalidChessGridSizeException", "shortDescription" : "", "object" : "ostinato\/chess\/core\/InvalidChessGridSizeException$.html", "members_object" : [{"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "scala.util.control.NoStackTrace.fillInStackTrace", "link" : "ostinato\/chess\/core\/InvalidChessGridSizeException$.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "ostinato\/chess\/core\/InvalidChessGridSizeException$.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "ostinato\/chess\/core\/InvalidChessGridSizeException$.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "ostinato\/chess\/core\/InvalidChessGridSizeException$.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "ostinato\/chess\/core\/InvalidChessGridSizeException$.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "ostinato\/chess\/core\/InvalidChessGridSizeException$.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "ostinato\/chess\/core\/InvalidChessGridSizeException$.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "ostinato\/chess\/core\/InvalidChessGridSizeException$.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "ostinato\/chess\/core\/InvalidChessGridSizeException$.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "ostinato\/chess\/core\/InvalidChessGridSizeException$.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "ostinato\/chess\/core\/InvalidChessGridSizeException$.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "ostinato\/chess\/core\/InvalidChessGridSizeException$.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "ostinato\/chess\/core\/InvalidChessGridSizeException$.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/InvalidChessGridSizeException$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/InvalidChessGridSizeException$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/InvalidChessGridSizeException$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/InvalidChessGridSizeException$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/InvalidChessGridSizeException$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/InvalidChessGridSizeException$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/InvalidChessGridSizeException$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/InvalidChessGridSizeException$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/InvalidChessGridSizeException$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/InvalidChessGridSizeException$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/InvalidChessGridSizeException$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/InvalidChessGridSizeException$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/InvalidChessGridSizeException$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/core\/InvalidChessGridSizeException$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/InvalidChessGridSizeException$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/InvalidChessGridSizeException$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/InvalidChessGridSizeException$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "ostinato.chess.core.InvalidFullMoveNumberException", "shortDescription" : "", "object" : "ostinato\/chess\/core\/InvalidFullMoveNumberException$.html", "members_object" : [{"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "scala.util.control.NoStackTrace.fillInStackTrace", "link" : "ostinato\/chess\/core\/InvalidFullMoveNumberException$.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "ostinato\/chess\/core\/InvalidFullMoveNumberException$.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "ostinato\/chess\/core\/InvalidFullMoveNumberException$.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "ostinato\/chess\/core\/InvalidFullMoveNumberException$.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "ostinato\/chess\/core\/InvalidFullMoveNumberException$.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "ostinato\/chess\/core\/InvalidFullMoveNumberException$.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "ostinato\/chess\/core\/InvalidFullMoveNumberException$.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "ostinato\/chess\/core\/InvalidFullMoveNumberException$.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "ostinato\/chess\/core\/InvalidFullMoveNumberException$.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "ostinato\/chess\/core\/InvalidFullMoveNumberException$.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "ostinato\/chess\/core\/InvalidFullMoveNumberException$.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "ostinato\/chess\/core\/InvalidFullMoveNumberException$.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "ostinato\/chess\/core\/InvalidFullMoveNumberException$.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/InvalidFullMoveNumberException$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/InvalidFullMoveNumberException$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/InvalidFullMoveNumberException$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/InvalidFullMoveNumberException$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/InvalidFullMoveNumberException$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/InvalidFullMoveNumberException$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/InvalidFullMoveNumberException$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/InvalidFullMoveNumberException$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/InvalidFullMoveNumberException$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/InvalidFullMoveNumberException$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/InvalidFullMoveNumberException$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/InvalidFullMoveNumberException$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/InvalidFullMoveNumberException$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/core\/InvalidFullMoveNumberException$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/InvalidFullMoveNumberException$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/InvalidFullMoveNumberException$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/InvalidFullMoveNumberException$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "ostinato.chess.core.InvalidHalfMoveCountException", "shortDescription" : "", "object" : "ostinato\/chess\/core\/InvalidHalfMoveCountException$.html", "members_object" : [{"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "scala.util.control.NoStackTrace.fillInStackTrace", "link" : "ostinato\/chess\/core\/InvalidHalfMoveCountException$.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "ostinato\/chess\/core\/InvalidHalfMoveCountException$.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "ostinato\/chess\/core\/InvalidHalfMoveCountException$.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "ostinato\/chess\/core\/InvalidHalfMoveCountException$.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "ostinato\/chess\/core\/InvalidHalfMoveCountException$.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "ostinato\/chess\/core\/InvalidHalfMoveCountException$.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "ostinato\/chess\/core\/InvalidHalfMoveCountException$.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "ostinato\/chess\/core\/InvalidHalfMoveCountException$.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "ostinato\/chess\/core\/InvalidHalfMoveCountException$.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "ostinato\/chess\/core\/InvalidHalfMoveCountException$.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "ostinato\/chess\/core\/InvalidHalfMoveCountException$.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "ostinato\/chess\/core\/InvalidHalfMoveCountException$.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "ostinato\/chess\/core\/InvalidHalfMoveCountException$.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/InvalidHalfMoveCountException$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/InvalidHalfMoveCountException$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/InvalidHalfMoveCountException$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/InvalidHalfMoveCountException$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/InvalidHalfMoveCountException$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/InvalidHalfMoveCountException$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/InvalidHalfMoveCountException$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/InvalidHalfMoveCountException$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/InvalidHalfMoveCountException$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/InvalidHalfMoveCountException$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/InvalidHalfMoveCountException$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/InvalidHalfMoveCountException$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/InvalidHalfMoveCountException$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/core\/InvalidHalfMoveCountException$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/InvalidHalfMoveCountException$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/InvalidHalfMoveCountException$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/InvalidHalfMoveCountException$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "ostinato.chess.core.InvalidIccfActionString", "shortDescription" : "", "members_case class" : [{"member" : "ostinato.chess.core.InvalidIccfActionString#<init>", "error" : "unsupported entity"}, {"label" : "e", "tail" : ": Throwable", "member" : "ostinato.chess.core.InvalidIccfActionString.e", "link" : "ostinato\/chess\/core\/InvalidIccfActionString.html#e:Throwable", "kind" : "val"}, {"label" : "s", "tail" : ": String", "member" : "ostinato.chess.core.InvalidIccfActionString.s", "link" : "ostinato\/chess\/core\/InvalidIccfActionString.html#s:String", "kind" : "val"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "scala.util.control.NoStackTrace.fillInStackTrace", "link" : "ostinato\/chess\/core\/InvalidIccfActionString.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "ostinato\/chess\/core\/InvalidIccfActionString.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "ostinato\/chess\/core\/InvalidIccfActionString.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "ostinato\/chess\/core\/InvalidIccfActionString.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "ostinato\/chess\/core\/InvalidIccfActionString.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "ostinato\/chess\/core\/InvalidIccfActionString.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "ostinato\/chess\/core\/InvalidIccfActionString.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "ostinato\/chess\/core\/InvalidIccfActionString.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "ostinato\/chess\/core\/InvalidIccfActionString.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "ostinato\/chess\/core\/InvalidIccfActionString.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "ostinato\/chess\/core\/InvalidIccfActionString.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "ostinato\/chess\/core\/InvalidIccfActionString.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "ostinato\/chess\/core\/InvalidIccfActionString.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/InvalidIccfActionString.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/InvalidIccfActionString.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/InvalidIccfActionString.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/InvalidIccfActionString.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/InvalidIccfActionString.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/InvalidIccfActionString.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/InvalidIccfActionString.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/InvalidIccfActionString.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/InvalidIccfActionString.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/InvalidIccfActionString.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/InvalidIccfActionString.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/InvalidIccfActionString.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/InvalidIccfActionString.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/InvalidIccfActionString.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/InvalidIccfActionString.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/InvalidIccfActionString.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/InvalidIccfActionString.html", "kind" : "case class"}, {"name" : "ostinato.chess.core.InvalidTurnException", "shortDescription" : "", "object" : "ostinato\/chess\/core\/InvalidTurnException$.html", "members_object" : [{"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "scala.util.control.NoStackTrace.fillInStackTrace", "link" : "ostinato\/chess\/core\/InvalidTurnException$.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "ostinato\/chess\/core\/InvalidTurnException$.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "ostinato\/chess\/core\/InvalidTurnException$.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "ostinato\/chess\/core\/InvalidTurnException$.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "ostinato\/chess\/core\/InvalidTurnException$.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "ostinato\/chess\/core\/InvalidTurnException$.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "ostinato\/chess\/core\/InvalidTurnException$.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "ostinato\/chess\/core\/InvalidTurnException$.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "ostinato\/chess\/core\/InvalidTurnException$.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "ostinato\/chess\/core\/InvalidTurnException$.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "ostinato\/chess\/core\/InvalidTurnException$.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "ostinato\/chess\/core\/InvalidTurnException$.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "ostinato\/chess\/core\/InvalidTurnException$.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/InvalidTurnException$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/InvalidTurnException$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/InvalidTurnException$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/InvalidTurnException$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/InvalidTurnException$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/InvalidTurnException$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/InvalidTurnException$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/InvalidTurnException$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/InvalidTurnException$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/InvalidTurnException$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/InvalidTurnException$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/InvalidTurnException$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/InvalidTurnException$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/core\/InvalidTurnException$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/InvalidTurnException$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/InvalidTurnException$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/InvalidTurnException$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "ostinato.chess.core.LoseAction", "shortDescription" : "", "members_case class" : [{"label" : "gridUpdates", "tail" : "(): List[Nothing]", "member" : "ostinato.chess.core.LoseAction.gridUpdates", "link" : "ostinato\/chess\/core\/LoseAction.html#gridUpdates:List[Nothing]", "kind" : "def"}, {"label" : "toAn", "tail" : ": String", "member" : "ostinato.chess.core.LoseAction.toAn", "link" : "ostinato\/chess\/core\/LoseAction.html#toAn:String", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "ostinato.chess.core.LoseAction.toString", "link" : "ostinato\/chess\/core\/LoseAction.html#toString():String", "kind" : "def"}, {"label" : "isLoss", "tail" : ": Boolean", "member" : "ostinato.chess.core.LoseAction.isLoss", "link" : "ostinato\/chess\/core\/LoseAction.html#isLoss:Boolean", "kind" : "val"}, {"member" : "ostinato.chess.core.LoseAction#<init>", "error" : "unsupported entity"}, {"label" : "player", "tail" : ": ChessPlayer", "member" : "ostinato.chess.core.LoseAction.player", "link" : "ostinato\/chess\/core\/LoseAction.html#player:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "isFinal", "tail" : ": Boolean", "member" : "ostinato.chess.core.FinalAction.isFinal", "link" : "ostinato\/chess\/core\/LoseAction.html#isFinal:Boolean", "kind" : "val"}, {"label" : "isDraw", "tail" : ": Boolean", "member" : "ostinato.chess.core.FinalAction.isDraw", "link" : "ostinato\/chess\/core\/LoseAction.html#isDraw:Boolean", "kind" : "val"}, {"label" : "enemy", "tail" : ": ChessPlayer", "member" : "ostinato.chess.core.ChessAction.enemy", "link" : "ostinato\/chess\/core\/LoseAction.html#enemy:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "turn", "tail" : ": ChessPlayer", "member" : "ostinato.chess.core.ChessAction.turn", "link" : "ostinato\/chess\/core\/LoseAction.html#turn:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "isCheckmate", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessAction.isCheckmate", "link" : "ostinato\/chess\/core\/LoseAction.html#isCheckmate:Boolean", "kind" : "val"}, {"label" : "isCheck", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessAction.isCheck", "link" : "ostinato\/chess\/core\/LoseAction.html#isCheck:Boolean", "kind" : "val"}, {"label" : "delta", "tail" : ": XY", "member" : "ostinato.chess.core.ChessAction.delta", "link" : "ostinato\/chess\/core\/LoseAction.html#delta:ostinato.core.XY", "kind" : "val"}, {"label" : "fromPiece", "tail" : ": ChessPiece", "member" : "ostinato.chess.core.ChessAction.fromPiece", "link" : "ostinato\/chess\/core\/LoseAction.html#fromPiece:ostinato.chess.core.ChessPiece", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/LoseAction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/LoseAction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/LoseAction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/LoseAction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/LoseAction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/LoseAction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/LoseAction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/LoseAction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/LoseAction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/LoseAction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/LoseAction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/LoseAction.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/LoseAction.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/LoseAction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/LoseAction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/LoseAction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/LoseAction.html", "kind" : "case class"}, {"name" : "ostinato.chess.core.MoreThanOneEnPassantPawnException", "shortDescription" : "", "object" : "ostinato\/chess\/core\/MoreThanOneEnPassantPawnException$.html", "members_object" : [{"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "scala.util.control.NoStackTrace.fillInStackTrace", "link" : "ostinato\/chess\/core\/MoreThanOneEnPassantPawnException$.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "ostinato\/chess\/core\/MoreThanOneEnPassantPawnException$.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "ostinato\/chess\/core\/MoreThanOneEnPassantPawnException$.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "ostinato\/chess\/core\/MoreThanOneEnPassantPawnException$.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "ostinato\/chess\/core\/MoreThanOneEnPassantPawnException$.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "ostinato\/chess\/core\/MoreThanOneEnPassantPawnException$.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "ostinato\/chess\/core\/MoreThanOneEnPassantPawnException$.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "ostinato\/chess\/core\/MoreThanOneEnPassantPawnException$.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "ostinato\/chess\/core\/MoreThanOneEnPassantPawnException$.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "ostinato\/chess\/core\/MoreThanOneEnPassantPawnException$.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "ostinato\/chess\/core\/MoreThanOneEnPassantPawnException$.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "ostinato\/chess\/core\/MoreThanOneEnPassantPawnException$.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "ostinato\/chess\/core\/MoreThanOneEnPassantPawnException$.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/MoreThanOneEnPassantPawnException$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/MoreThanOneEnPassantPawnException$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/MoreThanOneEnPassantPawnException$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/MoreThanOneEnPassantPawnException$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/MoreThanOneEnPassantPawnException$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/MoreThanOneEnPassantPawnException$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/MoreThanOneEnPassantPawnException$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/MoreThanOneEnPassantPawnException$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/MoreThanOneEnPassantPawnException$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/MoreThanOneEnPassantPawnException$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/MoreThanOneEnPassantPawnException$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/MoreThanOneEnPassantPawnException$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/MoreThanOneEnPassantPawnException$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/core\/MoreThanOneEnPassantPawnException$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/MoreThanOneEnPassantPawnException$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/MoreThanOneEnPassantPawnException$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/MoreThanOneEnPassantPawnException$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "ostinato.chess.core.MoveAction", "shortDescription" : "", "members_case class" : [{"label" : "toAn", "tail" : ": String", "member" : "ostinato.chess.core.MoveAction.toAn", "link" : "ostinato\/chess\/core\/MoveAction.html#toAn:String", "kind" : "val"}, {"label" : "withCheckmate", "tail" : "(): MoveAction", "member" : "ostinato.chess.core.MoveAction.withCheckmate", "link" : "ostinato\/chess\/core\/MoveAction.html#withCheckmate:ostinato.chess.core.MoveAction", "kind" : "def"}, {"label" : "withCheck", "tail" : "(): MoveAction", "member" : "ostinato.chess.core.MoveAction.withCheck", "link" : "ostinato\/chess\/core\/MoveAction.html#withCheck:ostinato.chess.core.MoveAction", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "ostinato.chess.core.MoveAction.toString", "link" : "ostinato\/chess\/core\/MoveAction.html#toString():String", "kind" : "def"}, {"member" : "ostinato.chess.core.MoveAction#<init>", "error" : "unsupported entity"}, {"label" : "isCheckmate", "tail" : ": Boolean", "member" : "ostinato.chess.core.MoveAction.isCheckmate", "link" : "ostinato\/chess\/core\/MoveAction.html#isCheckmate:Boolean", "kind" : "val"}, {"label" : "isCheck", "tail" : ": Boolean", "member" : "ostinato.chess.core.MoveAction.isCheck", "link" : "ostinato\/chess\/core\/MoveAction.html#isCheck:Boolean", "kind" : "val"}, {"label" : "delta", "tail" : ": XY", "member" : "ostinato.chess.core.MoveAction.delta", "link" : "ostinato\/chess\/core\/MoveAction.html#delta:ostinato.core.XY", "kind" : "val"}, {"label" : "fromPiece", "tail" : ": ChessPiece", "member" : "ostinato.chess.core.MoveAction.fromPiece", "link" : "ostinato\/chess\/core\/MoveAction.html#fromPiece:ostinato.chess.core.ChessPiece", "kind" : "val"}, {"label" : "gridUpdates", "tail" : "(): List[(Int, Option[ChessPiece])]", "member" : "ostinato.chess.core.ChessAction.gridUpdates", "link" : "ostinato\/chess\/core\/MoveAction.html#gridUpdates:List[(Int,Option[ostinato.chess.core.ChessPiece])]", "kind" : "def"}, {"label" : "enemy", "tail" : ": ChessPlayer", "member" : "ostinato.chess.core.ChessAction.enemy", "link" : "ostinato\/chess\/core\/MoveAction.html#enemy:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "turn", "tail" : ": ChessPlayer", "member" : "ostinato.chess.core.ChessAction.turn", "link" : "ostinato\/chess\/core\/MoveAction.html#turn:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "isFinal", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessAction.isFinal", "link" : "ostinato\/chess\/core\/MoveAction.html#isFinal:Boolean", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/MoveAction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/MoveAction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/MoveAction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/MoveAction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/MoveAction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/MoveAction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/MoveAction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/MoveAction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/MoveAction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/MoveAction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/MoveAction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/MoveAction.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/MoveAction.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/MoveAction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/MoveAction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/MoveAction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/MoveAction.html", "kind" : "case class"}, {"name" : "ostinato.chess.core.MoveActionFactory", "shortDescription" : "", "members_case class" : [{"label" : "complete", "tail" : "(isCheck: Boolean, isCheckmate: Boolean): MoveAction", "member" : "ostinato.chess.core.MoveActionFactory.complete", "link" : "ostinato\/chess\/core\/MoveActionFactory.html#complete(isCheck:Boolean,isCheckmate:Boolean):ostinato.chess.core.MoveAction", "kind" : "def"}, {"member" : "ostinato.chess.core.MoveActionFactory#<init>", "error" : "unsupported entity"}, {"label" : "delta", "tail" : ": XY", "member" : "ostinato.chess.core.MoveActionFactory.delta", "link" : "ostinato\/chess\/core\/MoveActionFactory.html#delta:ostinato.core.XY", "kind" : "val"}, {"label" : "fromPiece", "tail" : ": ChessPiece", "member" : "ostinato.chess.core.MoveActionFactory.fromPiece", "link" : "ostinato\/chess\/core\/MoveActionFactory.html#fromPiece:ostinato.chess.core.ChessPiece", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/MoveActionFactory.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/MoveActionFactory.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/MoveActionFactory.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/MoveActionFactory.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/MoveActionFactory.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/MoveActionFactory.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/MoveActionFactory.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/MoveActionFactory.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/MoveActionFactory.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/MoveActionFactory.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/MoveActionFactory.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/MoveActionFactory.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/MoveActionFactory.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/MoveActionFactory.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/MoveActionFactory.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/MoveActionFactory.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/MoveActionFactory.html", "kind" : "case class"}, {"name" : "ostinato.chess.core.Notation", "shortDescription" : "", "members_class" : [{"member" : "ostinato.chess.core.Notation#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/Notation.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/Notation.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/Notation.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/Notation.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/Notation.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/Notation.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/Notation.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/Notation.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/Notation.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/Notation.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/Notation.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/Notation.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "ostinato\/chess\/core\/Notation.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/Notation.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/core\/Notation.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/chess\/core\/Notation.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/Notation.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/Notation.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/Notation.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "allPossibleRules", "tail" : "(): Set[NR]", "member" : "ostinato.chess.core.Notation.allPossibleRules", "link" : "ostinato\/chess\/core\/Notation.html#allPossibleRules:Set[NR]", "kind" : "abstract def"}], "class" : "ostinato\/chess\/core\/Notation.html", "kind" : "class"}, {"name" : "ostinato.chess.core.NotationParser", "shortDescription" : "", "object" : "ostinato\/chess\/core\/NotationParser$.html", "members_object" : [{"label" : "ParseResultsProxy", "tail" : "", "member" : "ostinato.chess.core.NotationParser.ParseResultsProxy", "link" : "ostinato\/chess\/core\/NotationParser$.html#ParseResultsProxyextendsProductwithSerializable", "kind" : "case class"}, {"label" : "parseMatchString", "tail" : "(s: String, board: ChessBoard, actionSerialisers: List[ActionSerialiser], partialResults: Set[ParsedMatch]): ParseResultsProxy", "member" : "ostinato.chess.core.NotationParser.parseMatchString", "link" : "ostinato\/chess\/core\/NotationParser$.html#parseMatchString(s:String,board:ostinato.chess.core.ChessBoard,actionSerialisers:List[ostinato.chess.core.ActionSerialiser],partialResults:Set[ostinato.chess.core.NotationParser.ParsedMatch]):ostinato.chess.core.NotationParser.ParseResultsProxy", "kind" : "def"}, {"label" : "ParsedMatch", "tail" : "", "member" : "ostinato.chess.core.NotationParser.ParsedMatch", "link" : "ostinato\/chess\/core\/NotationParser$.html#ParsedMatchextendsProductwithSerializable", "kind" : "case class"}, {"label" : "SuccessfulParse", "tail" : "", "member" : "ostinato.chess.core.NotationParser.SuccessfulParse", "link" : "ostinato\/chess\/core\/NotationParser$.html#SuccessfulParseextendsNotationParser.ParsingResultwithProductwithSerializable", "kind" : "case class"}, {"label" : "FailedParse", "tail" : "", "member" : "ostinato.chess.core.NotationParser.FailedParse", "link" : "ostinato\/chess\/core\/NotationParser$.html#FailedParseextendsNotationParser.ParsingResultwithProductwithSerializable", "kind" : "case class"}, {"label" : "ParsingResult", "tail" : "", "member" : "ostinato.chess.core.NotationParser.ParsingResult", "link" : "ostinato\/chess\/core\/NotationParser$.html#ParsingResultextendsAnyRef", "kind" : "abstract class"}, {"label" : "GameStep", "tail" : "", "member" : "ostinato.chess.core.NotationParser.GameStep", "link" : "ostinato\/chess\/core\/NotationParser$.html#GameStepextendsProductwithSerializable", "kind" : "case class"}, {"label" : "ParseStep", "tail" : "", "member" : "ostinato.chess.core.NotationParser.ParseStep", "link" : "ostinato\/chess\/core\/NotationParser$.html#ParseStepextendsProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/NotationParser$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/NotationParser$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/NotationParser$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/NotationParser$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/NotationParser$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/NotationParser$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/NotationParser$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/NotationParser$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/NotationParser$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/NotationParser$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/NotationParser$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/NotationParser$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "ostinato\/chess\/core\/NotationParser$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/NotationParser$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/core\/NotationParser$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/chess\/core\/NotationParser$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/NotationParser$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/NotationParser$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/NotationParser$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "ostinato.chess.core.NotationRules", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/NotationRules.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/NotationRules.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/NotationRules.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/NotationRules.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/NotationRules.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/NotationRules.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/NotationRules.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/NotationRules.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/NotationRules.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/NotationRules.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/NotationRules.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/NotationRules.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "ostinato\/chess\/core\/NotationRules.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/NotationRules.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/core\/NotationRules.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/chess\/core\/NotationRules.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/NotationRules.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/NotationRules.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/NotationRules.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "fullName", "tail" : ": String", "member" : "ostinato.chess.core.NotationRules.fullName", "link" : "ostinato\/chess\/core\/NotationRules.html#fullName:String", "kind" : "abstract val"}, {"label" : "shortName", "tail" : ": String", "member" : "ostinato.chess.core.NotationRules.shortName", "link" : "ostinato\/chess\/core\/NotationRules.html#shortName:String", "kind" : "abstract val"}], "shortDescription" : "", "trait" : "ostinato\/chess\/core\/NotationRules.html", "kind" : "trait"}, {"name" : "ostinato.chess.core.OstinatoString", "shortDescription" : "", "object" : "ostinato\/chess\/core\/package$$OstinatoString$.html", "members_object" : [{"label" : "calculateHistory", "tail" : "(iccfString: String): Try[List[GameStep]]", "member" : "ostinato.chess.core.OstinatoString.calculateHistory", "link" : "ostinato\/chess\/core\/package$$OstinatoString$.html#calculateHistory(iccfString:String):scala.util.Try[List[ostinato.chess.core.package.GameStep]]", "kind" : "def"}, {"label" : "splitFenIccf", "tail" : "(s: String): Option[(String, String)]", "member" : "ostinato.chess.core.OstinatoString.splitFenIccf", "link" : "ostinato\/chess\/core\/package$$OstinatoString$.html#splitFenIccf(s:String):Option[(String,String)]", "kind" : "def"}, {"label" : "pattern", "tail" : ": String", "member" : "ostinato.chess.core.OstinatoString.pattern", "link" : "ostinato\/chess\/core\/package$$OstinatoString$.html#pattern:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/package$$OstinatoString$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/package$$OstinatoString$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/package$$OstinatoString$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/package$$OstinatoString$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/package$$OstinatoString$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/package$$OstinatoString$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/package$$OstinatoString$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/package$$OstinatoString$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/package$$OstinatoString$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/package$$OstinatoString$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/package$$OstinatoString$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/package$$OstinatoString$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "ostinato\/chess\/core\/package$$OstinatoString$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/package$$OstinatoString$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/core\/package$$OstinatoString$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/chess\/core\/package$$OstinatoString$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/package$$OstinatoString$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/package$$OstinatoString$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/package$$OstinatoString$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "ostinato.chess.core.OstinatoStringRegexMismatchException", "shortDescription" : "", "object" : "ostinato\/chess\/core\/OstinatoStringRegexMismatchException$.html", "members_object" : [{"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "scala.util.control.NoStackTrace.fillInStackTrace", "link" : "ostinato\/chess\/core\/OstinatoStringRegexMismatchException$.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "ostinato\/chess\/core\/OstinatoStringRegexMismatchException$.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "ostinato\/chess\/core\/OstinatoStringRegexMismatchException$.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "ostinato\/chess\/core\/OstinatoStringRegexMismatchException$.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "ostinato\/chess\/core\/OstinatoStringRegexMismatchException$.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "ostinato\/chess\/core\/OstinatoStringRegexMismatchException$.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "ostinato\/chess\/core\/OstinatoStringRegexMismatchException$.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "ostinato\/chess\/core\/OstinatoStringRegexMismatchException$.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "ostinato\/chess\/core\/OstinatoStringRegexMismatchException$.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "ostinato\/chess\/core\/OstinatoStringRegexMismatchException$.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "ostinato\/chess\/core\/OstinatoStringRegexMismatchException$.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "ostinato\/chess\/core\/OstinatoStringRegexMismatchException$.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "ostinato\/chess\/core\/OstinatoStringRegexMismatchException$.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/OstinatoStringRegexMismatchException$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/OstinatoStringRegexMismatchException$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/OstinatoStringRegexMismatchException$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/OstinatoStringRegexMismatchException$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/OstinatoStringRegexMismatchException$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/OstinatoStringRegexMismatchException$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/OstinatoStringRegexMismatchException$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/OstinatoStringRegexMismatchException$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/OstinatoStringRegexMismatchException$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/OstinatoStringRegexMismatchException$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/OstinatoStringRegexMismatchException$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/OstinatoStringRegexMismatchException$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/OstinatoStringRegexMismatchException$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/core\/OstinatoStringRegexMismatchException$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/OstinatoStringRegexMismatchException$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/OstinatoStringRegexMismatchException$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/OstinatoStringRegexMismatchException$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "ostinato.chess.core.PromoteAction", "shortDescription" : "", "members_case class" : [{"label" : "gridUpdates", "tail" : "(): List[(Int, Option[ChessPiece])]", "member" : "ostinato.chess.core.PromoteAction.gridUpdates", "link" : "ostinato\/chess\/core\/PromoteAction.html#gridUpdates:List[(Int,Option[ostinato.chess.core.ChessPiece])]", "kind" : "def"}, {"label" : "toAn", "tail" : ": String", "member" : "ostinato.chess.core.PromoteAction.toAn", "link" : "ostinato\/chess\/core\/PromoteAction.html#toAn:String", "kind" : "val"}, {"label" : "withCheckmate", "tail" : "(): PromoteAction", "member" : "ostinato.chess.core.PromoteAction.withCheckmate", "link" : "ostinato\/chess\/core\/PromoteAction.html#withCheckmate:ostinato.chess.core.PromoteAction", "kind" : "def"}, {"label" : "withCheck", "tail" : "(): PromoteAction", "member" : "ostinato.chess.core.PromoteAction.withCheck", "link" : "ostinato\/chess\/core\/PromoteAction.html#withCheck:ostinato.chess.core.PromoteAction", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "ostinato.chess.core.PromoteAction.toString", "link" : "ostinato\/chess\/core\/PromoteAction.html#toString():String", "kind" : "def"}, {"member" : "ostinato.chess.core.PromoteAction#<init>", "error" : "unsupported entity"}, {"label" : "isCheckmate", "tail" : ": Boolean", "member" : "ostinato.chess.core.PromoteAction.isCheckmate", "link" : "ostinato\/chess\/core\/PromoteAction.html#isCheckmate:Boolean", "kind" : "val"}, {"label" : "isCheck", "tail" : ": Boolean", "member" : "ostinato.chess.core.PromoteAction.isCheck", "link" : "ostinato\/chess\/core\/PromoteAction.html#isCheck:Boolean", "kind" : "val"}, {"label" : "promotePiece", "tail" : ": ChessPiece", "member" : "ostinato.chess.core.PromoteAction.promotePiece", "link" : "ostinato\/chess\/core\/PromoteAction.html#promotePiece:ostinato.chess.core.ChessPiece", "kind" : "val"}, {"label" : "delta", "tail" : ": XY", "member" : "ostinato.chess.core.PromoteAction.delta", "link" : "ostinato\/chess\/core\/PromoteAction.html#delta:ostinato.core.XY", "kind" : "val"}, {"label" : "fromPiece", "tail" : ": ♟", "member" : "ostinato.chess.core.PromoteAction.fromPiece", "link" : "ostinato\/chess\/core\/PromoteAction.html#fromPiece:ostinato.chess.core.♟", "kind" : "val"}, {"label" : "promotedPieceIccfCode", "tail" : "(): String", "member" : "ostinato.chess.core.ActionWithPromotion.promotedPieceIccfCode", "link" : "ostinato\/chess\/core\/PromoteAction.html#promotedPieceIccfCode:String", "kind" : "def"}, {"label" : "enemy", "tail" : ": ChessPlayer", "member" : "ostinato.chess.core.ChessAction.enemy", "link" : "ostinato\/chess\/core\/PromoteAction.html#enemy:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "turn", "tail" : ": ChessPlayer", "member" : "ostinato.chess.core.ChessAction.turn", "link" : "ostinato\/chess\/core\/PromoteAction.html#turn:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "isFinal", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessAction.isFinal", "link" : "ostinato\/chess\/core\/PromoteAction.html#isFinal:Boolean", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/PromoteAction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/PromoteAction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/PromoteAction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/PromoteAction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/PromoteAction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/PromoteAction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/PromoteAction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/PromoteAction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/PromoteAction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/PromoteAction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/PromoteAction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/PromoteAction.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/PromoteAction.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/PromoteAction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/PromoteAction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/PromoteAction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/PromoteAction.html", "kind" : "case class"}, {"name" : "ostinato.chess.core.PromoteActionFactory", "shortDescription" : "", "members_case class" : [{"label" : "complete", "tail" : "(isCheck: Boolean, isCheckmate: Boolean): PromoteAction", "member" : "ostinato.chess.core.PromoteActionFactory.complete", "link" : "ostinato\/chess\/core\/PromoteActionFactory.html#complete(isCheck:Boolean,isCheckmate:Boolean):ostinato.chess.core.PromoteAction", "kind" : "def"}, {"member" : "ostinato.chess.core.PromoteActionFactory#<init>", "error" : "unsupported entity"}, {"label" : "toPiece", "tail" : ": ChessPiece", "member" : "ostinato.chess.core.PromoteActionFactory.toPiece", "link" : "ostinato\/chess\/core\/PromoteActionFactory.html#toPiece:ostinato.chess.core.ChessPiece", "kind" : "val"}, {"label" : "delta", "tail" : ": XY", "member" : "ostinato.chess.core.PromoteActionFactory.delta", "link" : "ostinato\/chess\/core\/PromoteActionFactory.html#delta:ostinato.core.XY", "kind" : "val"}, {"label" : "fromPiece", "tail" : ": ♟", "member" : "ostinato.chess.core.PromoteActionFactory.fromPiece", "link" : "ostinato\/chess\/core\/PromoteActionFactory.html#fromPiece:ostinato.chess.core.♟", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/PromoteActionFactory.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/PromoteActionFactory.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/PromoteActionFactory.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/PromoteActionFactory.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/PromoteActionFactory.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/PromoteActionFactory.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/PromoteActionFactory.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/PromoteActionFactory.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/PromoteActionFactory.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/PromoteActionFactory.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/PromoteActionFactory.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/PromoteActionFactory.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/PromoteActionFactory.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/PromoteActionFactory.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/PromoteActionFactory.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/PromoteActionFactory.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/PromoteActionFactory.html", "kind" : "case class"}, {"name" : "ostinato.chess.core.SmithNotation", "shortDescription" : "", "object" : "ostinato\/chess\/core\/SmithNotation$.html", "members_object" : [{"label" : "allPossibleRules", "tail" : "(): Set[SmithNotationRules]", "member" : "ostinato.chess.core.SmithNotation.allPossibleRules", "link" : "ostinato\/chess\/core\/SmithNotation$.html#allPossibleRules:Set[ostinato.chess.core.SmithNotationRules]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/SmithNotation$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/SmithNotation$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/SmithNotation$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/SmithNotation$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/SmithNotation$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/SmithNotation$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/SmithNotation$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/SmithNotation$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/SmithNotation$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/SmithNotation$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/SmithNotation$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/SmithNotation$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "ostinato\/chess\/core\/SmithNotation$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/SmithNotation$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/core\/SmithNotation$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/chess\/core\/SmithNotation$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/SmithNotation$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/SmithNotation$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/SmithNotation$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "ostinato.chess.core.SmithNotationActionSerialiser", "shortDescription" : "", "members_case class" : [{"label" : "CartesianProductableStringSet", "tail" : "", "member" : "ostinato.chess.core.ActionSerialiser.CartesianProductableStringSet", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#CartesianProductableStringSetextendsAnyRef", "kind" : "implicit class"}, {"label" : "CartesianProductableString", "tail" : "", "member" : "ostinato.chess.core.ActionSerialiser.CartesianProductableString", "link" : "ostinato\/chess\/core\/ActionSerialiser.html#CartesianProductableStringextendsAnyRef", "kind" : "implicit class"}, {"label" : "capturePromote", "tail" : "(a: CapturePromoteAction): Set[String]", "member" : "ostinato.chess.core.SmithNotationActionSerialiser.capturePromote", "link" : "ostinato\/chess\/core\/SmithNotationActionSerialiser.html#capturePromote(a:ostinato.chess.core.CapturePromoteAction):scala.collection.immutable.Set[String]", "kind" : "def"}, {"label" : "draw", "tail" : "(a: DrawAction): Set[String]", "member" : "ostinato.chess.core.SmithNotationActionSerialiser.draw", "link" : "ostinato\/chess\/core\/SmithNotationActionSerialiser.html#draw(a:ostinato.chess.core.DrawAction):scala.collection.immutable.Set[String]", "kind" : "def"}, {"label" : "lose", "tail" : "(a: LoseAction): Set[String]", "member" : "ostinato.chess.core.SmithNotationActionSerialiser.lose", "link" : "ostinato\/chess\/core\/SmithNotationActionSerialiser.html#lose(a:ostinato.chess.core.LoseAction):scala.collection.immutable.Set[String]", "kind" : "def"}, {"label" : "promote", "tail" : "(a: PromoteAction): Set[String]", "member" : "ostinato.chess.core.SmithNotationActionSerialiser.promote", "link" : "ostinato\/chess\/core\/SmithNotationActionSerialiser.html#promote(a:ostinato.chess.core.PromoteAction):scala.collection.immutable.Set[String]", "kind" : "def"}, {"label" : "castling", "tail" : "(a: CastlingAction): Set[String]", "member" : "ostinato.chess.core.SmithNotationActionSerialiser.castling", "link" : "ostinato\/chess\/core\/SmithNotationActionSerialiser.html#castling(a:ostinato.chess.core.CastlingAction):scala.collection.immutable.Set[String]", "kind" : "def"}, {"label" : "enPassantCapture", "tail" : "(a: EnPassantCaptureAction): Set[String]", "member" : "ostinato.chess.core.SmithNotationActionSerialiser.enPassantCapture", "link" : "ostinato\/chess\/core\/SmithNotationActionSerialiser.html#enPassantCapture(a:ostinato.chess.core.EnPassantCaptureAction):scala.collection.immutable.Set[String]", "kind" : "def"}, {"label" : "capture", "tail" : "(a: CaptureAction): Set[String]", "member" : "ostinato.chess.core.SmithNotationActionSerialiser.capture", "link" : "ostinato\/chess\/core\/SmithNotationActionSerialiser.html#capture(a:ostinato.chess.core.CaptureAction):scala.collection.immutable.Set[String]", "kind" : "def"}, {"label" : "enPassant", "tail" : "(a: EnPassantAction): Set[String]", "member" : "ostinato.chess.core.SmithNotationActionSerialiser.enPassant", "link" : "ostinato\/chess\/core\/SmithNotationActionSerialiser.html#enPassant(a:ostinato.chess.core.EnPassantAction):scala.collection.immutable.Set[String]", "kind" : "def"}, {"label" : "move", "tail" : "(a: MoveAction): Set[String]", "member" : "ostinato.chess.core.SmithNotationActionSerialiser.move", "link" : "ostinato\/chess\/core\/SmithNotationActionSerialiser.html#move(a:ostinato.chess.core.MoveAction):scala.collection.immutable.Set[String]", "kind" : "def"}, {"member" : "ostinato.chess.core.SmithNotationActionSerialiser#<init>", "error" : "unsupported entity"}, {"label" : "r", "tail" : ": SmithNotationRules", "member" : "ostinato.chess.core.SmithNotationActionSerialiser.r", "link" : "ostinato\/chess\/core\/SmithNotationActionSerialiser.html#r:ostinato.chess.core.SmithNotationRules", "kind" : "val"}, {"label" : "genericPromotion", "tail" : "(toPiece: ChessPiece): Set[String]", "member" : "ostinato.chess.core.ActionSerialiser.genericPromotion", "link" : "ostinato\/chess\/core\/SmithNotationActionSerialiser.html#genericPromotion(toPiece:ostinato.chess.core.ChessPiece):scala.collection.immutable.Set[String]", "kind" : "def"}, {"label" : "serialiseAction", "tail" : "(a: ChessAction): Set[(String, (ChessAction, NotationRules))]", "member" : "ostinato.chess.core.ActionSerialiser.serialiseAction", "link" : "ostinato\/chess\/core\/SmithNotationActionSerialiser.html#serialiseAction(a:ostinato.chess.core.ChessAction):Set[(String,(ostinato.chess.core.ChessAction,ostinato.chess.core.NotationRules))]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/SmithNotationActionSerialiser.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/SmithNotationActionSerialiser.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/SmithNotationActionSerialiser.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/SmithNotationActionSerialiser.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/SmithNotationActionSerialiser.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/SmithNotationActionSerialiser.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/SmithNotationActionSerialiser.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/SmithNotationActionSerialiser.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/SmithNotationActionSerialiser.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/SmithNotationActionSerialiser.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/SmithNotationActionSerialiser.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/SmithNotationActionSerialiser.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/SmithNotationActionSerialiser.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/SmithNotationActionSerialiser.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/SmithNotationActionSerialiser.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/SmithNotationActionSerialiser.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/SmithNotationActionSerialiser.html", "kind" : "case class"}, {"name" : "ostinato.chess.core.SmithNotationRules", "shortDescription" : "", "members_case class" : [{"label" : "fullName", "tail" : ": String", "member" : "ostinato.chess.core.SmithNotationRules.fullName", "link" : "ostinato\/chess\/core\/SmithNotationRules.html#fullName:String", "kind" : "val"}, {"label" : "shortName", "tail" : ": String", "member" : "ostinato.chess.core.SmithNotationRules.shortName", "link" : "ostinato\/chess\/core\/SmithNotationRules.html#shortName:String", "kind" : "val"}, {"member" : "ostinato.chess.core.SmithNotationRules#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/SmithNotationRules.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/SmithNotationRules.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/SmithNotationRules.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/SmithNotationRules.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/SmithNotationRules.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/SmithNotationRules.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/SmithNotationRules.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/SmithNotationRules.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/SmithNotationRules.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/SmithNotationRules.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/SmithNotationRules.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/SmithNotationRules.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/SmithNotationRules.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/SmithNotationRules.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/SmithNotationRules.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/SmithNotationRules.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/SmithNotationRules.html", "kind" : "case class"}, {"name" : "ostinato.chess.core.SquareColor", "shortDescription" : "", "object" : "ostinato\/chess\/core\/package$$SquareColor$.html", "members_object" : [{"label" : "Val", "tail" : "", "member" : "scala.Enumeration.Val", "link" : "ostinato\/chess\/core\/package$$SquareColor$.html#ValextendsEnumeration.this.ValuewithSerializable", "kind" : "class"}, {"label" : "ValueSet", "tail" : "", "member" : "scala.Enumeration.ValueSet", "link" : "ostinato\/chess\/core\/package$$SquareColor$.html#ValueSetextendsAbstractSet[Enumeration.this.Value]withSortedSet[Enumeration.this.Value]withSortedSetLike[Enumeration.this.Value,Enumeration.this.ValueSet]withSerializable", "kind" : "class"}, {"label" : "Value", "tail" : "", "member" : "scala.Enumeration.Value", "link" : "ostinato\/chess\/core\/package$$SquareColor$.html#ValueextendsOrdered[Enumeration.this.Value]withSerializable", "kind" : "abstract class"}, {"label" : "Dark", "tail" : ": Value", "member" : "ostinato.chess.core.SquareColor.Dark", "link" : "ostinato\/chess\/core\/package$$SquareColor$.html#Dark:ostinato.chess.core.SquareColor.Value", "kind" : "val"}, {"label" : "Light", "tail" : ": Value", "member" : "ostinato.chess.core.SquareColor.Light", "link" : "ostinato\/chess\/core\/package$$SquareColor$.html#Light:ostinato.chess.core.SquareColor.Value", "kind" : "val"}, {"label" : "SquareColor", "tail" : "", "member" : "ostinato.chess.core.SquareColor.SquareColor", "link" : "ostinato\/chess\/core\/package$$SquareColor$.html#SquareColor=ostinato.chess.core.SquareColor.Value", "kind" : "type"}, {"label" : "Value", "tail" : "(i: Int, name: String): Value", "member" : "scala.Enumeration.Value", "link" : "ostinato\/chess\/core\/package$$SquareColor$.html#Value(i:Int,name:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(name: String): Value", "member" : "scala.Enumeration.Value", "link" : "ostinato\/chess\/core\/package$$SquareColor$.html#Value(name:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(i: Int): Value", "member" : "scala.Enumeration.Value", "link" : "ostinato\/chess\/core\/package$$SquareColor$.html#Value(i:Int):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(): Value", "member" : "scala.Enumeration.Value", "link" : "ostinato\/chess\/core\/package$$SquareColor$.html#Value:Enumeration.this.Value", "kind" : "final def"}, {"label" : "withName", "tail" : "(s: String): Value", "member" : "scala.Enumeration.withName", "link" : "ostinato\/chess\/core\/package$$SquareColor$.html#withName(s:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "apply", "tail" : "(x: Int): Value", "member" : "scala.Enumeration.apply", "link" : "ostinato\/chess\/core\/package$$SquareColor$.html#apply(x:Int):Enumeration.this.Value", "kind" : "final def"}, {"label" : "maxId", "tail" : "(): Int", "member" : "scala.Enumeration.maxId", "link" : "ostinato\/chess\/core\/package$$SquareColor$.html#maxId:Int", "kind" : "final def"}, {"label" : "nextName", "tail" : ": Iterator[String]", "member" : "scala.Enumeration.nextName", "link" : "ostinato\/chess\/core\/package$$SquareColor$.html#nextName:Iterator[String]", "kind" : "var"}, {"label" : "nextId", "tail" : ": Int", "member" : "scala.Enumeration.nextId", "link" : "ostinato\/chess\/core\/package$$SquareColor$.html#nextId:Int", "kind" : "var"}, {"label" : "values", "tail" : "(): ValueSet", "member" : "scala.Enumeration.values", "link" : "ostinato\/chess\/core\/package$$SquareColor$.html#values:Enumeration.this.ValueSet", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Enumeration.toString", "link" : "ostinato\/chess\/core\/package$$SquareColor$.html#toString():String", "kind" : "def"}, {"label" : "readResolve", "tail" : "(): AnyRef", "member" : "scala.Enumeration.readResolve", "link" : "ostinato\/chess\/core\/package$$SquareColor$.html#readResolve():AnyRef", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/package$$SquareColor$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/package$$SquareColor$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/package$$SquareColor$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/package$$SquareColor$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/package$$SquareColor$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/package$$SquareColor$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/package$$SquareColor$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/package$$SquareColor$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/package$$SquareColor$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/package$$SquareColor$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/package$$SquareColor$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/package$$SquareColor$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/package$$SquareColor$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/core\/package$$SquareColor$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/chess\/core\/package$$SquareColor$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/package$$SquareColor$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/package$$SquareColor$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/package$$SquareColor$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "ostinato.chess.core.WhiteChessPlayer", "shortDescription" : "", "object" : "ostinato\/chess\/core\/WhiteChessPlayer$.html", "members_object" : [{"label" : "toFen", "tail" : "(): Char", "member" : "ostinato.chess.core.WhiteChessPlayer.toFen", "link" : "ostinato\/chess\/core\/WhiteChessPlayer$.html#toFen:Char", "kind" : "def"}, {"label" : "enemy", "tail" : "(): BlackChessPlayer.type", "member" : "ostinato.chess.core.WhiteChessPlayer.enemy", "link" : "ostinato\/chess\/core\/WhiteChessPlayer$.html#enemy:ostinato.chess.core.BlackChessPlayer.type", "kind" : "def"}, {"label" : "pawns", "tail" : "(board: ChessBoard): Set[♟]", "member" : "ostinato.chess.core.ChessPlayer.pawns", "link" : "ostinato\/chess\/core\/WhiteChessPlayer$.html#pawns(board:ostinato.chess.core.ChessBoard):Set[ostinato.chess.core.♟]", "kind" : "def"}, {"label" : "kings", "tail" : "(board: ChessBoard): Set[♚]", "member" : "ostinato.chess.core.ChessPlayer.kings", "link" : "ostinato\/chess\/core\/WhiteChessPlayer$.html#kings(board:ostinato.chess.core.ChessBoard):Set[ostinato.chess.core.♚]", "kind" : "def"}, {"label" : "queens", "tail" : "(board: ChessBoard): Set[♛]", "member" : "ostinato.chess.core.ChessPlayer.queens", "link" : "ostinato\/chess\/core\/WhiteChessPlayer$.html#queens(board:ostinato.chess.core.ChessBoard):Set[ostinato.chess.core.♛]", "kind" : "def"}, {"label" : "bishops", "tail" : "(board: ChessBoard): Set[♝]", "member" : "ostinato.chess.core.ChessPlayer.bishops", "link" : "ostinato\/chess\/core\/WhiteChessPlayer$.html#bishops(board:ostinato.chess.core.ChessBoard):Set[ostinato.chess.core.♝]", "kind" : "def"}, {"label" : "knights", "tail" : "(board: ChessBoard): Set[♞]", "member" : "ostinato.chess.core.ChessPlayer.knights", "link" : "ostinato\/chess\/core\/WhiteChessPlayer$.html#knights(board:ostinato.chess.core.ChessBoard):Set[ostinato.chess.core.♞]", "kind" : "def"}, {"label" : "rooks", "tail" : "(board: ChessBoard): Set[♜]", "member" : "ostinato.chess.core.ChessPlayer.rooks", "link" : "ostinato\/chess\/core\/WhiteChessPlayer$.html#rooks(board:ostinato.chess.core.ChessBoard):Set[ostinato.chess.core.♜]", "kind" : "def"}, {"label" : "nonFinalActions", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Set[ChessAction]", "member" : "ostinato.chess.core.ChessPlayer.nonFinalActions", "link" : "ostinato\/chess\/core\/WhiteChessPlayer$.html#nonFinalActions(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):scala.collection.immutable.Set[ostinato.chess.core.ChessAction]", "kind" : "def"}, {"label" : "actionStream", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Stream[ChessAction]", "member" : "ostinato.chess.core.ChessPlayer.actionStream", "link" : "ostinato\/chess\/core\/WhiteChessPlayer$.html#actionStream(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Stream[ostinato.chess.core.ChessAction]", "kind" : "def"}, {"label" : "actions", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Set[ChessAction]", "member" : "ostinato.chess.core.ChessPlayer.actions", "link" : "ostinato\/chess\/core\/WhiteChessPlayer$.html#actions(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Set[ostinato.chess.core.ChessAction]", "kind" : "def"}, {"label" : "initialY", "tail" : "(): Int", "member" : "ostinato.chess.core.ChessPlayer.initialY", "link" : "ostinato\/chess\/core\/WhiteChessPlayer$.html#initialY:Int", "kind" : "def"}, {"label" : "kingPiece", "tail" : "(board: ChessBoard): Option[ChessPiece]", "member" : "ostinato.chess.core.ChessPlayer.kingPiece", "link" : "ostinato\/chess\/core\/WhiteChessPlayer$.html#kingPiece(board:ostinato.chess.core.ChessBoard):Option[ostinato.chess.core.ChessPiece]", "kind" : "def"}, {"label" : "pieces", "tail" : "(board: ChessBoard): Set[ChessPiece]", "member" : "ostinato.core.Player.pieces", "link" : "ostinato\/chess\/core\/WhiteChessPlayer$.html#pieces(board:B):Set[PC]", "kind" : "def"}, {"label" : "equals", "tail" : "(that: ChessPlayer): Boolean", "member" : "ostinato.core.Player.equals", "link" : "ostinato\/chess\/core\/WhiteChessPlayer$.html#equals(that:PL):Boolean", "kind" : "def"}, {"label" : "name", "tail" : ": String", "member" : "ostinato.core.Player.name", "link" : "ostinato\/chess\/core\/WhiteChessPlayer$.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/WhiteChessPlayer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/WhiteChessPlayer$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/WhiteChessPlayer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/WhiteChessPlayer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/WhiteChessPlayer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/WhiteChessPlayer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/WhiteChessPlayer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/WhiteChessPlayer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/WhiteChessPlayer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/WhiteChessPlayer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/WhiteChessPlayer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/WhiteChessPlayer$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/WhiteChessPlayer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/core\/WhiteChessPlayer$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/WhiteChessPlayer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/WhiteChessPlayer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/WhiteChessPlayer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "ostinato.chess.core.♚", "shortDescription" : "", "object" : "ostinato\/chess\/core\/$u265A$.html", "members_object" : [{"label" : "kingDelta", "tail" : "(castlingSide: CastlingSide): XY", "member" : "ostinato.chess.core.♚.kingDelta", "link" : "ostinato\/chess\/core\/$u265A$.html#kingDelta(castlingSide:ostinato.chess.core.CastlingSide.CastlingSide):ostinato.core.XY", "kind" : "def"}, {"label" : "rookX", "tail" : "(castlingSide: CastlingSide): Int", "member" : "ostinato.chess.core.♚.rookX", "link" : "ostinato\/chess\/core\/$u265A$.html#rookX(castlingSide:ostinato.chess.core.CastlingSide.CastlingSide):Int", "kind" : "def"}, {"label" : "rookDelta", "tail" : "(castlingSide: CastlingSide): XY", "member" : "ostinato.chess.core.♚.rookDelta", "link" : "ostinato\/chess\/core\/$u265A$.html#rookDelta(castlingSide:ostinato.chess.core.CastlingSide.CastlingSide):ostinato.core.XY", "kind" : "def"}, {"label" : "rookDelta", "tail" : "(kingDelta: XY): XY", "member" : "ostinato.chess.core.♚.rookDelta", "link" : "ostinato\/chess\/core\/$u265A$.html#rookDelta(kingDelta:ostinato.core.XY):ostinato.core.XY", "kind" : "def"}, {"label" : "initialY", "tail" : "(owner: ChessPlayer): Int", "member" : "ostinato.chess.core.♚.initialY", "link" : "ostinato\/chess\/core\/$u265A$.html#initialY(owner:ostinato.chess.core.ChessPlayer):Int", "kind" : "def"}, {"label" : "initialX", "tail" : ": Int", "member" : "ostinato.chess.core.♚.initialX", "link" : "ostinato\/chess\/core\/$u265A$.html#initialX:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/$u265A$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/$u265A$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/$u265A$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/$u265A$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/$u265A$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/$u265A$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/$u265A$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/$u265A$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/$u265A$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/$u265A$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/$u265A$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/$u265A$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "ostinato\/chess\/core\/$u265A$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/$u265A$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/core\/$u265A$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/chess\/core\/$u265A$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/$u265A$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/$u265A$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/$u265A$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "toFigurine", "tail" : ": Char", "member" : "ostinato.chess.core.♚.toFigurine", "link" : "ostinato\/chess\/core\/$u265A.html#toFigurine:Char", "kind" : "val"}, {"label" : "cantMove", "tail" : "(to: XY, board: ChessBoard): Boolean", "member" : "ostinato.chess.core.♚.cantMove", "link" : "ostinato\/chess\/core\/$u265A.html#cantMove(to:ostinato.core.XY,board:ostinato.chess.core.ChessBoard):Boolean", "kind" : "def"}, {"label" : "movedTo", "tail" : "(newXY: XY): ♚", "member" : "ostinato.chess.core.♚.movedTo", "link" : "ostinato\/chess\/core\/$u265A.html#movedTo(newXY:ostinato.core.XY):ostinato.chess.core.♚", "kind" : "def"}, {"label" : "withOwner", "tail" : "(newOwner: ChessPlayer): ♚", "member" : "ostinato.chess.core.♚.withOwner", "link" : "ostinato\/chess\/core\/$u265A.html#withOwner(newOwner:ostinato.chess.core.ChessPlayer):ostinato.chess.core.♚", "kind" : "def"}, {"label" : "isKing", "tail" : ": Boolean", "member" : "ostinato.chess.core.♚.isKing", "link" : "ostinato\/chess\/core\/$u265A.html#isKing:Boolean", "kind" : "val"}, {"label" : "toFen", "tail" : ": Char", "member" : "ostinato.chess.core.♚.toFen", "link" : "ostinato\/chess\/core\/$u265A.html#toFen:Char", "kind" : "val"}, {"label" : "toIccf", "tail" : ": Nothing", "member" : "ostinato.chess.core.♚.toIccf", "link" : "ostinato\/chess\/core\/$u265A.html#toIccf:Nothing", "kind" : "lazy val"}, {"label" : "toDn", "tail" : ": Set[String]", "member" : "ostinato.chess.core.♚.toDn", "link" : "ostinato\/chess\/core\/$u265A.html#toDn:scala.collection.immutable.Set[String]", "kind" : "val"}, {"label" : "toAn", "tail" : ": String", "member" : "ostinato.chess.core.♚.toAn", "link" : "ostinato\/chess\/core\/$u265A.html#toAn:String", "kind" : "val"}, {"label" : "pieceName", "tail" : ": String", "member" : "ostinato.chess.core.♚.pieceName", "link" : "ostinato\/chess\/core\/$u265A.html#pieceName:String", "kind" : "val"}, {"label" : "isInInitialPosition", "tail" : ": Boolean", "member" : "ostinato.chess.core.♚.isInInitialPosition", "link" : "ostinato\/chess\/core\/$u265A.html#isInInitialPosition:Boolean", "kind" : "lazy val"}, {"label" : "rookDeltaFor", "tail" : "(kingDelta: XY): XY", "member" : "ostinato.chess.core.♚.rookDeltaFor", "link" : "ostinato\/chess\/core\/$u265A.html#rookDeltaFor(kingDelta:ostinato.core.XY):ostinato.core.XY", "kind" : "def"}, {"label" : "targetRookPosition", "tail" : "(dx: Int): XY", "member" : "ostinato.chess.core.♚.targetRookPosition", "link" : "ostinato\/chess\/core\/$u265A.html#targetRookPosition(dx:Int):ostinato.core.XY", "kind" : "def"}, {"label" : "initialX", "tail" : "(): Int", "member" : "ostinato.chess.core.♚.initialX", "link" : "ostinato\/chess\/core\/$u265A.html#initialX:Int", "kind" : "def"}, {"label" : "initialY", "tail" : "(): Int", "member" : "ostinato.chess.core.♚.initialY", "link" : "ostinato\/chess\/core\/$u265A.html#initialY:Int", "kind" : "def"}, {"label" : "deltaPatterns", "tail" : ": Set[XY]", "member" : "ostinato.chess.core.♚.deltaPatterns", "link" : "ostinato\/chess\/core\/$u265A.html#deltaPatterns:scala.collection.immutable.Set[ostinato.core.XY]", "kind" : "lazy val"}, {"label" : "hasRecursiveDeltas", "tail" : ": Boolean", "member" : "ostinato.chess.core.♚.hasRecursiveDeltas", "link" : "ostinato\/chess\/core\/$u265A.html#hasRecursiveDeltas:Boolean", "kind" : "val"}, {"member" : "ostinato.chess.core.♚#<init>", "error" : "unsupported entity"}, {"label" : "owner", "tail" : ": ChessPlayer", "member" : "ostinato.chess.core.♚.owner", "link" : "ostinato\/chess\/core\/$u265A.html#owner:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "pos", "tail" : ": XY", "member" : "ostinato.chess.core.♚.pos", "link" : "ostinato\/chess\/core\/$u265A.html#pos:ostinato.core.XY", "kind" : "val"}, {"label" : "actions", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Set[ChessAction]", "member" : "ostinato.chess.core.ChessPiece.actions", "link" : "ostinato\/chess\/core\/$u265A.html#actions(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Set[ostinato.chess.core.ChessAction]", "kind" : "def"}, {"label" : "canMoveTo", "tail" : "(to: XY, board: ChessBoard)(opts: ChessOptimisations): Boolean", "member" : "ostinato.chess.core.ChessPiece.canMoveTo", "link" : "ostinato\/chess\/core\/$u265A.html#canMoveTo(to:ostinato.core.XY,board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Boolean", "kind" : "def"}, {"label" : "defendedBy", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Option[ChessPiece]", "member" : "ostinato.chess.core.ChessPiece.defendedBy", "link" : "ostinato\/chess\/core\/$u265A.html#defendedBy(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Option[ostinato.chess.core.ChessPiece]", "kind" : "def"}, {"label" : "threatenedBy", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Option[ChessPiece]", "member" : "ostinato.chess.core.ChessPiece.threatenedBy", "link" : "ostinato\/chess\/core\/$u265A.html#threatenedBy(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Option[ostinato.chess.core.ChessPiece]", "kind" : "def"}, {"label" : "deltas", "tail" : "(board: ChessBoard): Set[XY]", "member" : "ostinato.chess.core.ChessPiece.deltas", "link" : "ostinato\/chess\/core\/$u265A.html#deltas(board:ostinato.chess.core.ChessBoard):Set[ostinato.core.XY]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "ostinato.chess.core.ChessPiece.toString", "link" : "ostinato\/chess\/core\/$u265A.html#toString():String", "kind" : "def"}, {"label" : "equals", "tail" : "(that: ChessPiece): Boolean", "member" : "ostinato.chess.core.ChessPiece.equals", "link" : "ostinato\/chess\/core\/$u265A.html#equals(that:ostinato.chess.core.ChessPiece):Boolean", "kind" : "def"}, {"label" : "enemy", "tail" : ": ChessPlayer", "member" : "ostinato.chess.core.ChessPiece.enemy", "link" : "ostinato\/chess\/core\/$u265A.html#enemy:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "isDefended", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Boolean", "member" : "ostinato.chess.core.ChessPiece.isDefended", "link" : "ostinato\/chess\/core\/$u265A.html#isDefended(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Boolean", "kind" : "def"}, {"label" : "isThreatened", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Boolean", "member" : "ostinato.chess.core.ChessPiece.isThreatened", "link" : "ostinato\/chess\/core\/$u265A.html#isThreatened(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Boolean", "kind" : "def"}, {"label" : "isPawn", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessPiece.isPawn", "link" : "ostinato\/chess\/core\/$u265A.html#isPawn:Boolean", "kind" : "val"}, {"label" : "isQueen", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessPiece.isQueen", "link" : "ostinato\/chess\/core\/$u265A.html#isQueen:Boolean", "kind" : "val"}, {"label" : "isBishop", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessPiece.isBishop", "link" : "ostinato\/chess\/core\/$u265A.html#isBishop:Boolean", "kind" : "val"}, {"label" : "isKnight", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessPiece.isKnight", "link" : "ostinato\/chess\/core\/$u265A.html#isKnight:Boolean", "kind" : "val"}, {"label" : "isRook", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessPiece.isRook", "link" : "ostinato\/chess\/core\/$u265A.html#isRook:Boolean", "kind" : "val"}, {"label" : "movementsOfDelta", "tail" : "(from: XY, delta: XY, board: ChessBoard)(rules: ChessOptimisations): Set[ChessAction]", "member" : "ostinato.core.Piece.movementsOfDelta", "link" : "ostinato\/chess\/core\/$u265A.html#movementsOfDelta(from:ostinato.core.XY,delta:ostinato.core.XY,board:B)(implicitrules:R):Set[A]", "kind" : "def"}, {"label" : "allMovementsOfDelta", "tail" : "(from: XY, delta: XY, board: ChessBoard)(rules: ChessOptimisations): Set[ChessAction]", "member" : "ostinato.core.Piece.allMovementsOfDelta", "link" : "ostinato\/chess\/core\/$u265A.html#allMovementsOfDelta(from:ostinato.core.XY,delta:ostinato.core.XY,board:B)(implicitrules:R):Set[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/$u265A.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/$u265A.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/$u265A.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/$u265A.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/$u265A.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/$u265A.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/$u265A.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/$u265A.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/$u265A.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/$u265A.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/$u265A.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/$u265A.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/$u265A.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/$u265A.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/$u265A.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/$u265A.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/$u265A.html", "kind" : "object"}, {"name" : "ostinato.chess.core.♛", "shortDescription" : "", "members_case class" : [{"label" : "toFigurine", "tail" : ": Char", "member" : "ostinato.chess.core.♛.toFigurine", "link" : "ostinato\/chess\/core\/$u265B.html#toFigurine:Char", "kind" : "val"}, {"label" : "cantMove", "tail" : "(to: XY, board: ChessBoard): Boolean", "member" : "ostinato.chess.core.♛.cantMove", "link" : "ostinato\/chess\/core\/$u265B.html#cantMove(to:ostinato.core.XY,board:ostinato.chess.core.ChessBoard):Boolean", "kind" : "def"}, {"label" : "movedTo", "tail" : "(newXY: XY): ♛", "member" : "ostinato.chess.core.♛.movedTo", "link" : "ostinato\/chess\/core\/$u265B.html#movedTo(newXY:ostinato.core.XY):ostinato.chess.core.♛", "kind" : "def"}, {"label" : "withOwner", "tail" : "(newOwner: ChessPlayer): ♛", "member" : "ostinato.chess.core.♛.withOwner", "link" : "ostinato\/chess\/core\/$u265B.html#withOwner(newOwner:ostinato.chess.core.ChessPlayer):ostinato.chess.core.♛", "kind" : "def"}, {"label" : "isQueen", "tail" : ": Boolean", "member" : "ostinato.chess.core.♛.isQueen", "link" : "ostinato\/chess\/core\/$u265B.html#isQueen:Boolean", "kind" : "val"}, {"label" : "toFen", "tail" : ": Char", "member" : "ostinato.chess.core.♛.toFen", "link" : "ostinato\/chess\/core\/$u265B.html#toFen:Char", "kind" : "val"}, {"label" : "toIccf", "tail" : ": Int", "member" : "ostinato.chess.core.♛.toIccf", "link" : "ostinato\/chess\/core\/$u265B.html#toIccf:Int", "kind" : "lazy val"}, {"label" : "toDn", "tail" : ": Set[String]", "member" : "ostinato.chess.core.♛.toDn", "link" : "ostinato\/chess\/core\/$u265B.html#toDn:scala.collection.immutable.Set[String]", "kind" : "val"}, {"label" : "toAn", "tail" : ": String", "member" : "ostinato.chess.core.♛.toAn", "link" : "ostinato\/chess\/core\/$u265B.html#toAn:String", "kind" : "val"}, {"label" : "pieceName", "tail" : ": String", "member" : "ostinato.chess.core.♛.pieceName", "link" : "ostinato\/chess\/core\/$u265B.html#pieceName:String", "kind" : "val"}, {"label" : "deltaPatterns", "tail" : ": Set[XY]", "member" : "ostinato.chess.core.♛.deltaPatterns", "link" : "ostinato\/chess\/core\/$u265B.html#deltaPatterns:Set[ostinato.core.XY]", "kind" : "val"}, {"label" : "hasRecursiveDeltas", "tail" : ": Boolean", "member" : "ostinato.chess.core.♛.hasRecursiveDeltas", "link" : "ostinato\/chess\/core\/$u265B.html#hasRecursiveDeltas:Boolean", "kind" : "val"}, {"member" : "ostinato.chess.core.♛#<init>", "error" : "unsupported entity"}, {"label" : "owner", "tail" : ": ChessPlayer", "member" : "ostinato.chess.core.♛.owner", "link" : "ostinato\/chess\/core\/$u265B.html#owner:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "pos", "tail" : ": XY", "member" : "ostinato.chess.core.♛.pos", "link" : "ostinato\/chess\/core\/$u265B.html#pos:ostinato.core.XY", "kind" : "val"}, {"label" : "actions", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Set[ChessAction]", "member" : "ostinato.chess.core.ChessPiece.actions", "link" : "ostinato\/chess\/core\/$u265B.html#actions(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Set[ostinato.chess.core.ChessAction]", "kind" : "def"}, {"label" : "canMoveTo", "tail" : "(to: XY, board: ChessBoard)(opts: ChessOptimisations): Boolean", "member" : "ostinato.chess.core.ChessPiece.canMoveTo", "link" : "ostinato\/chess\/core\/$u265B.html#canMoveTo(to:ostinato.core.XY,board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Boolean", "kind" : "def"}, {"label" : "defendedBy", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Option[ChessPiece]", "member" : "ostinato.chess.core.ChessPiece.defendedBy", "link" : "ostinato\/chess\/core\/$u265B.html#defendedBy(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Option[ostinato.chess.core.ChessPiece]", "kind" : "def"}, {"label" : "threatenedBy", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Option[ChessPiece]", "member" : "ostinato.chess.core.ChessPiece.threatenedBy", "link" : "ostinato\/chess\/core\/$u265B.html#threatenedBy(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Option[ostinato.chess.core.ChessPiece]", "kind" : "def"}, {"label" : "deltas", "tail" : "(board: ChessBoard): Set[XY]", "member" : "ostinato.chess.core.ChessPiece.deltas", "link" : "ostinato\/chess\/core\/$u265B.html#deltas(board:ostinato.chess.core.ChessBoard):Set[ostinato.core.XY]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "ostinato.chess.core.ChessPiece.toString", "link" : "ostinato\/chess\/core\/$u265B.html#toString():String", "kind" : "def"}, {"label" : "equals", "tail" : "(that: ChessPiece): Boolean", "member" : "ostinato.chess.core.ChessPiece.equals", "link" : "ostinato\/chess\/core\/$u265B.html#equals(that:ostinato.chess.core.ChessPiece):Boolean", "kind" : "def"}, {"label" : "enemy", "tail" : ": ChessPlayer", "member" : "ostinato.chess.core.ChessPiece.enemy", "link" : "ostinato\/chess\/core\/$u265B.html#enemy:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "isDefended", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Boolean", "member" : "ostinato.chess.core.ChessPiece.isDefended", "link" : "ostinato\/chess\/core\/$u265B.html#isDefended(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Boolean", "kind" : "def"}, {"label" : "isThreatened", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Boolean", "member" : "ostinato.chess.core.ChessPiece.isThreatened", "link" : "ostinato\/chess\/core\/$u265B.html#isThreatened(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Boolean", "kind" : "def"}, {"label" : "isPawn", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessPiece.isPawn", "link" : "ostinato\/chess\/core\/$u265B.html#isPawn:Boolean", "kind" : "val"}, {"label" : "isKing", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessPiece.isKing", "link" : "ostinato\/chess\/core\/$u265B.html#isKing:Boolean", "kind" : "val"}, {"label" : "isBishop", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessPiece.isBishop", "link" : "ostinato\/chess\/core\/$u265B.html#isBishop:Boolean", "kind" : "val"}, {"label" : "isKnight", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessPiece.isKnight", "link" : "ostinato\/chess\/core\/$u265B.html#isKnight:Boolean", "kind" : "val"}, {"label" : "isRook", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessPiece.isRook", "link" : "ostinato\/chess\/core\/$u265B.html#isRook:Boolean", "kind" : "val"}, {"label" : "movementsOfDelta", "tail" : "(from: XY, delta: XY, board: ChessBoard)(rules: ChessOptimisations): Set[ChessAction]", "member" : "ostinato.core.Piece.movementsOfDelta", "link" : "ostinato\/chess\/core\/$u265B.html#movementsOfDelta(from:ostinato.core.XY,delta:ostinato.core.XY,board:B)(implicitrules:R):Set[A]", "kind" : "def"}, {"label" : "allMovementsOfDelta", "tail" : "(from: XY, delta: XY, board: ChessBoard)(rules: ChessOptimisations): Set[ChessAction]", "member" : "ostinato.core.Piece.allMovementsOfDelta", "link" : "ostinato\/chess\/core\/$u265B.html#allMovementsOfDelta(from:ostinato.core.XY,delta:ostinato.core.XY,board:B)(implicitrules:R):Set[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/$u265B.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/$u265B.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/$u265B.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/$u265B.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/$u265B.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/$u265B.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/$u265B.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/$u265B.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/$u265B.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/$u265B.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/$u265B.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/$u265B.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/$u265B.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/$u265B.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/$u265B.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/$u265B.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/$u265B.html", "kind" : "case class"}, {"name" : "ostinato.chess.core.♜", "shortDescription" : "", "members_case class" : [{"label" : "toFigurine", "tail" : ": Char", "member" : "ostinato.chess.core.♜.toFigurine", "link" : "ostinato\/chess\/core\/$u265C.html#toFigurine:Char", "kind" : "val"}, {"label" : "castlingSide", "tail" : ": Option[CastlingSide.Value]", "member" : "ostinato.chess.core.♜.castlingSide", "link" : "ostinato\/chess\/core\/$u265C.html#castlingSide:Option[ostinato.chess.core.CastlingSide.Value]", "kind" : "lazy val"}, {"label" : "cantMove", "tail" : "(to: XY, board: ChessBoard): Boolean", "member" : "ostinato.chess.core.♜.cantMove", "link" : "ostinato\/chess\/core\/$u265C.html#cantMove(to:ostinato.core.XY,board:ostinato.chess.core.ChessBoard):Boolean", "kind" : "def"}, {"label" : "movedTo", "tail" : "(newXY: XY): ♜", "member" : "ostinato.chess.core.♜.movedTo", "link" : "ostinato\/chess\/core\/$u265C.html#movedTo(newXY:ostinato.core.XY):ostinato.chess.core.♜", "kind" : "def"}, {"label" : "withOwner", "tail" : "(newOwner: ChessPlayer): ♜", "member" : "ostinato.chess.core.♜.withOwner", "link" : "ostinato\/chess\/core\/$u265C.html#withOwner(newOwner:ostinato.chess.core.ChessPlayer):ostinato.chess.core.♜", "kind" : "def"}, {"label" : "isRook", "tail" : ": Boolean", "member" : "ostinato.chess.core.♜.isRook", "link" : "ostinato\/chess\/core\/$u265C.html#isRook:Boolean", "kind" : "val"}, {"label" : "toFen", "tail" : ": Char", "member" : "ostinato.chess.core.♜.toFen", "link" : "ostinato\/chess\/core\/$u265C.html#toFen:Char", "kind" : "val"}, {"label" : "toIccf", "tail" : ": Int", "member" : "ostinato.chess.core.♜.toIccf", "link" : "ostinato\/chess\/core\/$u265C.html#toIccf:Int", "kind" : "lazy val"}, {"label" : "toDn", "tail" : ": Set[String]", "member" : "ostinato.chess.core.♜.toDn", "link" : "ostinato\/chess\/core\/$u265C.html#toDn:scala.collection.immutable.Set[String]", "kind" : "val"}, {"label" : "toAn", "tail" : ": String", "member" : "ostinato.chess.core.♜.toAn", "link" : "ostinato\/chess\/core\/$u265C.html#toAn:String", "kind" : "val"}, {"label" : "pieceName", "tail" : ": String", "member" : "ostinato.chess.core.♜.pieceName", "link" : "ostinato\/chess\/core\/$u265C.html#pieceName:String", "kind" : "val"}, {"label" : "deltaPatterns", "tail" : ": Set[XY]", "member" : "ostinato.chess.core.♜.deltaPatterns", "link" : "ostinato\/chess\/core\/$u265C.html#deltaPatterns:Set[ostinato.core.XY]", "kind" : "val"}, {"label" : "hasRecursiveDeltas", "tail" : ": Boolean", "member" : "ostinato.chess.core.♜.hasRecursiveDeltas", "link" : "ostinato\/chess\/core\/$u265C.html#hasRecursiveDeltas:Boolean", "kind" : "val"}, {"member" : "ostinato.chess.core.♜#<init>", "error" : "unsupported entity"}, {"label" : "owner", "tail" : ": ChessPlayer", "member" : "ostinato.chess.core.♜.owner", "link" : "ostinato\/chess\/core\/$u265C.html#owner:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "pos", "tail" : ": XY", "member" : "ostinato.chess.core.♜.pos", "link" : "ostinato\/chess\/core\/$u265C.html#pos:ostinato.core.XY", "kind" : "val"}, {"label" : "actions", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Set[ChessAction]", "member" : "ostinato.chess.core.ChessPiece.actions", "link" : "ostinato\/chess\/core\/$u265C.html#actions(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Set[ostinato.chess.core.ChessAction]", "kind" : "def"}, {"label" : "canMoveTo", "tail" : "(to: XY, board: ChessBoard)(opts: ChessOptimisations): Boolean", "member" : "ostinato.chess.core.ChessPiece.canMoveTo", "link" : "ostinato\/chess\/core\/$u265C.html#canMoveTo(to:ostinato.core.XY,board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Boolean", "kind" : "def"}, {"label" : "defendedBy", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Option[ChessPiece]", "member" : "ostinato.chess.core.ChessPiece.defendedBy", "link" : "ostinato\/chess\/core\/$u265C.html#defendedBy(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Option[ostinato.chess.core.ChessPiece]", "kind" : "def"}, {"label" : "threatenedBy", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Option[ChessPiece]", "member" : "ostinato.chess.core.ChessPiece.threatenedBy", "link" : "ostinato\/chess\/core\/$u265C.html#threatenedBy(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Option[ostinato.chess.core.ChessPiece]", "kind" : "def"}, {"label" : "deltas", "tail" : "(board: ChessBoard): Set[XY]", "member" : "ostinato.chess.core.ChessPiece.deltas", "link" : "ostinato\/chess\/core\/$u265C.html#deltas(board:ostinato.chess.core.ChessBoard):Set[ostinato.core.XY]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "ostinato.chess.core.ChessPiece.toString", "link" : "ostinato\/chess\/core\/$u265C.html#toString():String", "kind" : "def"}, {"label" : "equals", "tail" : "(that: ChessPiece): Boolean", "member" : "ostinato.chess.core.ChessPiece.equals", "link" : "ostinato\/chess\/core\/$u265C.html#equals(that:ostinato.chess.core.ChessPiece):Boolean", "kind" : "def"}, {"label" : "enemy", "tail" : ": ChessPlayer", "member" : "ostinato.chess.core.ChessPiece.enemy", "link" : "ostinato\/chess\/core\/$u265C.html#enemy:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "isDefended", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Boolean", "member" : "ostinato.chess.core.ChessPiece.isDefended", "link" : "ostinato\/chess\/core\/$u265C.html#isDefended(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Boolean", "kind" : "def"}, {"label" : "isThreatened", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Boolean", "member" : "ostinato.chess.core.ChessPiece.isThreatened", "link" : "ostinato\/chess\/core\/$u265C.html#isThreatened(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Boolean", "kind" : "def"}, {"label" : "isPawn", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessPiece.isPawn", "link" : "ostinato\/chess\/core\/$u265C.html#isPawn:Boolean", "kind" : "val"}, {"label" : "isKing", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessPiece.isKing", "link" : "ostinato\/chess\/core\/$u265C.html#isKing:Boolean", "kind" : "val"}, {"label" : "isQueen", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessPiece.isQueen", "link" : "ostinato\/chess\/core\/$u265C.html#isQueen:Boolean", "kind" : "val"}, {"label" : "isBishop", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessPiece.isBishop", "link" : "ostinato\/chess\/core\/$u265C.html#isBishop:Boolean", "kind" : "val"}, {"label" : "isKnight", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessPiece.isKnight", "link" : "ostinato\/chess\/core\/$u265C.html#isKnight:Boolean", "kind" : "val"}, {"label" : "movementsOfDelta", "tail" : "(from: XY, delta: XY, board: ChessBoard)(rules: ChessOptimisations): Set[ChessAction]", "member" : "ostinato.core.Piece.movementsOfDelta", "link" : "ostinato\/chess\/core\/$u265C.html#movementsOfDelta(from:ostinato.core.XY,delta:ostinato.core.XY,board:B)(implicitrules:R):Set[A]", "kind" : "def"}, {"label" : "allMovementsOfDelta", "tail" : "(from: XY, delta: XY, board: ChessBoard)(rules: ChessOptimisations): Set[ChessAction]", "member" : "ostinato.core.Piece.allMovementsOfDelta", "link" : "ostinato\/chess\/core\/$u265C.html#allMovementsOfDelta(from:ostinato.core.XY,delta:ostinato.core.XY,board:B)(implicitrules:R):Set[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/$u265C.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/$u265C.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/$u265C.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/$u265C.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/$u265C.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/$u265C.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/$u265C.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/$u265C.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/$u265C.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/$u265C.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/$u265C.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/$u265C.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/$u265C.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/$u265C.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/$u265C.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/$u265C.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/$u265C.html", "kind" : "case class"}, {"name" : "ostinato.chess.core.♝", "shortDescription" : "", "members_case class" : [{"label" : "toFigurine", "tail" : ": Char", "member" : "ostinato.chess.core.♝.toFigurine", "link" : "ostinato\/chess\/core\/$u265D.html#toFigurine:Char", "kind" : "val"}, {"label" : "cantMove", "tail" : "(to: XY, board: ChessBoard): Boolean", "member" : "ostinato.chess.core.♝.cantMove", "link" : "ostinato\/chess\/core\/$u265D.html#cantMove(to:ostinato.core.XY,board:ostinato.chess.core.ChessBoard):Boolean", "kind" : "def"}, {"label" : "movedTo", "tail" : "(newXY: XY): ♝", "member" : "ostinato.chess.core.♝.movedTo", "link" : "ostinato\/chess\/core\/$u265D.html#movedTo(newXY:ostinato.core.XY):ostinato.chess.core.♝", "kind" : "def"}, {"label" : "withOwner", "tail" : "(newOwner: ChessPlayer): ♝", "member" : "ostinato.chess.core.♝.withOwner", "link" : "ostinato\/chess\/core\/$u265D.html#withOwner(newOwner:ostinato.chess.core.ChessPlayer):ostinato.chess.core.♝", "kind" : "def"}, {"label" : "isBishop", "tail" : ": Boolean", "member" : "ostinato.chess.core.♝.isBishop", "link" : "ostinato\/chess\/core\/$u265D.html#isBishop:Boolean", "kind" : "val"}, {"label" : "toFen", "tail" : ": Char", "member" : "ostinato.chess.core.♝.toFen", "link" : "ostinato\/chess\/core\/$u265D.html#toFen:Char", "kind" : "val"}, {"label" : "toIccf", "tail" : ": Int", "member" : "ostinato.chess.core.♝.toIccf", "link" : "ostinato\/chess\/core\/$u265D.html#toIccf:Int", "kind" : "lazy val"}, {"label" : "toDn", "tail" : ": Set[String]", "member" : "ostinato.chess.core.♝.toDn", "link" : "ostinato\/chess\/core\/$u265D.html#toDn:scala.collection.immutable.Set[String]", "kind" : "val"}, {"label" : "toAn", "tail" : ": String", "member" : "ostinato.chess.core.♝.toAn", "link" : "ostinato\/chess\/core\/$u265D.html#toAn:String", "kind" : "val"}, {"label" : "pieceName", "tail" : ": String", "member" : "ostinato.chess.core.♝.pieceName", "link" : "ostinato\/chess\/core\/$u265D.html#pieceName:String", "kind" : "val"}, {"label" : "deltaPatterns", "tail" : ": Set[XY]", "member" : "ostinato.chess.core.♝.deltaPatterns", "link" : "ostinato\/chess\/core\/$u265D.html#deltaPatterns:Set[ostinato.core.XY]", "kind" : "val"}, {"label" : "hasRecursiveDeltas", "tail" : ": Boolean", "member" : "ostinato.chess.core.♝.hasRecursiveDeltas", "link" : "ostinato\/chess\/core\/$u265D.html#hasRecursiveDeltas:Boolean", "kind" : "val"}, {"member" : "ostinato.chess.core.♝#<init>", "error" : "unsupported entity"}, {"label" : "owner", "tail" : ": ChessPlayer", "member" : "ostinato.chess.core.♝.owner", "link" : "ostinato\/chess\/core\/$u265D.html#owner:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "pos", "tail" : ": XY", "member" : "ostinato.chess.core.♝.pos", "link" : "ostinato\/chess\/core\/$u265D.html#pos:ostinato.core.XY", "kind" : "val"}, {"label" : "actions", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Set[ChessAction]", "member" : "ostinato.chess.core.ChessPiece.actions", "link" : "ostinato\/chess\/core\/$u265D.html#actions(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Set[ostinato.chess.core.ChessAction]", "kind" : "def"}, {"label" : "canMoveTo", "tail" : "(to: XY, board: ChessBoard)(opts: ChessOptimisations): Boolean", "member" : "ostinato.chess.core.ChessPiece.canMoveTo", "link" : "ostinato\/chess\/core\/$u265D.html#canMoveTo(to:ostinato.core.XY,board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Boolean", "kind" : "def"}, {"label" : "defendedBy", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Option[ChessPiece]", "member" : "ostinato.chess.core.ChessPiece.defendedBy", "link" : "ostinato\/chess\/core\/$u265D.html#defendedBy(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Option[ostinato.chess.core.ChessPiece]", "kind" : "def"}, {"label" : "threatenedBy", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Option[ChessPiece]", "member" : "ostinato.chess.core.ChessPiece.threatenedBy", "link" : "ostinato\/chess\/core\/$u265D.html#threatenedBy(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Option[ostinato.chess.core.ChessPiece]", "kind" : "def"}, {"label" : "deltas", "tail" : "(board: ChessBoard): Set[XY]", "member" : "ostinato.chess.core.ChessPiece.deltas", "link" : "ostinato\/chess\/core\/$u265D.html#deltas(board:ostinato.chess.core.ChessBoard):Set[ostinato.core.XY]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "ostinato.chess.core.ChessPiece.toString", "link" : "ostinato\/chess\/core\/$u265D.html#toString():String", "kind" : "def"}, {"label" : "equals", "tail" : "(that: ChessPiece): Boolean", "member" : "ostinato.chess.core.ChessPiece.equals", "link" : "ostinato\/chess\/core\/$u265D.html#equals(that:ostinato.chess.core.ChessPiece):Boolean", "kind" : "def"}, {"label" : "enemy", "tail" : ": ChessPlayer", "member" : "ostinato.chess.core.ChessPiece.enemy", "link" : "ostinato\/chess\/core\/$u265D.html#enemy:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "isDefended", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Boolean", "member" : "ostinato.chess.core.ChessPiece.isDefended", "link" : "ostinato\/chess\/core\/$u265D.html#isDefended(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Boolean", "kind" : "def"}, {"label" : "isThreatened", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Boolean", "member" : "ostinato.chess.core.ChessPiece.isThreatened", "link" : "ostinato\/chess\/core\/$u265D.html#isThreatened(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Boolean", "kind" : "def"}, {"label" : "isPawn", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessPiece.isPawn", "link" : "ostinato\/chess\/core\/$u265D.html#isPawn:Boolean", "kind" : "val"}, {"label" : "isKing", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessPiece.isKing", "link" : "ostinato\/chess\/core\/$u265D.html#isKing:Boolean", "kind" : "val"}, {"label" : "isQueen", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessPiece.isQueen", "link" : "ostinato\/chess\/core\/$u265D.html#isQueen:Boolean", "kind" : "val"}, {"label" : "isKnight", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessPiece.isKnight", "link" : "ostinato\/chess\/core\/$u265D.html#isKnight:Boolean", "kind" : "val"}, {"label" : "isRook", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessPiece.isRook", "link" : "ostinato\/chess\/core\/$u265D.html#isRook:Boolean", "kind" : "val"}, {"label" : "movementsOfDelta", "tail" : "(from: XY, delta: XY, board: ChessBoard)(rules: ChessOptimisations): Set[ChessAction]", "member" : "ostinato.core.Piece.movementsOfDelta", "link" : "ostinato\/chess\/core\/$u265D.html#movementsOfDelta(from:ostinato.core.XY,delta:ostinato.core.XY,board:B)(implicitrules:R):Set[A]", "kind" : "def"}, {"label" : "allMovementsOfDelta", "tail" : "(from: XY, delta: XY, board: ChessBoard)(rules: ChessOptimisations): Set[ChessAction]", "member" : "ostinato.core.Piece.allMovementsOfDelta", "link" : "ostinato\/chess\/core\/$u265D.html#allMovementsOfDelta(from:ostinato.core.XY,delta:ostinato.core.XY,board:B)(implicitrules:R):Set[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/$u265D.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/$u265D.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/$u265D.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/$u265D.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/$u265D.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/$u265D.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/$u265D.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/$u265D.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/$u265D.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/$u265D.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/$u265D.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/$u265D.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/$u265D.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/$u265D.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/$u265D.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/$u265D.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/$u265D.html", "kind" : "case class"}, {"name" : "ostinato.chess.core.♞", "shortDescription" : "", "members_case class" : [{"label" : "toFigurine", "tail" : ": Char", "member" : "ostinato.chess.core.♞.toFigurine", "link" : "ostinato\/chess\/core\/$u265E.html#toFigurine:Char", "kind" : "val"}, {"label" : "cantMove", "tail" : "(to: XY, board: ChessBoard): Boolean", "member" : "ostinato.chess.core.♞.cantMove", "link" : "ostinato\/chess\/core\/$u265E.html#cantMove(to:ostinato.core.XY,board:ostinato.chess.core.ChessBoard):Boolean", "kind" : "def"}, {"label" : "movedTo", "tail" : "(newXY: XY): ♞", "member" : "ostinato.chess.core.♞.movedTo", "link" : "ostinato\/chess\/core\/$u265E.html#movedTo(newXY:ostinato.core.XY):ostinato.chess.core.♞", "kind" : "def"}, {"label" : "withOwner", "tail" : "(newOwner: ChessPlayer): ♞", "member" : "ostinato.chess.core.♞.withOwner", "link" : "ostinato\/chess\/core\/$u265E.html#withOwner(newOwner:ostinato.chess.core.ChessPlayer):ostinato.chess.core.♞", "kind" : "def"}, {"label" : "isKnight", "tail" : ": Boolean", "member" : "ostinato.chess.core.♞.isKnight", "link" : "ostinato\/chess\/core\/$u265E.html#isKnight:Boolean", "kind" : "val"}, {"label" : "toFen", "tail" : ": Char", "member" : "ostinato.chess.core.♞.toFen", "link" : "ostinato\/chess\/core\/$u265E.html#toFen:Char", "kind" : "val"}, {"label" : "toIccf", "tail" : ": Int", "member" : "ostinato.chess.core.♞.toIccf", "link" : "ostinato\/chess\/core\/$u265E.html#toIccf:Int", "kind" : "lazy val"}, {"label" : "toDn", "tail" : ": Set[String]", "member" : "ostinato.chess.core.♞.toDn", "link" : "ostinato\/chess\/core\/$u265E.html#toDn:scala.collection.immutable.Set[String]", "kind" : "val"}, {"label" : "toAn", "tail" : ": String", "member" : "ostinato.chess.core.♞.toAn", "link" : "ostinato\/chess\/core\/$u265E.html#toAn:String", "kind" : "val"}, {"label" : "pieceName", "tail" : ": String", "member" : "ostinato.chess.core.♞.pieceName", "link" : "ostinato\/chess\/core\/$u265E.html#pieceName:String", "kind" : "val"}, {"label" : "deltaPatterns", "tail" : ": Set[XY]", "member" : "ostinato.chess.core.♞.deltaPatterns", "link" : "ostinato\/chess\/core\/$u265E.html#deltaPatterns:Set[ostinato.core.XY]", "kind" : "val"}, {"label" : "hasRecursiveDeltas", "tail" : ": Boolean", "member" : "ostinato.chess.core.♞.hasRecursiveDeltas", "link" : "ostinato\/chess\/core\/$u265E.html#hasRecursiveDeltas:Boolean", "kind" : "val"}, {"member" : "ostinato.chess.core.♞#<init>", "error" : "unsupported entity"}, {"label" : "owner", "tail" : ": ChessPlayer", "member" : "ostinato.chess.core.♞.owner", "link" : "ostinato\/chess\/core\/$u265E.html#owner:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "pos", "tail" : ": XY", "member" : "ostinato.chess.core.♞.pos", "link" : "ostinato\/chess\/core\/$u265E.html#pos:ostinato.core.XY", "kind" : "val"}, {"label" : "actions", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Set[ChessAction]", "member" : "ostinato.chess.core.ChessPiece.actions", "link" : "ostinato\/chess\/core\/$u265E.html#actions(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Set[ostinato.chess.core.ChessAction]", "kind" : "def"}, {"label" : "canMoveTo", "tail" : "(to: XY, board: ChessBoard)(opts: ChessOptimisations): Boolean", "member" : "ostinato.chess.core.ChessPiece.canMoveTo", "link" : "ostinato\/chess\/core\/$u265E.html#canMoveTo(to:ostinato.core.XY,board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Boolean", "kind" : "def"}, {"label" : "defendedBy", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Option[ChessPiece]", "member" : "ostinato.chess.core.ChessPiece.defendedBy", "link" : "ostinato\/chess\/core\/$u265E.html#defendedBy(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Option[ostinato.chess.core.ChessPiece]", "kind" : "def"}, {"label" : "threatenedBy", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Option[ChessPiece]", "member" : "ostinato.chess.core.ChessPiece.threatenedBy", "link" : "ostinato\/chess\/core\/$u265E.html#threatenedBy(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Option[ostinato.chess.core.ChessPiece]", "kind" : "def"}, {"label" : "deltas", "tail" : "(board: ChessBoard): Set[XY]", "member" : "ostinato.chess.core.ChessPiece.deltas", "link" : "ostinato\/chess\/core\/$u265E.html#deltas(board:ostinato.chess.core.ChessBoard):Set[ostinato.core.XY]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "ostinato.chess.core.ChessPiece.toString", "link" : "ostinato\/chess\/core\/$u265E.html#toString():String", "kind" : "def"}, {"label" : "equals", "tail" : "(that: ChessPiece): Boolean", "member" : "ostinato.chess.core.ChessPiece.equals", "link" : "ostinato\/chess\/core\/$u265E.html#equals(that:ostinato.chess.core.ChessPiece):Boolean", "kind" : "def"}, {"label" : "enemy", "tail" : ": ChessPlayer", "member" : "ostinato.chess.core.ChessPiece.enemy", "link" : "ostinato\/chess\/core\/$u265E.html#enemy:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "isDefended", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Boolean", "member" : "ostinato.chess.core.ChessPiece.isDefended", "link" : "ostinato\/chess\/core\/$u265E.html#isDefended(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Boolean", "kind" : "def"}, {"label" : "isThreatened", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Boolean", "member" : "ostinato.chess.core.ChessPiece.isThreatened", "link" : "ostinato\/chess\/core\/$u265E.html#isThreatened(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Boolean", "kind" : "def"}, {"label" : "isPawn", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessPiece.isPawn", "link" : "ostinato\/chess\/core\/$u265E.html#isPawn:Boolean", "kind" : "val"}, {"label" : "isKing", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessPiece.isKing", "link" : "ostinato\/chess\/core\/$u265E.html#isKing:Boolean", "kind" : "val"}, {"label" : "isQueen", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessPiece.isQueen", "link" : "ostinato\/chess\/core\/$u265E.html#isQueen:Boolean", "kind" : "val"}, {"label" : "isBishop", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessPiece.isBishop", "link" : "ostinato\/chess\/core\/$u265E.html#isBishop:Boolean", "kind" : "val"}, {"label" : "isRook", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessPiece.isRook", "link" : "ostinato\/chess\/core\/$u265E.html#isRook:Boolean", "kind" : "val"}, {"label" : "movementsOfDelta", "tail" : "(from: XY, delta: XY, board: ChessBoard)(rules: ChessOptimisations): Set[ChessAction]", "member" : "ostinato.core.Piece.movementsOfDelta", "link" : "ostinato\/chess\/core\/$u265E.html#movementsOfDelta(from:ostinato.core.XY,delta:ostinato.core.XY,board:B)(implicitrules:R):Set[A]", "kind" : "def"}, {"label" : "allMovementsOfDelta", "tail" : "(from: XY, delta: XY, board: ChessBoard)(rules: ChessOptimisations): Set[ChessAction]", "member" : "ostinato.core.Piece.allMovementsOfDelta", "link" : "ostinato\/chess\/core\/$u265E.html#allMovementsOfDelta(from:ostinato.core.XY,delta:ostinato.core.XY,board:B)(implicitrules:R):Set[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/$u265E.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/$u265E.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/$u265E.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/$u265E.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/$u265E.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/$u265E.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/$u265E.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/$u265E.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/$u265E.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/$u265E.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/$u265E.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/$u265E.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/$u265E.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/$u265E.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/$u265E.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/$u265E.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/$u265E.html", "kind" : "case class"}, {"name" : "ostinato.chess.core.♟", "shortDescription" : "", "members_case class" : [{"label" : "toFigurine", "tail" : ": Char", "member" : "ostinato.chess.core.♟.toFigurine", "link" : "ostinato\/chess\/core\/$u265F.html#toFigurine:Char", "kind" : "val"}, {"label" : "cantMove", "tail" : "(to: XY, board: ChessBoard): Boolean", "member" : "ostinato.chess.core.♟.cantMove", "link" : "ostinato\/chess\/core\/$u265F.html#cantMove(to:ostinato.core.XY,board:ostinato.chess.core.ChessBoard):Boolean", "kind" : "def"}, {"label" : "movedTo", "tail" : "(newXY: XY): ♟", "member" : "ostinato.chess.core.♟.movedTo", "link" : "ostinato\/chess\/core\/$u265F.html#movedTo(newXY:ostinato.core.XY):ostinato.chess.core.♟", "kind" : "def"}, {"label" : "withOwner", "tail" : "(newOwner: ChessPlayer): ♟", "member" : "ostinato.chess.core.♟.withOwner", "link" : "ostinato\/chess\/core\/$u265F.html#withOwner(newOwner:ostinato.chess.core.ChessPlayer):ostinato.chess.core.♟", "kind" : "def"}, {"label" : "isPawn", "tail" : ": Boolean", "member" : "ostinato.chess.core.♟.isPawn", "link" : "ostinato\/chess\/core\/$u265F.html#isPawn:Boolean", "kind" : "val"}, {"label" : "toFen", "tail" : ": Char", "member" : "ostinato.chess.core.♟.toFen", "link" : "ostinato\/chess\/core\/$u265F.html#toFen:Char", "kind" : "val"}, {"label" : "toIccf", "tail" : ": Nothing", "member" : "ostinato.chess.core.♟.toIccf", "link" : "ostinato\/chess\/core\/$u265F.html#toIccf:Nothing", "kind" : "lazy val"}, {"label" : "toDn", "tail" : ": Set[String]", "member" : "ostinato.chess.core.♟.toDn", "link" : "ostinato\/chess\/core\/$u265F.html#toDn:scala.collection.immutable.Set[String]", "kind" : "val"}, {"label" : "toAn", "tail" : ": String", "member" : "ostinato.chess.core.♟.toAn", "link" : "ostinato\/chess\/core\/$u265F.html#toAn:String", "kind" : "val"}, {"label" : "pieceName", "tail" : ": String", "member" : "ostinato.chess.core.♟.pieceName", "link" : "ostinato\/chess\/core\/$u265F.html#pieceName:String", "kind" : "val"}, {"label" : "isPromoting", "tail" : ": Boolean", "member" : "ostinato.chess.core.♟.isPromoting", "link" : "ostinato\/chess\/core\/$u265F.html#isPromoting:Boolean", "kind" : "val"}, {"label" : "distanceToPromotion", "tail" : ": Int", "member" : "ostinato.chess.core.♟.distanceToPromotion", "link" : "ostinato\/chess\/core\/$u265F.html#distanceToPromotion:Int", "kind" : "val"}, {"label" : "promotingPosition", "tail" : "(dy: Int): Int", "member" : "ostinato.chess.core.♟.promotingPosition", "link" : "ostinato\/chess\/core\/$u265F.html#promotingPosition(dy:Int):Int", "kind" : "def"}, {"label" : "deltaPatterns", "tail" : ": Set[XY]", "member" : "ostinato.chess.core.♟.deltaPatterns", "link" : "ostinato\/chess\/core\/$u265F.html#deltaPatterns:Set[ostinato.core.XY]", "kind" : "val"}, {"label" : "hasRecursiveDeltas", "tail" : ": Boolean", "member" : "ostinato.chess.core.♟.hasRecursiveDeltas", "link" : "ostinato\/chess\/core\/$u265F.html#hasRecursiveDeltas:Boolean", "kind" : "val"}, {"label" : "isInInitialPosition", "tail" : ": Boolean", "member" : "ostinato.chess.core.♟.isInInitialPosition", "link" : "ostinato\/chess\/core\/$u265F.html#isInInitialPosition:Boolean", "kind" : "val"}, {"member" : "ostinato.chess.core.♟#<init>", "error" : "unsupported entity"}, {"label" : "dy", "tail" : ": Int", "member" : "ostinato.chess.core.♟.dy", "link" : "ostinato\/chess\/core\/$u265F.html#dy:Int", "kind" : "val"}, {"label" : "owner", "tail" : ": ChessPlayer", "member" : "ostinato.chess.core.♟.owner", "link" : "ostinato\/chess\/core\/$u265F.html#owner:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "pos", "tail" : ": XY", "member" : "ostinato.chess.core.♟.pos", "link" : "ostinato\/chess\/core\/$u265F.html#pos:ostinato.core.XY", "kind" : "val"}, {"label" : "actions", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Set[ChessAction]", "member" : "ostinato.chess.core.ChessPiece.actions", "link" : "ostinato\/chess\/core\/$u265F.html#actions(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Set[ostinato.chess.core.ChessAction]", "kind" : "def"}, {"label" : "canMoveTo", "tail" : "(to: XY, board: ChessBoard)(opts: ChessOptimisations): Boolean", "member" : "ostinato.chess.core.ChessPiece.canMoveTo", "link" : "ostinato\/chess\/core\/$u265F.html#canMoveTo(to:ostinato.core.XY,board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Boolean", "kind" : "def"}, {"label" : "defendedBy", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Option[ChessPiece]", "member" : "ostinato.chess.core.ChessPiece.defendedBy", "link" : "ostinato\/chess\/core\/$u265F.html#defendedBy(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Option[ostinato.chess.core.ChessPiece]", "kind" : "def"}, {"label" : "threatenedBy", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Option[ChessPiece]", "member" : "ostinato.chess.core.ChessPiece.threatenedBy", "link" : "ostinato\/chess\/core\/$u265F.html#threatenedBy(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Option[ostinato.chess.core.ChessPiece]", "kind" : "def"}, {"label" : "deltas", "tail" : "(board: ChessBoard): Set[XY]", "member" : "ostinato.chess.core.ChessPiece.deltas", "link" : "ostinato\/chess\/core\/$u265F.html#deltas(board:ostinato.chess.core.ChessBoard):Set[ostinato.core.XY]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "ostinato.chess.core.ChessPiece.toString", "link" : "ostinato\/chess\/core\/$u265F.html#toString():String", "kind" : "def"}, {"label" : "equals", "tail" : "(that: ChessPiece): Boolean", "member" : "ostinato.chess.core.ChessPiece.equals", "link" : "ostinato\/chess\/core\/$u265F.html#equals(that:ostinato.chess.core.ChessPiece):Boolean", "kind" : "def"}, {"label" : "enemy", "tail" : ": ChessPlayer", "member" : "ostinato.chess.core.ChessPiece.enemy", "link" : "ostinato\/chess\/core\/$u265F.html#enemy:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "isDefended", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Boolean", "member" : "ostinato.chess.core.ChessPiece.isDefended", "link" : "ostinato\/chess\/core\/$u265F.html#isDefended(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Boolean", "kind" : "def"}, {"label" : "isThreatened", "tail" : "(board: ChessBoard)(opts: ChessOptimisations): Boolean", "member" : "ostinato.chess.core.ChessPiece.isThreatened", "link" : "ostinato\/chess\/core\/$u265F.html#isThreatened(board:ostinato.chess.core.ChessBoard)(implicitopts:ostinato.chess.core.ChessOptimisations):Boolean", "kind" : "def"}, {"label" : "isKing", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessPiece.isKing", "link" : "ostinato\/chess\/core\/$u265F.html#isKing:Boolean", "kind" : "val"}, {"label" : "isQueen", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessPiece.isQueen", "link" : "ostinato\/chess\/core\/$u265F.html#isQueen:Boolean", "kind" : "val"}, {"label" : "isBishop", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessPiece.isBishop", "link" : "ostinato\/chess\/core\/$u265F.html#isBishop:Boolean", "kind" : "val"}, {"label" : "isKnight", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessPiece.isKnight", "link" : "ostinato\/chess\/core\/$u265F.html#isKnight:Boolean", "kind" : "val"}, {"label" : "isRook", "tail" : ": Boolean", "member" : "ostinato.chess.core.ChessPiece.isRook", "link" : "ostinato\/chess\/core\/$u265F.html#isRook:Boolean", "kind" : "val"}, {"label" : "movementsOfDelta", "tail" : "(from: XY, delta: XY, board: ChessBoard)(rules: ChessOptimisations): Set[ChessAction]", "member" : "ostinato.core.Piece.movementsOfDelta", "link" : "ostinato\/chess\/core\/$u265F.html#movementsOfDelta(from:ostinato.core.XY,delta:ostinato.core.XY,board:B)(implicitrules:R):Set[A]", "kind" : "def"}, {"label" : "allMovementsOfDelta", "tail" : "(from: XY, delta: XY, board: ChessBoard)(rules: ChessOptimisations): Set[ChessAction]", "member" : "ostinato.core.Piece.allMovementsOfDelta", "link" : "ostinato\/chess\/core\/$u265F.html#allMovementsOfDelta(from:ostinato.core.XY,delta:ostinato.core.XY,board:B)(implicitrules:R):Set[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/core\/$u265F.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/core\/$u265F.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/core\/$u265F.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/core\/$u265F.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/core\/$u265F.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/core\/$u265F.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/core\/$u265F.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/$u265F.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/$u265F.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/core\/$u265F.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/core\/$u265F.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/core\/$u265F.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/core\/$u265F.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/core\/$u265F.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/core\/$u265F.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/core\/$u265F.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/core\/$u265F.html", "kind" : "case class"}], "ostinato.chess.api" : [{"name" : "ostinato.chess.api.Api", "shortDescription" : "", "members_class" : [{"label" : "convertNotation", "tail" : "(input: String, notation: String): Map[String, Any]", "member" : "ostinato.chess.api.Api.convertNotation", "link" : "ostinato\/chess\/api\/Api.html#convertNotation(input:String,notation:String):Map[String,Any]", "kind" : "def"}, {"label" : "parseNotation", "tail" : "(input: String): Map[String, Any]", "member" : "ostinato.chess.api.Api.parseNotation", "link" : "ostinato\/chess\/api\/Api.html#parseNotation(input:String):Map[String,Any]", "kind" : "def"}, {"label" : "randomAiMove", "tail" : "(fen: String): Map[String, Any]", "member" : "ostinato.chess.api.Api.randomAiMove", "link" : "ostinato\/chess\/api\/Api.html#randomAiMove(fen:String):Map[String,Any]", "kind" : "def"}, {"label" : "instantiateChessBasicAi", "tail" : "(_player: ChessPlayer, _depth: Int, _debug: Boolean): ChessBasicAi", "member" : "ostinato.chess.api.Api.instantiateChessBasicAi", "link" : "ostinato\/chess\/api\/Api.html#instantiateChessBasicAi(_player:ostinato.chess.core.ChessPlayer,_depth:Int,_debug:Boolean):ostinato.chess.ai.ChessBasicAi", "kind" : "def"}, {"label" : "basicAiMove", "tail" : "(fen: String, _depth: Int, _debug: Boolean): Map[String, Any]", "member" : "ostinato.chess.api.Api.basicAiMove", "link" : "ostinato\/chess\/api\/Api.html#basicAiMove(fen:String,_depth:Int,_debug:Boolean):Map[String,Any]", "kind" : "def"}, {"label" : "move", "tail" : "(ostinatoString: String, from: String, to: String): Map[String, Any]", "member" : "ostinato.chess.api.Api.move", "link" : "ostinato\/chess\/api\/Api.html#move(ostinatoString:String,from:String,to:String):Map[String,Any]", "kind" : "def"}, {"label" : "defaultGame", "tail" : ": String", "member" : "ostinato.chess.api.Api.defaultGame", "link" : "ostinato\/chess\/api\/Api.html#defaultGame:String", "kind" : "val"}, {"member" : "ostinato.chess.api.Api#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/api\/Api.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/api\/Api.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/api\/Api.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/api\/Api.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/api\/Api.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/api\/Api.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/api\/Api.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/api\/Api.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/api\/Api.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/api\/Api.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/api\/Api.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/api\/Api.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "ostinato\/chess\/api\/Api.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/api\/Api.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/api\/Api.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/chess\/api\/Api.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/api\/Api.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/api\/Api.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/api\/Api.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "ostinato\/chess\/api\/Api.html", "kind" : "class"}], "ostinato.chess" : [{"name" : "ostinato.chess.InvalidIccfHistoryException", "shortDescription" : "", "members_case class" : [{"member" : "ostinato.chess.InvalidIccfHistoryException#<init>", "error" : "unsupported entity"}, {"label" : "e", "tail" : ": Throwable", "member" : "ostinato.chess.InvalidIccfHistoryException.e", "link" : "ostinato\/chess\/InvalidIccfHistoryException.html#e:Throwable", "kind" : "val"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "scala.util.control.NoStackTrace.fillInStackTrace", "link" : "ostinato\/chess\/InvalidIccfHistoryException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "ostinato\/chess\/InvalidIccfHistoryException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "ostinato\/chess\/InvalidIccfHistoryException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "ostinato\/chess\/InvalidIccfHistoryException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "ostinato\/chess\/InvalidIccfHistoryException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "ostinato\/chess\/InvalidIccfHistoryException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "ostinato\/chess\/InvalidIccfHistoryException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "ostinato\/chess\/InvalidIccfHistoryException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "ostinato\/chess\/InvalidIccfHistoryException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "ostinato\/chess\/InvalidIccfHistoryException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "ostinato\/chess\/InvalidIccfHistoryException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "ostinato\/chess\/InvalidIccfHistoryException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "ostinato\/chess\/InvalidIccfHistoryException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/InvalidIccfHistoryException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/InvalidIccfHistoryException.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/InvalidIccfHistoryException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/InvalidIccfHistoryException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/InvalidIccfHistoryException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/InvalidIccfHistoryException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/InvalidIccfHistoryException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/InvalidIccfHistoryException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/InvalidIccfHistoryException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/InvalidIccfHistoryException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/InvalidIccfHistoryException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/InvalidIccfHistoryException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/InvalidIccfHistoryException.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/InvalidIccfHistoryException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/InvalidIccfHistoryException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/InvalidIccfHistoryException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/InvalidIccfHistoryException.html", "kind" : "case class"}, {"name" : "ostinato.chess.InvalidIccfPos", "shortDescription" : "", "members_case class" : [{"member" : "ostinato.chess.InvalidIccfPos#<init>", "error" : "unsupported entity"}, {"label" : "s", "tail" : ": String", "member" : "ostinato.chess.InvalidIccfPos.s", "link" : "ostinato\/chess\/InvalidIccfPos.html#s:String", "kind" : "val"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "scala.util.control.NoStackTrace.fillInStackTrace", "link" : "ostinato\/chess\/InvalidIccfPos.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "ostinato\/chess\/InvalidIccfPos.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "ostinato\/chess\/InvalidIccfPos.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "ostinato\/chess\/InvalidIccfPos.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "ostinato\/chess\/InvalidIccfPos.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "ostinato\/chess\/InvalidIccfPos.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "ostinato\/chess\/InvalidIccfPos.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "ostinato\/chess\/InvalidIccfPos.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "ostinato\/chess\/InvalidIccfPos.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "ostinato\/chess\/InvalidIccfPos.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "ostinato\/chess\/InvalidIccfPos.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "ostinato\/chess\/InvalidIccfPos.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "ostinato\/chess\/InvalidIccfPos.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/InvalidIccfPos.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/InvalidIccfPos.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/InvalidIccfPos.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/InvalidIccfPos.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/InvalidIccfPos.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/InvalidIccfPos.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/InvalidIccfPos.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/InvalidIccfPos.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/InvalidIccfPos.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/InvalidIccfPos.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/InvalidIccfPos.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/InvalidIccfPos.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/InvalidIccfPos.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/InvalidIccfPos.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/InvalidIccfPos.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/InvalidIccfPos.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/InvalidIccfPos.html", "kind" : "case class"}], "ostinato.chess.ai" : [{"name" : "ostinato.chess.ai.ChessBasicAi", "shortDescription" : "", "members_case class" : [{"label" : "alphabeta", "tail" : "(board: ChessBoard, action: ChessAction, depth: Int, alpha: Long, beta: Long)(opts: ChessOptimisations): Long", "member" : "ostinato.chess.ai.ChessBasicAi.alphabeta", "link" : "ostinato\/chess\/ai\/ChessBasicAi.html#alphabeta(board:ostinato.chess.core.ChessBoard,action:ostinato.chess.core.ChessAction,depth:Int,alpha:Long,beta:Long)(implicitopts:ostinato.chess.core.ChessOptimisations):Long", "kind" : "def"}, {"label" : "sort", "tail" : "(a: (ChessAction, Long), b: (ChessAction, Long)): Boolean", "member" : "ostinato.chess.ai.ChessBasicAi.sort", "link" : "ostinato\/chess\/ai\/ChessBasicAi.html#sort(a:(ostinato.chess.core.ChessAction,Long),b:(ostinato.chess.core.ChessAction,Long)):Boolean", "kind" : "def"}, {"label" : "evaluateAllActions", "tail" : "(actions: Stream[ChessAction], game: ChessGame, optsForAi: ChessOptimisations): Seq[(ChessAction, Long)]", "member" : "ostinato.chess.ai.ChessBasicAi.evaluateAllActions", "link" : "ostinato\/chess\/ai\/ChessBasicAi.html#evaluateAllActions(actions:Stream[ostinato.chess.core.ChessAction],game:ostinato.chess.core.ChessGame,optsForAi:ostinato.chess.core.ChessOptimisations):Seq[(ostinato.chess.core.ChessAction,Long)]", "kind" : "def"}, {"label" : "nextAction", "tail" : "(game: ChessGame)(opts: ChessOptimisations): Option[ChessAction]", "member" : "ostinato.chess.ai.ChessBasicAi.nextAction", "link" : "ostinato\/chess\/ai\/ChessBasicAi.html#nextAction(game:ostinato.chess.core.ChessGame)(implicitopts:ostinato.chess.core.ChessOptimisations):Option[ostinato.chess.core.ChessAction]", "kind" : "def"}, {"member" : "ostinato.chess.ai.ChessBasicAi#<init>", "error" : "unsupported entity"}, {"label" : "debug", "tail" : ": Boolean", "member" : "ostinato.chess.ai.ChessBasicAi.debug", "link" : "ostinato\/chess\/ai\/ChessBasicAi.html#debug:Boolean", "kind" : "val"}, {"label" : "depth", "tail" : ": Int", "member" : "ostinato.chess.ai.ChessBasicAi.depth", "link" : "ostinato\/chess\/ai\/ChessBasicAi.html#depth:Int", "kind" : "val"}, {"label" : "player", "tail" : ": ChessPlayer", "member" : "ostinato.chess.ai.ChessBasicAi.player", "link" : "ostinato\/chess\/ai\/ChessBasicAi.html#player:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "random", "tail" : ": Random", "member" : "ostinato.core.Ai.random", "link" : "ostinato\/chess\/ai\/ChessBasicAi.html#random:scala.util.Random", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/ai\/ChessBasicAi.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/ai\/ChessBasicAi.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/ai\/ChessBasicAi.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/ai\/ChessBasicAi.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/ai\/ChessBasicAi.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/ai\/ChessBasicAi.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/ai\/ChessBasicAi.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/ai\/ChessBasicAi.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/ai\/ChessBasicAi.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/ai\/ChessBasicAi.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/ai\/ChessBasicAi.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/ai\/ChessBasicAi.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/ai\/ChessBasicAi.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/ai\/ChessBasicAi.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/ai\/ChessBasicAi.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/ai\/ChessBasicAi.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/ai\/ChessBasicAi.html", "kind" : "case class"}, {"name" : "ostinato.chess.ai.ChessRandomAi", "shortDescription" : "", "members_case class" : [{"label" : "nextNonFinalAction", "tail" : "(game: ChessGame): Option[ChessAction]", "member" : "ostinato.chess.ai.ChessRandomAi.nextNonFinalAction", "link" : "ostinato\/chess\/ai\/ChessRandomAi.html#nextNonFinalAction(game:ostinato.chess.core.ChessGame):Option[ostinato.chess.core.ChessAction]", "kind" : "def"}, {"label" : "nextAction", "tail" : "(game: ChessGame)(opts: ChessOptimisations): Option[ChessAction]", "member" : "ostinato.chess.ai.ChessRandomAi.nextAction", "link" : "ostinato\/chess\/ai\/ChessRandomAi.html#nextAction(game:ostinato.chess.core.ChessGame)(implicitopts:ostinato.chess.core.ChessOptimisations):Option[ostinato.chess.core.ChessAction]", "kind" : "def"}, {"member" : "ostinato.chess.ai.ChessRandomAi#<init>", "error" : "unsupported entity"}, {"label" : "seed", "tail" : ": Option[Long]", "member" : "ostinato.chess.ai.ChessRandomAi.seed", "link" : "ostinato\/chess\/ai\/ChessRandomAi.html#seed:Option[Long]", "kind" : "val"}, {"label" : "player", "tail" : ": ChessPlayer", "member" : "ostinato.chess.ai.ChessRandomAi.player", "link" : "ostinato\/chess\/ai\/ChessRandomAi.html#player:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "shuffleHead", "tail" : "(list: List[T]): Option[T]", "member" : "ostinato.core.RandomAi.shuffleHead", "link" : "ostinato\/chess\/ai\/ChessRandomAi.html#shuffleHead[T](list:List[T]):Option[T]", "kind" : "def"}, {"label" : "random", "tail" : ": Random", "member" : "ostinato.core.Ai.random", "link" : "ostinato\/chess\/ai\/ChessRandomAi.html#random:scala.util.Random", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/ai\/ChessRandomAi.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/ai\/ChessRandomAi.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/ai\/ChessRandomAi.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/ai\/ChessRandomAi.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/ai\/ChessRandomAi.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/ai\/ChessRandomAi.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/ai\/ChessRandomAi.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/ai\/ChessRandomAi.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/ai\/ChessRandomAi.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/ai\/ChessRandomAi.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/ai\/ChessRandomAi.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/ai\/ChessRandomAi.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/ai\/ChessRandomAi.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/ai\/ChessRandomAi.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/ai\/ChessRandomAi.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/ai\/ChessRandomAi.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/ai\/ChessRandomAi.html", "kind" : "case class"}], "ostinato.chess.server" : [{"name" : "ostinato.chess.server.JsonSupport", "members_trait" : [{"label" : "RootJsArrayFormat", "tail" : "", "member" : "spray.json.AdditionalFormats.RootJsArrayFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#RootJsArrayFormat", "kind" : "implicit object"}, {"label" : "RootJsObjectFormat", "tail" : "", "member" : "spray.json.AdditionalFormats.RootJsObjectFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#RootJsObjectFormat", "kind" : "implicit object"}, {"label" : "JsValueFormat", "tail" : "", "member" : "spray.json.AdditionalFormats.JsValueFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#JsValueFormat", "kind" : "implicit object"}, {"label" : "OptionFormat", "tail" : "", "member" : "spray.json.StandardFormats.OptionFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#OptionFormat[T<:<?>]extendsStandardFormats.this.JF[Option[T]]", "kind" : "class"}, {"label" : "SymbolJsonFormat", "tail" : "", "member" : "spray.json.BasicFormats.SymbolJsonFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#SymbolJsonFormat", "kind" : "implicit object"}, {"label" : "StringJsonFormat", "tail" : "", "member" : "spray.json.BasicFormats.StringJsonFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#StringJsonFormat", "kind" : "implicit object"}, {"label" : "CharJsonFormat", "tail" : "", "member" : "spray.json.BasicFormats.CharJsonFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#CharJsonFormat", "kind" : "implicit object"}, {"label" : "BooleanJsonFormat", "tail" : "", "member" : "spray.json.BasicFormats.BooleanJsonFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#BooleanJsonFormat", "kind" : "implicit object"}, {"label" : "UnitJsonFormat", "tail" : "", "member" : "spray.json.BasicFormats.UnitJsonFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#UnitJsonFormat", "kind" : "implicit object"}, {"label" : "BigIntJsonFormat", "tail" : "", "member" : "spray.json.BasicFormats.BigIntJsonFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#BigIntJsonFormat", "kind" : "implicit object"}, {"label" : "BigDecimalJsonFormat", "tail" : "", "member" : "spray.json.BasicFormats.BigDecimalJsonFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#BigDecimalJsonFormat", "kind" : "implicit object"}, {"label" : "ShortJsonFormat", "tail" : "", "member" : "spray.json.BasicFormats.ShortJsonFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#ShortJsonFormat", "kind" : "implicit object"}, {"label" : "ByteJsonFormat", "tail" : "", "member" : "spray.json.BasicFormats.ByteJsonFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#ByteJsonFormat", "kind" : "implicit object"}, {"label" : "DoubleJsonFormat", "tail" : "", "member" : "spray.json.BasicFormats.DoubleJsonFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#DoubleJsonFormat", "kind" : "implicit object"}, {"label" : "FloatJsonFormat", "tail" : "", "member" : "spray.json.BasicFormats.FloatJsonFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#FloatJsonFormat", "kind" : "implicit object"}, {"label" : "LongJsonFormat", "tail" : "", "member" : "spray.json.BasicFormats.LongJsonFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#LongJsonFormat", "kind" : "implicit object"}, {"label" : "IntJsonFormat", "tail" : "", "member" : "spray.json.BasicFormats.IntJsonFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#IntJsonFormat", "kind" : "implicit object"}, {"label" : "f5", "tail" : ": RootJsonFormat[RequestConvertNotation]", "member" : "ostinato.chess.server.JsonSupport.f5", "link" : "ostinato\/chess\/server\/JsonSupport.html#f5:spray.json.RootJsonFormat[ostinato.chess.server.RequestConvertNotation]", "kind" : "implicit val"}, {"label" : "f4", "tail" : ": RootJsonFormat[RequestParseNotation]", "member" : "ostinato.chess.server.JsonSupport.f4", "link" : "ostinato\/chess\/server\/JsonSupport.html#f4:spray.json.RootJsonFormat[ostinato.chess.server.RequestParseNotation]", "kind" : "implicit val"}, {"label" : "f3", "tail" : ": RootJsonFormat[RequestRandomAI]", "member" : "ostinato.chess.server.JsonSupport.f3", "link" : "ostinato\/chess\/server\/JsonSupport.html#f3:spray.json.RootJsonFormat[ostinato.chess.server.RequestRandomAI]", "kind" : "implicit val"}, {"label" : "f2", "tail" : ": RootJsonFormat[RequestBasicAI]", "member" : "ostinato.chess.server.JsonSupport.f2", "link" : "ostinato\/chess\/server\/JsonSupport.html#f2:spray.json.RootJsonFormat[ostinato.chess.server.RequestBasicAI]", "kind" : "implicit val"}, {"label" : "f1", "tail" : ": RootJsonFormat[RequestMove]", "member" : "ostinato.chess.server.JsonSupport.f1", "link" : "ostinato\/chess\/server\/JsonSupport.html#f1:spray.json.RootJsonFormat[ostinato.chess.server.RequestMove]", "kind" : "implicit val"}, {"label" : "safeReader", "tail" : "(arg0: JsonReader[A]): JsonReader[Either[Exception, A]]", "member" : "spray.json.AdditionalFormats.safeReader", "link" : "ostinato\/chess\/server\/JsonSupport.html#safeReader[A](implicitevidence$1:spray.json.JsonReader[A]):spray.json.JsonReader[Either[Exception,A]]", "kind" : "def"}, {"label" : "lazyFormat", "tail" : "(format: ⇒ JsonFormat[T]): JsonFormat[T] { lazy val delegate: spray.json.JsonFormat[T] }", "member" : "spray.json.AdditionalFormats.lazyFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#lazyFormat[T](format:=>spray.json.JsonFormat[T]):spray.json.JsonFormat[T]{lazyvaldelegate:spray.json.JsonFormat[T]}", "kind" : "def"}, {"label" : "lift", "tail" : "(reader: RootJsonReader[T]): RootJsonFormat[T]", "member" : "spray.json.AdditionalFormats.lift", "link" : "ostinato\/chess\/server\/JsonSupport.html#lift[T<:AnyRef](reader:spray.json.RootJsonReader[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "lift", "tail" : "(reader: JsonReader[T]): JsonFormat[T]", "member" : "spray.json.AdditionalFormats.lift", "link" : "ostinato\/chess\/server\/JsonSupport.html#lift[T<:AnyRef](reader:spray.json.JsonReader[T]):spray.json.JsonFormat[T]", "kind" : "def"}, {"label" : "lift", "tail" : "(writer: RootJsonWriter[T]): RootJsonFormat[T]", "member" : "spray.json.AdditionalFormats.lift", "link" : "ostinato\/chess\/server\/JsonSupport.html#lift[T](writer:spray.json.RootJsonWriter[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "lift", "tail" : "(writer: JsonWriter[T]): JsonFormat[T] { def read(value: spray.json.JsValue): Nothing }", "member" : "spray.json.AdditionalFormats.lift", "link" : "ostinato\/chess\/server\/JsonSupport.html#lift[T](writer:spray.json.JsonWriter[T]):spray.json.JsonFormat[T]{defread(value:spray.json.JsValue):Nothing}", "kind" : "def"}, {"label" : "rootFormat", "tail" : "(format: JsonFormat[T]): RootJsonFormat[T]", "member" : "spray.json.AdditionalFormats.rootFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#rootFormat[T](format:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "rootJsonFormat", "tail" : "(reader: RootJsonReader[T], writer: RootJsonWriter[T]): RootJsonFormat[T]", "member" : "spray.json.AdditionalFormats.rootJsonFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#rootJsonFormat[T](reader:spray.json.RootJsonReader[T],writer:spray.json.RootJsonWriter[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(reader: JsonReader[T], writer: JsonWriter[T]): JsonFormat[T]", "member" : "spray.json.AdditionalFormats.jsonFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat[T](reader:spray.json.JsonReader[T],writer:spray.json.JsonWriter[T]):spray.json.JsonFormat[T]", "kind" : "def"}, {"label" : "extractFieldNames", "tail" : "(classManifest: ClassManifest[_]): Array[String]", "member" : "spray.json.ProductFormats.extractFieldNames", "link" : "ostinato\/chess\/server\/JsonSupport.html#extractFieldNames(classManifest:ClassManifest[_]):Array[String]", "kind" : "def"}, {"label" : "fromField", "tail" : "(value: JsValue, fieldName: String)(reader: JsonReader[T]): T", "member" : "spray.json.ProductFormats.fromField", "link" : "ostinato\/chess\/server\/JsonSupport.html#fromField[T](value:spray.json.JsValue,fieldName:String)(implicitreader:spray.json.JsonReader[T]):T", "kind" : "def"}, {"label" : "productElement2Field", "tail" : "(fieldName: String, p: Product, ix: Int, rest: List[JsField])(writer: JsonWriter[T]): List[JsField]", "member" : "spray.json.ProductFormats.productElement2Field", "link" : "ostinato\/chess\/server\/JsonSupport.html#productElement2Field[T](fieldName:String,p:Product,ix:Int,rest:List[spray.json.JsField])(implicitwriter:spray.json.JsonWriter[T]):List[spray.json.JsField]", "kind" : "def"}, {"label" : "jsonFormat0", "tail" : "(construct: () ⇒ T): RootJsonFormat[T]", "member" : "spray.json.ProductFormats.jsonFormat0", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat0[T](construct:()=>T):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20, P21, P22) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String, fieldName10: String, fieldName11: String, fieldName12: String, fieldName13: String, fieldName14: String, fieldName15: String, fieldName16: String, fieldName17: String, fieldName18: String, fieldName19: String, fieldName20: String, fieldName21: String, fieldName22: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16], arg16: JF[P17], arg17: JF[P18], arg18: JF[P19], arg19: JF[P20], arg20: JF[P21], arg21: JF[P22]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,P20,P21,P22,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,P20,P21,P22)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String,fieldName10:String,fieldName11:String,fieldName12:String,fieldName13:String,fieldName14:String,fieldName15:String,fieldName16:String,fieldName17:String,fieldName18:String,fieldName19:String,fieldName20:String,fieldName21:String,fieldName22:String)(implicitevidence$507:ProductFormatsInstances.this.JF[P1],implicitevidence$508:ProductFormatsInstances.this.JF[P2],implicitevidence$509:ProductFormatsInstances.this.JF[P3],implicitevidence$510:ProductFormatsInstances.this.JF[P4],implicitevidence$511:ProductFormatsInstances.this.JF[P5],implicitevidence$512:ProductFormatsInstances.this.JF[P6],implicitevidence$513:ProductFormatsInstances.this.JF[P7],implicitevidence$514:ProductFormatsInstances.this.JF[P8],implicitevidence$515:ProductFormatsInstances.this.JF[P9],implicitevidence$516:ProductFormatsInstances.this.JF[P10],implicitevidence$517:ProductFormatsInstances.this.JF[P11],implicitevidence$518:ProductFormatsInstances.this.JF[P12],implicitevidence$519:ProductFormatsInstances.this.JF[P13],implicitevidence$520:ProductFormatsInstances.this.JF[P14],implicitevidence$521:ProductFormatsInstances.this.JF[P15],implicitevidence$522:ProductFormatsInstances.this.JF[P16],implicitevidence$523:ProductFormatsInstances.this.JF[P17],implicitevidence$524:ProductFormatsInstances.this.JF[P18],implicitevidence$525:ProductFormatsInstances.this.JF[P19],implicitevidence$526:ProductFormatsInstances.this.JF[P20],implicitevidence$527:ProductFormatsInstances.this.JF[P21],implicitevidence$528:ProductFormatsInstances.this.JF[P22]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat22", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20, P21, P22) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16], arg16: JF[P17], arg17: JF[P18], arg18: JF[P19], arg19: JF[P20], arg20: JF[P21], arg21: JF[P22], arg22: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat22", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat22[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,P20,P21,P22,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,P20,P21,P22)=>T)(implicitevidence$484:ProductFormatsInstances.this.JF[P1],implicitevidence$485:ProductFormatsInstances.this.JF[P2],implicitevidence$486:ProductFormatsInstances.this.JF[P3],implicitevidence$487:ProductFormatsInstances.this.JF[P4],implicitevidence$488:ProductFormatsInstances.this.JF[P5],implicitevidence$489:ProductFormatsInstances.this.JF[P6],implicitevidence$490:ProductFormatsInstances.this.JF[P7],implicitevidence$491:ProductFormatsInstances.this.JF[P8],implicitevidence$492:ProductFormatsInstances.this.JF[P9],implicitevidence$493:ProductFormatsInstances.this.JF[P10],implicitevidence$494:ProductFormatsInstances.this.JF[P11],implicitevidence$495:ProductFormatsInstances.this.JF[P12],implicitevidence$496:ProductFormatsInstances.this.JF[P13],implicitevidence$497:ProductFormatsInstances.this.JF[P14],implicitevidence$498:ProductFormatsInstances.this.JF[P15],implicitevidence$499:ProductFormatsInstances.this.JF[P16],implicitevidence$500:ProductFormatsInstances.this.JF[P17],implicitevidence$501:ProductFormatsInstances.this.JF[P18],implicitevidence$502:ProductFormatsInstances.this.JF[P19],implicitevidence$503:ProductFormatsInstances.this.JF[P20],implicitevidence$504:ProductFormatsInstances.this.JF[P21],implicitevidence$505:ProductFormatsInstances.this.JF[P22],implicitevidence$506:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20, P21) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String, fieldName10: String, fieldName11: String, fieldName12: String, fieldName13: String, fieldName14: String, fieldName15: String, fieldName16: String, fieldName17: String, fieldName18: String, fieldName19: String, fieldName20: String, fieldName21: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16], arg16: JF[P17], arg17: JF[P18], arg18: JF[P19], arg19: JF[P20], arg20: JF[P21]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,P20,P21,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,P20,P21)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String,fieldName10:String,fieldName11:String,fieldName12:String,fieldName13:String,fieldName14:String,fieldName15:String,fieldName16:String,fieldName17:String,fieldName18:String,fieldName19:String,fieldName20:String,fieldName21:String)(implicitevidence$463:ProductFormatsInstances.this.JF[P1],implicitevidence$464:ProductFormatsInstances.this.JF[P2],implicitevidence$465:ProductFormatsInstances.this.JF[P3],implicitevidence$466:ProductFormatsInstances.this.JF[P4],implicitevidence$467:ProductFormatsInstances.this.JF[P5],implicitevidence$468:ProductFormatsInstances.this.JF[P6],implicitevidence$469:ProductFormatsInstances.this.JF[P7],implicitevidence$470:ProductFormatsInstances.this.JF[P8],implicitevidence$471:ProductFormatsInstances.this.JF[P9],implicitevidence$472:ProductFormatsInstances.this.JF[P10],implicitevidence$473:ProductFormatsInstances.this.JF[P11],implicitevidence$474:ProductFormatsInstances.this.JF[P12],implicitevidence$475:ProductFormatsInstances.this.JF[P13],implicitevidence$476:ProductFormatsInstances.this.JF[P14],implicitevidence$477:ProductFormatsInstances.this.JF[P15],implicitevidence$478:ProductFormatsInstances.this.JF[P16],implicitevidence$479:ProductFormatsInstances.this.JF[P17],implicitevidence$480:ProductFormatsInstances.this.JF[P18],implicitevidence$481:ProductFormatsInstances.this.JF[P19],implicitevidence$482:ProductFormatsInstances.this.JF[P20],implicitevidence$483:ProductFormatsInstances.this.JF[P21]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat21", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20, P21) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16], arg16: JF[P17], arg17: JF[P18], arg18: JF[P19], arg19: JF[P20], arg20: JF[P21], arg21: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat21", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat21[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,P20,P21,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,P20,P21)=>T)(implicitevidence$441:ProductFormatsInstances.this.JF[P1],implicitevidence$442:ProductFormatsInstances.this.JF[P2],implicitevidence$443:ProductFormatsInstances.this.JF[P3],implicitevidence$444:ProductFormatsInstances.this.JF[P4],implicitevidence$445:ProductFormatsInstances.this.JF[P5],implicitevidence$446:ProductFormatsInstances.this.JF[P6],implicitevidence$447:ProductFormatsInstances.this.JF[P7],implicitevidence$448:ProductFormatsInstances.this.JF[P8],implicitevidence$449:ProductFormatsInstances.this.JF[P9],implicitevidence$450:ProductFormatsInstances.this.JF[P10],implicitevidence$451:ProductFormatsInstances.this.JF[P11],implicitevidence$452:ProductFormatsInstances.this.JF[P12],implicitevidence$453:ProductFormatsInstances.this.JF[P13],implicitevidence$454:ProductFormatsInstances.this.JF[P14],implicitevidence$455:ProductFormatsInstances.this.JF[P15],implicitevidence$456:ProductFormatsInstances.this.JF[P16],implicitevidence$457:ProductFormatsInstances.this.JF[P17],implicitevidence$458:ProductFormatsInstances.this.JF[P18],implicitevidence$459:ProductFormatsInstances.this.JF[P19],implicitevidence$460:ProductFormatsInstances.this.JF[P20],implicitevidence$461:ProductFormatsInstances.this.JF[P21],implicitevidence$462:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String, fieldName10: String, fieldName11: String, fieldName12: String, fieldName13: String, fieldName14: String, fieldName15: String, fieldName16: String, fieldName17: String, fieldName18: String, fieldName19: String, fieldName20: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16], arg16: JF[P17], arg17: JF[P18], arg18: JF[P19], arg19: JF[P20]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,P20,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,P20)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String,fieldName10:String,fieldName11:String,fieldName12:String,fieldName13:String,fieldName14:String,fieldName15:String,fieldName16:String,fieldName17:String,fieldName18:String,fieldName19:String,fieldName20:String)(implicitevidence$421:ProductFormatsInstances.this.JF[P1],implicitevidence$422:ProductFormatsInstances.this.JF[P2],implicitevidence$423:ProductFormatsInstances.this.JF[P3],implicitevidence$424:ProductFormatsInstances.this.JF[P4],implicitevidence$425:ProductFormatsInstances.this.JF[P5],implicitevidence$426:ProductFormatsInstances.this.JF[P6],implicitevidence$427:ProductFormatsInstances.this.JF[P7],implicitevidence$428:ProductFormatsInstances.this.JF[P8],implicitevidence$429:ProductFormatsInstances.this.JF[P9],implicitevidence$430:ProductFormatsInstances.this.JF[P10],implicitevidence$431:ProductFormatsInstances.this.JF[P11],implicitevidence$432:ProductFormatsInstances.this.JF[P12],implicitevidence$433:ProductFormatsInstances.this.JF[P13],implicitevidence$434:ProductFormatsInstances.this.JF[P14],implicitevidence$435:ProductFormatsInstances.this.JF[P15],implicitevidence$436:ProductFormatsInstances.this.JF[P16],implicitevidence$437:ProductFormatsInstances.this.JF[P17],implicitevidence$438:ProductFormatsInstances.this.JF[P18],implicitevidence$439:ProductFormatsInstances.this.JF[P19],implicitevidence$440:ProductFormatsInstances.this.JF[P20]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat20", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16], arg16: JF[P17], arg17: JF[P18], arg18: JF[P19], arg19: JF[P20], arg20: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat20", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat20[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,P20,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,P20)=>T)(implicitevidence$400:ProductFormatsInstances.this.JF[P1],implicitevidence$401:ProductFormatsInstances.this.JF[P2],implicitevidence$402:ProductFormatsInstances.this.JF[P3],implicitevidence$403:ProductFormatsInstances.this.JF[P4],implicitevidence$404:ProductFormatsInstances.this.JF[P5],implicitevidence$405:ProductFormatsInstances.this.JF[P6],implicitevidence$406:ProductFormatsInstances.this.JF[P7],implicitevidence$407:ProductFormatsInstances.this.JF[P8],implicitevidence$408:ProductFormatsInstances.this.JF[P9],implicitevidence$409:ProductFormatsInstances.this.JF[P10],implicitevidence$410:ProductFormatsInstances.this.JF[P11],implicitevidence$411:ProductFormatsInstances.this.JF[P12],implicitevidence$412:ProductFormatsInstances.this.JF[P13],implicitevidence$413:ProductFormatsInstances.this.JF[P14],implicitevidence$414:ProductFormatsInstances.this.JF[P15],implicitevidence$415:ProductFormatsInstances.this.JF[P16],implicitevidence$416:ProductFormatsInstances.this.JF[P17],implicitevidence$417:ProductFormatsInstances.this.JF[P18],implicitevidence$418:ProductFormatsInstances.this.JF[P19],implicitevidence$419:ProductFormatsInstances.this.JF[P20],implicitevidence$420:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String, fieldName10: String, fieldName11: String, fieldName12: String, fieldName13: String, fieldName14: String, fieldName15: String, fieldName16: String, fieldName17: String, fieldName18: String, fieldName19: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16], arg16: JF[P17], arg17: JF[P18], arg18: JF[P19]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String,fieldName10:String,fieldName11:String,fieldName12:String,fieldName13:String,fieldName14:String,fieldName15:String,fieldName16:String,fieldName17:String,fieldName18:String,fieldName19:String)(implicitevidence$381:ProductFormatsInstances.this.JF[P1],implicitevidence$382:ProductFormatsInstances.this.JF[P2],implicitevidence$383:ProductFormatsInstances.this.JF[P3],implicitevidence$384:ProductFormatsInstances.this.JF[P4],implicitevidence$385:ProductFormatsInstances.this.JF[P5],implicitevidence$386:ProductFormatsInstances.this.JF[P6],implicitevidence$387:ProductFormatsInstances.this.JF[P7],implicitevidence$388:ProductFormatsInstances.this.JF[P8],implicitevidence$389:ProductFormatsInstances.this.JF[P9],implicitevidence$390:ProductFormatsInstances.this.JF[P10],implicitevidence$391:ProductFormatsInstances.this.JF[P11],implicitevidence$392:ProductFormatsInstances.this.JF[P12],implicitevidence$393:ProductFormatsInstances.this.JF[P13],implicitevidence$394:ProductFormatsInstances.this.JF[P14],implicitevidence$395:ProductFormatsInstances.this.JF[P15],implicitevidence$396:ProductFormatsInstances.this.JF[P16],implicitevidence$397:ProductFormatsInstances.this.JF[P17],implicitevidence$398:ProductFormatsInstances.this.JF[P18],implicitevidence$399:ProductFormatsInstances.this.JF[P19]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat19", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16], arg16: JF[P17], arg17: JF[P18], arg18: JF[P19], arg19: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat19", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat19[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19)=>T)(implicitevidence$361:ProductFormatsInstances.this.JF[P1],implicitevidence$362:ProductFormatsInstances.this.JF[P2],implicitevidence$363:ProductFormatsInstances.this.JF[P3],implicitevidence$364:ProductFormatsInstances.this.JF[P4],implicitevidence$365:ProductFormatsInstances.this.JF[P5],implicitevidence$366:ProductFormatsInstances.this.JF[P6],implicitevidence$367:ProductFormatsInstances.this.JF[P7],implicitevidence$368:ProductFormatsInstances.this.JF[P8],implicitevidence$369:ProductFormatsInstances.this.JF[P9],implicitevidence$370:ProductFormatsInstances.this.JF[P10],implicitevidence$371:ProductFormatsInstances.this.JF[P11],implicitevidence$372:ProductFormatsInstances.this.JF[P12],implicitevidence$373:ProductFormatsInstances.this.JF[P13],implicitevidence$374:ProductFormatsInstances.this.JF[P14],implicitevidence$375:ProductFormatsInstances.this.JF[P15],implicitevidence$376:ProductFormatsInstances.this.JF[P16],implicitevidence$377:ProductFormatsInstances.this.JF[P17],implicitevidence$378:ProductFormatsInstances.this.JF[P18],implicitevidence$379:ProductFormatsInstances.this.JF[P19],implicitevidence$380:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String, fieldName10: String, fieldName11: String, fieldName12: String, fieldName13: String, fieldName14: String, fieldName15: String, fieldName16: String, fieldName17: String, fieldName18: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16], arg16: JF[P17], arg17: JF[P18]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String,fieldName10:String,fieldName11:String,fieldName12:String,fieldName13:String,fieldName14:String,fieldName15:String,fieldName16:String,fieldName17:String,fieldName18:String)(implicitevidence$343:ProductFormatsInstances.this.JF[P1],implicitevidence$344:ProductFormatsInstances.this.JF[P2],implicitevidence$345:ProductFormatsInstances.this.JF[P3],implicitevidence$346:ProductFormatsInstances.this.JF[P4],implicitevidence$347:ProductFormatsInstances.this.JF[P5],implicitevidence$348:ProductFormatsInstances.this.JF[P6],implicitevidence$349:ProductFormatsInstances.this.JF[P7],implicitevidence$350:ProductFormatsInstances.this.JF[P8],implicitevidence$351:ProductFormatsInstances.this.JF[P9],implicitevidence$352:ProductFormatsInstances.this.JF[P10],implicitevidence$353:ProductFormatsInstances.this.JF[P11],implicitevidence$354:ProductFormatsInstances.this.JF[P12],implicitevidence$355:ProductFormatsInstances.this.JF[P13],implicitevidence$356:ProductFormatsInstances.this.JF[P14],implicitevidence$357:ProductFormatsInstances.this.JF[P15],implicitevidence$358:ProductFormatsInstances.this.JF[P16],implicitevidence$359:ProductFormatsInstances.this.JF[P17],implicitevidence$360:ProductFormatsInstances.this.JF[P18]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat18", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16], arg16: JF[P17], arg17: JF[P18], arg18: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat18", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat18[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18)=>T)(implicitevidence$324:ProductFormatsInstances.this.JF[P1],implicitevidence$325:ProductFormatsInstances.this.JF[P2],implicitevidence$326:ProductFormatsInstances.this.JF[P3],implicitevidence$327:ProductFormatsInstances.this.JF[P4],implicitevidence$328:ProductFormatsInstances.this.JF[P5],implicitevidence$329:ProductFormatsInstances.this.JF[P6],implicitevidence$330:ProductFormatsInstances.this.JF[P7],implicitevidence$331:ProductFormatsInstances.this.JF[P8],implicitevidence$332:ProductFormatsInstances.this.JF[P9],implicitevidence$333:ProductFormatsInstances.this.JF[P10],implicitevidence$334:ProductFormatsInstances.this.JF[P11],implicitevidence$335:ProductFormatsInstances.this.JF[P12],implicitevidence$336:ProductFormatsInstances.this.JF[P13],implicitevidence$337:ProductFormatsInstances.this.JF[P14],implicitevidence$338:ProductFormatsInstances.this.JF[P15],implicitevidence$339:ProductFormatsInstances.this.JF[P16],implicitevidence$340:ProductFormatsInstances.this.JF[P17],implicitevidence$341:ProductFormatsInstances.this.JF[P18],implicitevidence$342:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String, fieldName10: String, fieldName11: String, fieldName12: String, fieldName13: String, fieldName14: String, fieldName15: String, fieldName16: String, fieldName17: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16], arg16: JF[P17]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String,fieldName10:String,fieldName11:String,fieldName12:String,fieldName13:String,fieldName14:String,fieldName15:String,fieldName16:String,fieldName17:String)(implicitevidence$307:ProductFormatsInstances.this.JF[P1],implicitevidence$308:ProductFormatsInstances.this.JF[P2],implicitevidence$309:ProductFormatsInstances.this.JF[P3],implicitevidence$310:ProductFormatsInstances.this.JF[P4],implicitevidence$311:ProductFormatsInstances.this.JF[P5],implicitevidence$312:ProductFormatsInstances.this.JF[P6],implicitevidence$313:ProductFormatsInstances.this.JF[P7],implicitevidence$314:ProductFormatsInstances.this.JF[P8],implicitevidence$315:ProductFormatsInstances.this.JF[P9],implicitevidence$316:ProductFormatsInstances.this.JF[P10],implicitevidence$317:ProductFormatsInstances.this.JF[P11],implicitevidence$318:ProductFormatsInstances.this.JF[P12],implicitevidence$319:ProductFormatsInstances.this.JF[P13],implicitevidence$320:ProductFormatsInstances.this.JF[P14],implicitevidence$321:ProductFormatsInstances.this.JF[P15],implicitevidence$322:ProductFormatsInstances.this.JF[P16],implicitevidence$323:ProductFormatsInstances.this.JF[P17]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat17", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16], arg16: JF[P17], arg17: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat17", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat17[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17)=>T)(implicitevidence$289:ProductFormatsInstances.this.JF[P1],implicitevidence$290:ProductFormatsInstances.this.JF[P2],implicitevidence$291:ProductFormatsInstances.this.JF[P3],implicitevidence$292:ProductFormatsInstances.this.JF[P4],implicitevidence$293:ProductFormatsInstances.this.JF[P5],implicitevidence$294:ProductFormatsInstances.this.JF[P6],implicitevidence$295:ProductFormatsInstances.this.JF[P7],implicitevidence$296:ProductFormatsInstances.this.JF[P8],implicitevidence$297:ProductFormatsInstances.this.JF[P9],implicitevidence$298:ProductFormatsInstances.this.JF[P10],implicitevidence$299:ProductFormatsInstances.this.JF[P11],implicitevidence$300:ProductFormatsInstances.this.JF[P12],implicitevidence$301:ProductFormatsInstances.this.JF[P13],implicitevidence$302:ProductFormatsInstances.this.JF[P14],implicitevidence$303:ProductFormatsInstances.this.JF[P15],implicitevidence$304:ProductFormatsInstances.this.JF[P16],implicitevidence$305:ProductFormatsInstances.this.JF[P17],implicitevidence$306:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String, fieldName10: String, fieldName11: String, fieldName12: String, fieldName13: String, fieldName14: String, fieldName15: String, fieldName16: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String,fieldName10:String,fieldName11:String,fieldName12:String,fieldName13:String,fieldName14:String,fieldName15:String,fieldName16:String)(implicitevidence$273:ProductFormatsInstances.this.JF[P1],implicitevidence$274:ProductFormatsInstances.this.JF[P2],implicitevidence$275:ProductFormatsInstances.this.JF[P3],implicitevidence$276:ProductFormatsInstances.this.JF[P4],implicitevidence$277:ProductFormatsInstances.this.JF[P5],implicitevidence$278:ProductFormatsInstances.this.JF[P6],implicitevidence$279:ProductFormatsInstances.this.JF[P7],implicitevidence$280:ProductFormatsInstances.this.JF[P8],implicitevidence$281:ProductFormatsInstances.this.JF[P9],implicitevidence$282:ProductFormatsInstances.this.JF[P10],implicitevidence$283:ProductFormatsInstances.this.JF[P11],implicitevidence$284:ProductFormatsInstances.this.JF[P12],implicitevidence$285:ProductFormatsInstances.this.JF[P13],implicitevidence$286:ProductFormatsInstances.this.JF[P14],implicitevidence$287:ProductFormatsInstances.this.JF[P15],implicitevidence$288:ProductFormatsInstances.this.JF[P16]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat16", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16], arg16: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat16", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat16[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16)=>T)(implicitevidence$256:ProductFormatsInstances.this.JF[P1],implicitevidence$257:ProductFormatsInstances.this.JF[P2],implicitevidence$258:ProductFormatsInstances.this.JF[P3],implicitevidence$259:ProductFormatsInstances.this.JF[P4],implicitevidence$260:ProductFormatsInstances.this.JF[P5],implicitevidence$261:ProductFormatsInstances.this.JF[P6],implicitevidence$262:ProductFormatsInstances.this.JF[P7],implicitevidence$263:ProductFormatsInstances.this.JF[P8],implicitevidence$264:ProductFormatsInstances.this.JF[P9],implicitevidence$265:ProductFormatsInstances.this.JF[P10],implicitevidence$266:ProductFormatsInstances.this.JF[P11],implicitevidence$267:ProductFormatsInstances.this.JF[P12],implicitevidence$268:ProductFormatsInstances.this.JF[P13],implicitevidence$269:ProductFormatsInstances.this.JF[P14],implicitevidence$270:ProductFormatsInstances.this.JF[P15],implicitevidence$271:ProductFormatsInstances.this.JF[P16],implicitevidence$272:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String, fieldName10: String, fieldName11: String, fieldName12: String, fieldName13: String, fieldName14: String, fieldName15: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String,fieldName10:String,fieldName11:String,fieldName12:String,fieldName13:String,fieldName14:String,fieldName15:String)(implicitevidence$241:ProductFormatsInstances.this.JF[P1],implicitevidence$242:ProductFormatsInstances.this.JF[P2],implicitevidence$243:ProductFormatsInstances.this.JF[P3],implicitevidence$244:ProductFormatsInstances.this.JF[P4],implicitevidence$245:ProductFormatsInstances.this.JF[P5],implicitevidence$246:ProductFormatsInstances.this.JF[P6],implicitevidence$247:ProductFormatsInstances.this.JF[P7],implicitevidence$248:ProductFormatsInstances.this.JF[P8],implicitevidence$249:ProductFormatsInstances.this.JF[P9],implicitevidence$250:ProductFormatsInstances.this.JF[P10],implicitevidence$251:ProductFormatsInstances.this.JF[P11],implicitevidence$252:ProductFormatsInstances.this.JF[P12],implicitevidence$253:ProductFormatsInstances.this.JF[P13],implicitevidence$254:ProductFormatsInstances.this.JF[P14],implicitevidence$255:ProductFormatsInstances.this.JF[P15]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat15", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat15", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat15[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15)=>T)(implicitevidence$225:ProductFormatsInstances.this.JF[P1],implicitevidence$226:ProductFormatsInstances.this.JF[P2],implicitevidence$227:ProductFormatsInstances.this.JF[P3],implicitevidence$228:ProductFormatsInstances.this.JF[P4],implicitevidence$229:ProductFormatsInstances.this.JF[P5],implicitevidence$230:ProductFormatsInstances.this.JF[P6],implicitevidence$231:ProductFormatsInstances.this.JF[P7],implicitevidence$232:ProductFormatsInstances.this.JF[P8],implicitevidence$233:ProductFormatsInstances.this.JF[P9],implicitevidence$234:ProductFormatsInstances.this.JF[P10],implicitevidence$235:ProductFormatsInstances.this.JF[P11],implicitevidence$236:ProductFormatsInstances.this.JF[P12],implicitevidence$237:ProductFormatsInstances.this.JF[P13],implicitevidence$238:ProductFormatsInstances.this.JF[P14],implicitevidence$239:ProductFormatsInstances.this.JF[P15],implicitevidence$240:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String, fieldName10: String, fieldName11: String, fieldName12: String, fieldName13: String, fieldName14: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String,fieldName10:String,fieldName11:String,fieldName12:String,fieldName13:String,fieldName14:String)(implicitevidence$211:ProductFormatsInstances.this.JF[P1],implicitevidence$212:ProductFormatsInstances.this.JF[P2],implicitevidence$213:ProductFormatsInstances.this.JF[P3],implicitevidence$214:ProductFormatsInstances.this.JF[P4],implicitevidence$215:ProductFormatsInstances.this.JF[P5],implicitevidence$216:ProductFormatsInstances.this.JF[P6],implicitevidence$217:ProductFormatsInstances.this.JF[P7],implicitevidence$218:ProductFormatsInstances.this.JF[P8],implicitevidence$219:ProductFormatsInstances.this.JF[P9],implicitevidence$220:ProductFormatsInstances.this.JF[P10],implicitevidence$221:ProductFormatsInstances.this.JF[P11],implicitevidence$222:ProductFormatsInstances.this.JF[P12],implicitevidence$223:ProductFormatsInstances.this.JF[P13],implicitevidence$224:ProductFormatsInstances.this.JF[P14]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat14", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat14", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat14[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14)=>T)(implicitevidence$196:ProductFormatsInstances.this.JF[P1],implicitevidence$197:ProductFormatsInstances.this.JF[P2],implicitevidence$198:ProductFormatsInstances.this.JF[P3],implicitevidence$199:ProductFormatsInstances.this.JF[P4],implicitevidence$200:ProductFormatsInstances.this.JF[P5],implicitevidence$201:ProductFormatsInstances.this.JF[P6],implicitevidence$202:ProductFormatsInstances.this.JF[P7],implicitevidence$203:ProductFormatsInstances.this.JF[P8],implicitevidence$204:ProductFormatsInstances.this.JF[P9],implicitevidence$205:ProductFormatsInstances.this.JF[P10],implicitevidence$206:ProductFormatsInstances.this.JF[P11],implicitevidence$207:ProductFormatsInstances.this.JF[P12],implicitevidence$208:ProductFormatsInstances.this.JF[P13],implicitevidence$209:ProductFormatsInstances.this.JF[P14],implicitevidence$210:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String, fieldName10: String, fieldName11: String, fieldName12: String, fieldName13: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String,fieldName10:String,fieldName11:String,fieldName12:String,fieldName13:String)(implicitevidence$183:ProductFormatsInstances.this.JF[P1],implicitevidence$184:ProductFormatsInstances.this.JF[P2],implicitevidence$185:ProductFormatsInstances.this.JF[P3],implicitevidence$186:ProductFormatsInstances.this.JF[P4],implicitevidence$187:ProductFormatsInstances.this.JF[P5],implicitevidence$188:ProductFormatsInstances.this.JF[P6],implicitevidence$189:ProductFormatsInstances.this.JF[P7],implicitevidence$190:ProductFormatsInstances.this.JF[P8],implicitevidence$191:ProductFormatsInstances.this.JF[P9],implicitevidence$192:ProductFormatsInstances.this.JF[P10],implicitevidence$193:ProductFormatsInstances.this.JF[P11],implicitevidence$194:ProductFormatsInstances.this.JF[P12],implicitevidence$195:ProductFormatsInstances.this.JF[P13]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat13", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat13", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat13[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13)=>T)(implicitevidence$169:ProductFormatsInstances.this.JF[P1],implicitevidence$170:ProductFormatsInstances.this.JF[P2],implicitevidence$171:ProductFormatsInstances.this.JF[P3],implicitevidence$172:ProductFormatsInstances.this.JF[P4],implicitevidence$173:ProductFormatsInstances.this.JF[P5],implicitevidence$174:ProductFormatsInstances.this.JF[P6],implicitevidence$175:ProductFormatsInstances.this.JF[P7],implicitevidence$176:ProductFormatsInstances.this.JF[P8],implicitevidence$177:ProductFormatsInstances.this.JF[P9],implicitevidence$178:ProductFormatsInstances.this.JF[P10],implicitevidence$179:ProductFormatsInstances.this.JF[P11],implicitevidence$180:ProductFormatsInstances.this.JF[P12],implicitevidence$181:ProductFormatsInstances.this.JF[P13],implicitevidence$182:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String, fieldName10: String, fieldName11: String, fieldName12: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String,fieldName10:String,fieldName11:String,fieldName12:String)(implicitevidence$157:ProductFormatsInstances.this.JF[P1],implicitevidence$158:ProductFormatsInstances.this.JF[P2],implicitevidence$159:ProductFormatsInstances.this.JF[P3],implicitevidence$160:ProductFormatsInstances.this.JF[P4],implicitevidence$161:ProductFormatsInstances.this.JF[P5],implicitevidence$162:ProductFormatsInstances.this.JF[P6],implicitevidence$163:ProductFormatsInstances.this.JF[P7],implicitevidence$164:ProductFormatsInstances.this.JF[P8],implicitevidence$165:ProductFormatsInstances.this.JF[P9],implicitevidence$166:ProductFormatsInstances.this.JF[P10],implicitevidence$167:ProductFormatsInstances.this.JF[P11],implicitevidence$168:ProductFormatsInstances.this.JF[P12]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat12", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat12", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat12[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12)=>T)(implicitevidence$144:ProductFormatsInstances.this.JF[P1],implicitevidence$145:ProductFormatsInstances.this.JF[P2],implicitevidence$146:ProductFormatsInstances.this.JF[P3],implicitevidence$147:ProductFormatsInstances.this.JF[P4],implicitevidence$148:ProductFormatsInstances.this.JF[P5],implicitevidence$149:ProductFormatsInstances.this.JF[P6],implicitevidence$150:ProductFormatsInstances.this.JF[P7],implicitevidence$151:ProductFormatsInstances.this.JF[P8],implicitevidence$152:ProductFormatsInstances.this.JF[P9],implicitevidence$153:ProductFormatsInstances.this.JF[P10],implicitevidence$154:ProductFormatsInstances.this.JF[P11],implicitevidence$155:ProductFormatsInstances.this.JF[P12],implicitevidence$156:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String, fieldName10: String, fieldName11: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String,fieldName10:String,fieldName11:String)(implicitevidence$133:ProductFormatsInstances.this.JF[P1],implicitevidence$134:ProductFormatsInstances.this.JF[P2],implicitevidence$135:ProductFormatsInstances.this.JF[P3],implicitevidence$136:ProductFormatsInstances.this.JF[P4],implicitevidence$137:ProductFormatsInstances.this.JF[P5],implicitevidence$138:ProductFormatsInstances.this.JF[P6],implicitevidence$139:ProductFormatsInstances.this.JF[P7],implicitevidence$140:ProductFormatsInstances.this.JF[P8],implicitevidence$141:ProductFormatsInstances.this.JF[P9],implicitevidence$142:ProductFormatsInstances.this.JF[P10],implicitevidence$143:ProductFormatsInstances.this.JF[P11]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat11", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat11", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat11[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11)=>T)(implicitevidence$121:ProductFormatsInstances.this.JF[P1],implicitevidence$122:ProductFormatsInstances.this.JF[P2],implicitevidence$123:ProductFormatsInstances.this.JF[P3],implicitevidence$124:ProductFormatsInstances.this.JF[P4],implicitevidence$125:ProductFormatsInstances.this.JF[P5],implicitevidence$126:ProductFormatsInstances.this.JF[P6],implicitevidence$127:ProductFormatsInstances.this.JF[P7],implicitevidence$128:ProductFormatsInstances.this.JF[P8],implicitevidence$129:ProductFormatsInstances.this.JF[P9],implicitevidence$130:ProductFormatsInstances.this.JF[P10],implicitevidence$131:ProductFormatsInstances.this.JF[P11],implicitevidence$132:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String, fieldName10: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String,fieldName10:String)(implicitevidence$111:ProductFormatsInstances.this.JF[P1],implicitevidence$112:ProductFormatsInstances.this.JF[P2],implicitevidence$113:ProductFormatsInstances.this.JF[P3],implicitevidence$114:ProductFormatsInstances.this.JF[P4],implicitevidence$115:ProductFormatsInstances.this.JF[P5],implicitevidence$116:ProductFormatsInstances.this.JF[P6],implicitevidence$117:ProductFormatsInstances.this.JF[P7],implicitevidence$118:ProductFormatsInstances.this.JF[P8],implicitevidence$119:ProductFormatsInstances.this.JF[P9],implicitevidence$120:ProductFormatsInstances.this.JF[P10]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat10", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat10", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat10[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10)=>T)(implicitevidence$100:ProductFormatsInstances.this.JF[P1],implicitevidence$101:ProductFormatsInstances.this.JF[P2],implicitevidence$102:ProductFormatsInstances.this.JF[P3],implicitevidence$103:ProductFormatsInstances.this.JF[P4],implicitevidence$104:ProductFormatsInstances.this.JF[P5],implicitevidence$105:ProductFormatsInstances.this.JF[P6],implicitevidence$106:ProductFormatsInstances.this.JF[P7],implicitevidence$107:ProductFormatsInstances.this.JF[P8],implicitevidence$108:ProductFormatsInstances.this.JF[P9],implicitevidence$109:ProductFormatsInstances.this.JF[P10],implicitevidence$110:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String)(implicitevidence$91:ProductFormatsInstances.this.JF[P1],implicitevidence$92:ProductFormatsInstances.this.JF[P2],implicitevidence$93:ProductFormatsInstances.this.JF[P3],implicitevidence$94:ProductFormatsInstances.this.JF[P4],implicitevidence$95:ProductFormatsInstances.this.JF[P5],implicitevidence$96:ProductFormatsInstances.this.JF[P6],implicitevidence$97:ProductFormatsInstances.this.JF[P7],implicitevidence$98:ProductFormatsInstances.this.JF[P8],implicitevidence$99:ProductFormatsInstances.this.JF[P9]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat9", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat9", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat9[P1,P2,P3,P4,P5,P6,P7,P8,P9,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9)=>T)(implicitevidence$81:ProductFormatsInstances.this.JF[P1],implicitevidence$82:ProductFormatsInstances.this.JF[P2],implicitevidence$83:ProductFormatsInstances.this.JF[P3],implicitevidence$84:ProductFormatsInstances.this.JF[P4],implicitevidence$85:ProductFormatsInstances.this.JF[P5],implicitevidence$86:ProductFormatsInstances.this.JF[P6],implicitevidence$87:ProductFormatsInstances.this.JF[P7],implicitevidence$88:ProductFormatsInstances.this.JF[P8],implicitevidence$89:ProductFormatsInstances.this.JF[P9],implicitevidence$90:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String)(implicitevidence$73:ProductFormatsInstances.this.JF[P1],implicitevidence$74:ProductFormatsInstances.this.JF[P2],implicitevidence$75:ProductFormatsInstances.this.JF[P3],implicitevidence$76:ProductFormatsInstances.this.JF[P4],implicitevidence$77:ProductFormatsInstances.this.JF[P5],implicitevidence$78:ProductFormatsInstances.this.JF[P6],implicitevidence$79:ProductFormatsInstances.this.JF[P7],implicitevidence$80:ProductFormatsInstances.this.JF[P8]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat8", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat8", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat8[P1,P2,P3,P4,P5,P6,P7,P8,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8)=>T)(implicitevidence$64:ProductFormatsInstances.this.JF[P1],implicitevidence$65:ProductFormatsInstances.this.JF[P2],implicitevidence$66:ProductFormatsInstances.this.JF[P3],implicitevidence$67:ProductFormatsInstances.this.JF[P4],implicitevidence$68:ProductFormatsInstances.this.JF[P5],implicitevidence$69:ProductFormatsInstances.this.JF[P6],implicitevidence$70:ProductFormatsInstances.this.JF[P7],implicitevidence$71:ProductFormatsInstances.this.JF[P8],implicitevidence$72:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String)(implicitevidence$57:ProductFormatsInstances.this.JF[P1],implicitevidence$58:ProductFormatsInstances.this.JF[P2],implicitevidence$59:ProductFormatsInstances.this.JF[P3],implicitevidence$60:ProductFormatsInstances.this.JF[P4],implicitevidence$61:ProductFormatsInstances.this.JF[P5],implicitevidence$62:ProductFormatsInstances.this.JF[P6],implicitevidence$63:ProductFormatsInstances.this.JF[P7]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat7", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat7", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat7[P1,P2,P3,P4,P5,P6,P7,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7)=>T)(implicitevidence$49:ProductFormatsInstances.this.JF[P1],implicitevidence$50:ProductFormatsInstances.this.JF[P2],implicitevidence$51:ProductFormatsInstances.this.JF[P3],implicitevidence$52:ProductFormatsInstances.this.JF[P4],implicitevidence$53:ProductFormatsInstances.this.JF[P5],implicitevidence$54:ProductFormatsInstances.this.JF[P6],implicitevidence$55:ProductFormatsInstances.this.JF[P7],implicitevidence$56:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat[P1,P2,P3,P4,P5,P6,T<:Product](construct:(P1,P2,P3,P4,P5,P6)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String)(implicitevidence$43:ProductFormatsInstances.this.JF[P1],implicitevidence$44:ProductFormatsInstances.this.JF[P2],implicitevidence$45:ProductFormatsInstances.this.JF[P3],implicitevidence$46:ProductFormatsInstances.this.JF[P4],implicitevidence$47:ProductFormatsInstances.this.JF[P5],implicitevidence$48:ProductFormatsInstances.this.JF[P6]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat6", "tail" : "(construct: (P1, P2, P3, P4, P5, P6) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat6", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat6[P1,P2,P3,P4,P5,P6,T<:Product](construct:(P1,P2,P3,P4,P5,P6)=>T)(implicitevidence$36:ProductFormatsInstances.this.JF[P1],implicitevidence$37:ProductFormatsInstances.this.JF[P2],implicitevidence$38:ProductFormatsInstances.this.JF[P3],implicitevidence$39:ProductFormatsInstances.this.JF[P4],implicitevidence$40:ProductFormatsInstances.this.JF[P5],implicitevidence$41:ProductFormatsInstances.this.JF[P6],implicitevidence$42:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat[P1,P2,P3,P4,P5,T<:Product](construct:(P1,P2,P3,P4,P5)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String)(implicitevidence$31:ProductFormatsInstances.this.JF[P1],implicitevidence$32:ProductFormatsInstances.this.JF[P2],implicitevidence$33:ProductFormatsInstances.this.JF[P3],implicitevidence$34:ProductFormatsInstances.this.JF[P4],implicitevidence$35:ProductFormatsInstances.this.JF[P5]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat5", "tail" : "(construct: (P1, P2, P3, P4, P5) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat5", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat5[P1,P2,P3,P4,P5,T<:Product](construct:(P1,P2,P3,P4,P5)=>T)(implicitevidence$25:ProductFormatsInstances.this.JF[P1],implicitevidence$26:ProductFormatsInstances.this.JF[P2],implicitevidence$27:ProductFormatsInstances.this.JF[P3],implicitevidence$28:ProductFormatsInstances.this.JF[P4],implicitevidence$29:ProductFormatsInstances.this.JF[P5],implicitevidence$30:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat[P1,P2,P3,P4,T<:Product](construct:(P1,P2,P3,P4)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String)(implicitevidence$21:ProductFormatsInstances.this.JF[P1],implicitevidence$22:ProductFormatsInstances.this.JF[P2],implicitevidence$23:ProductFormatsInstances.this.JF[P3],implicitevidence$24:ProductFormatsInstances.this.JF[P4]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat4", "tail" : "(construct: (P1, P2, P3, P4) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat4", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat4[P1,P2,P3,P4,T<:Product](construct:(P1,P2,P3,P4)=>T)(implicitevidence$16:ProductFormatsInstances.this.JF[P1],implicitevidence$17:ProductFormatsInstances.this.JF[P2],implicitevidence$18:ProductFormatsInstances.this.JF[P3],implicitevidence$19:ProductFormatsInstances.this.JF[P4],implicitevidence$20:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat[P1,P2,P3,T<:Product](construct:(P1,P2,P3)=>T,fieldName1:String,fieldName2:String,fieldName3:String)(implicitevidence$13:ProductFormatsInstances.this.JF[P1],implicitevidence$14:ProductFormatsInstances.this.JF[P2],implicitevidence$15:ProductFormatsInstances.this.JF[P3]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat3", "tail" : "(construct: (P1, P2, P3) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat3", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat3[P1,P2,P3,T<:Product](construct:(P1,P2,P3)=>T)(implicitevidence$9:ProductFormatsInstances.this.JF[P1],implicitevidence$10:ProductFormatsInstances.this.JF[P2],implicitevidence$11:ProductFormatsInstances.this.JF[P3],implicitevidence$12:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2) ⇒ T, fieldName1: String, fieldName2: String)(arg0: JF[P1], arg1: JF[P2]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat[P1,P2,T<:Product](construct:(P1,P2)=>T,fieldName1:String,fieldName2:String)(implicitevidence$7:ProductFormatsInstances.this.JF[P1],implicitevidence$8:ProductFormatsInstances.this.JF[P2]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat2", "tail" : "(construct: (P1, P2) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat2", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat2[P1,P2,T<:Product](construct:(P1,P2)=>T)(implicitevidence$4:ProductFormatsInstances.this.JF[P1],implicitevidence$5:ProductFormatsInstances.this.JF[P2],implicitevidence$6:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1) ⇒ T, fieldName1: String)(arg0: JF[P1]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat[P1,T<:Product](construct:P1=>T,fieldName1:String)(implicitevidence$3:ProductFormatsInstances.this.JF[P1]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat1", "tail" : "(construct: (P1) ⇒ T)(arg0: JF[P1], arg1: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat1", "link" : "ostinato\/chess\/server\/JsonSupport.html#jsonFormat1[P1,T<:Product](construct:P1=>T)(implicitevidence$1:ProductFormatsInstances.this.JF[P1],implicitevidence$2:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "viaSeq", "tail" : "(f: (Seq[T]) ⇒ I)(arg0: JsonFormat[T]): RootJsonFormat[I]", "member" : "spray.json.CollectionFormats.viaSeq", "link" : "ostinato\/chess\/server\/JsonSupport.html#viaSeq[I<:Iterable[T],T](f:scala.collection.immutable.Seq[T]=>I)(implicitevidence$17:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[I]", "kind" : "def"}, {"label" : "setFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Set[T]]", "member" : "spray.json.CollectionFormats.setFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#setFormat[T](implicitevidence$16:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[scala.collection.Set[T]]", "kind" : "implicit def"}, {"label" : "linearSeqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[LinearSeq[T]]", "member" : "spray.json.CollectionFormats.linearSeqFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#linearSeqFormat[T](implicitevidence$15:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[scala.collection.LinearSeq[T]]", "kind" : "implicit def"}, {"label" : "indexedSeqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[IndexedSeq[T]]", "member" : "spray.json.CollectionFormats.indexedSeqFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#indexedSeqFormat[T](implicitevidence$14:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[IndexedSeq[T]]", "kind" : "implicit def"}, {"label" : "seqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Seq[T]]", "member" : "spray.json.CollectionFormats.seqFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#seqFormat[T](implicitevidence$13:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[Seq[T]]", "kind" : "implicit def"}, {"label" : "iterableFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Iterable[T]]", "member" : "spray.json.CollectionFormats.iterableFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#iterableFormat[T](implicitevidence$12:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[Iterable[T]]", "kind" : "implicit def"}, {"label" : "vectorFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Vector[T]]", "member" : "spray.json.CollectionFormats.vectorFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#vectorFormat[T](implicitevidence$11:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[Vector[T]]", "kind" : "implicit def"}, {"label" : "immSetFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Set[T]]", "member" : "spray.json.CollectionFormats.immSetFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#immSetFormat[T](implicitevidence$10:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[scala.collection.immutable.Set[T]]", "kind" : "implicit def"}, {"label" : "immLinearSeqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[LinearSeq[T]]", "member" : "spray.json.CollectionFormats.immLinearSeqFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#immLinearSeqFormat[T](implicitevidence$9:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[scala.collection.immutable.LinearSeq[T]]", "kind" : "implicit def"}, {"label" : "immIndexedSeqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[IndexedSeq[T]]", "member" : "spray.json.CollectionFormats.immIndexedSeqFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#immIndexedSeqFormat[T](implicitevidence$8:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[scala.collection.immutable.IndexedSeq[T]]", "kind" : "implicit def"}, {"label" : "immSeqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Seq[T]]", "member" : "spray.json.CollectionFormats.immSeqFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#immSeqFormat[T](implicitevidence$7:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[scala.collection.immutable.Seq[T]]", "kind" : "implicit def"}, {"label" : "immIterableFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Iterable[T]]", "member" : "spray.json.CollectionFormats.immIterableFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#immIterableFormat[T](implicitevidence$6:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[scala.collection.immutable.Iterable[T]]", "kind" : "implicit def"}, {"label" : "mapFormat", "tail" : "(arg0: JsonFormat[K], arg1: JsonFormat[V]): RootJsonFormat[Map[K, V]] { def write(m: Map[K,V]): spray.json.JsObject }", "member" : "spray.json.CollectionFormats.mapFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#mapFormat[K,V](implicitevidence$4:spray.json.JsonFormat[K],implicitevidence$5:spray.json.JsonFormat[V]):spray.json.RootJsonFormat[Map[K,V]]{defwrite(m:Map[K,V]):spray.json.JsObject}", "kind" : "implicit def"}, {"label" : "arrayFormat", "tail" : "(arg0: JsonFormat[T], arg1: ClassManifest[T]): RootJsonFormat[Array[T]] { def write(array: Array[T]): spray.json.JsArray }", "member" : "spray.json.CollectionFormats.arrayFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#arrayFormat[T](implicitevidence$2:spray.json.JsonFormat[T],implicitevidence$3:ClassManifest[T]):spray.json.RootJsonFormat[Array[T]]{defwrite(array:Array[T]):spray.json.JsArray}", "kind" : "implicit def"}, {"label" : "listFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[List[T]] { def write(list: List[T]): spray.json.JsArray }", "member" : "spray.json.CollectionFormats.listFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#listFormat[T](implicitevidence$1:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[List[T]]{defwrite(list:List[T]):spray.json.JsArray}", "kind" : "implicit def"}, {"label" : "tuple7Format", "tail" : "(arg0: JF[A], arg1: JF[B], arg2: JF[C], arg3: JF[D], arg4: JF[E], arg5: JF[F], arg6: JF[G]): RootJsonFormat[(A, B, C, D, E, F, G)] { def write(t: (A, B, C, D, E, F, G)): spray.json.JsArray }", "member" : "spray.json.StandardFormats.tuple7Format", "link" : "ostinato\/chess\/server\/JsonSupport.html#tuple7Format[A,B,C,D,E,F,G](implicitevidence$26:StandardFormats.this.JF[A],implicitevidence$27:StandardFormats.this.JF[B],implicitevidence$28:StandardFormats.this.JF[C],implicitevidence$29:StandardFormats.this.JF[D],implicitevidence$30:StandardFormats.this.JF[E],implicitevidence$31:StandardFormats.this.JF[F],implicitevidence$32:StandardFormats.this.JF[G]):spray.json.RootJsonFormat[(A,B,C,D,E,F,G)]{defwrite(t:(A,B,C,D,E,F,G)):spray.json.JsArray}", "kind" : "implicit def"}, {"label" : "tuple6Format", "tail" : "(arg0: JF[A], arg1: JF[B], arg2: JF[C], arg3: JF[D], arg4: JF[E], arg5: JF[F]): RootJsonFormat[(A, B, C, D, E, F)] { def write(t: (A, B, C, D, E, F)): spray.json.JsArray }", "member" : "spray.json.StandardFormats.tuple6Format", "link" : "ostinato\/chess\/server\/JsonSupport.html#tuple6Format[A,B,C,D,E,F](implicitevidence$20:StandardFormats.this.JF[A],implicitevidence$21:StandardFormats.this.JF[B],implicitevidence$22:StandardFormats.this.JF[C],implicitevidence$23:StandardFormats.this.JF[D],implicitevidence$24:StandardFormats.this.JF[E],implicitevidence$25:StandardFormats.this.JF[F]):spray.json.RootJsonFormat[(A,B,C,D,E,F)]{defwrite(t:(A,B,C,D,E,F)):spray.json.JsArray}", "kind" : "implicit def"}, {"label" : "tuple5Format", "tail" : "(arg0: JF[A], arg1: JF[B], arg2: JF[C], arg3: JF[D], arg4: JF[E]): RootJsonFormat[(A, B, C, D, E)] { def write(t: (A, B, C, D, E)): spray.json.JsArray }", "member" : "spray.json.StandardFormats.tuple5Format", "link" : "ostinato\/chess\/server\/JsonSupport.html#tuple5Format[A,B,C,D,E](implicitevidence$15:StandardFormats.this.JF[A],implicitevidence$16:StandardFormats.this.JF[B],implicitevidence$17:StandardFormats.this.JF[C],implicitevidence$18:StandardFormats.this.JF[D],implicitevidence$19:StandardFormats.this.JF[E]):spray.json.RootJsonFormat[(A,B,C,D,E)]{defwrite(t:(A,B,C,D,E)):spray.json.JsArray}", "kind" : "implicit def"}, {"label" : "tuple4Format", "tail" : "(arg0: JF[A], arg1: JF[B], arg2: JF[C], arg3: JF[D]): RootJsonFormat[(A, B, C, D)] { def write(t: (A, B, C, D)): spray.json.JsArray }", "member" : "spray.json.StandardFormats.tuple4Format", "link" : "ostinato\/chess\/server\/JsonSupport.html#tuple4Format[A,B,C,D](implicitevidence$11:StandardFormats.this.JF[A],implicitevidence$12:StandardFormats.this.JF[B],implicitevidence$13:StandardFormats.this.JF[C],implicitevidence$14:StandardFormats.this.JF[D]):spray.json.RootJsonFormat[(A,B,C,D)]{defwrite(t:(A,B,C,D)):spray.json.JsArray}", "kind" : "implicit def"}, {"label" : "tuple3Format", "tail" : "(arg0: JF[A], arg1: JF[B], arg2: JF[C]): RootJsonFormat[(A, B, C)] { def write(t: (A, B, C)): spray.json.JsArray }", "member" : "spray.json.StandardFormats.tuple3Format", "link" : "ostinato\/chess\/server\/JsonSupport.html#tuple3Format[A,B,C](implicitevidence$8:StandardFormats.this.JF[A],implicitevidence$9:StandardFormats.this.JF[B],implicitevidence$10:StandardFormats.this.JF[C]):spray.json.RootJsonFormat[(A,B,C)]{defwrite(t:(A,B,C)):spray.json.JsArray}", "kind" : "implicit def"}, {"label" : "tuple2Format", "tail" : "(arg0: JF[A], arg1: JF[B]): RootJsonFormat[(A, B)] { def write(t: (A, B)): spray.json.JsArray }", "member" : "spray.json.StandardFormats.tuple2Format", "link" : "ostinato\/chess\/server\/JsonSupport.html#tuple2Format[A,B](implicitevidence$6:StandardFormats.this.JF[A],implicitevidence$7:StandardFormats.this.JF[B]):spray.json.RootJsonFormat[(A,B)]{defwrite(t:(A,B)):spray.json.JsArray}", "kind" : "implicit def"}, {"label" : "tuple1Format", "tail" : "(arg0: JF[A]): JF[(A)]", "member" : "spray.json.StandardFormats.tuple1Format", "link" : "ostinato\/chess\/server\/JsonSupport.html#tuple1Format[A](implicitevidence$5:StandardFormats.this.JF[A]):StandardFormats.this.JF[(A,)]", "kind" : "implicit def"}, {"label" : "eitherFormat", "tail" : "(arg0: JF[A], arg1: JF[B]): JF[Either[A, B]]", "member" : "spray.json.StandardFormats.eitherFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#eitherFormat[A,B](implicitevidence$3:StandardFormats.this.JF[A],implicitevidence$4:StandardFormats.this.JF[B]):StandardFormats.this.JF[Either[A,B]]", "kind" : "implicit def"}, {"label" : "optionFormat", "tail" : "(arg0: JF[T]): JF[Option[T]]", "member" : "spray.json.StandardFormats.optionFormat", "link" : "ostinato\/chess\/server\/JsonSupport.html#optionFormat[T](implicitevidence$1:StandardFormats.this.JF[T]):StandardFormats.this.JF[Option[T]]", "kind" : "implicit def"}, {"label" : "sprayJsValueMarshaller", "tail" : "(printer: JsonPrinter): ToEntityMarshaller[JsValue]", "member" : "akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport.sprayJsValueMarshaller", "link" : "ostinato\/chess\/server\/JsonSupport.html#sprayJsValueMarshaller(implicitprinter:spray.json.JsonPrinter):akka.http.scaladsl.marshalling.ToEntityMarshaller[spray.json.JsValue]", "kind" : "implicit def"}, {"label" : "sprayJsonMarshaller", "tail" : "(writer: RootJsonWriter[T], printer: JsonPrinter): ToEntityMarshaller[T]", "member" : "akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport.sprayJsonMarshaller", "link" : "ostinato\/chess\/server\/JsonSupport.html#sprayJsonMarshaller[T](implicitwriter:spray.json.RootJsonWriter[T],implicitprinter:spray.json.JsonPrinter):akka.http.scaladsl.marshalling.ToEntityMarshaller[T]", "kind" : "implicit def"}, {"label" : "sprayJsonMarshallerConverter", "tail" : "(writer: RootJsonWriter[T])(printer: JsonPrinter): ToEntityMarshaller[T]", "member" : "akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport.sprayJsonMarshallerConverter", "link" : "ostinato\/chess\/server\/JsonSupport.html#sprayJsonMarshallerConverter[T](writer:spray.json.RootJsonWriter[T])(implicitprinter:spray.json.JsonPrinter):akka.http.scaladsl.marshalling.ToEntityMarshaller[T]", "kind" : "implicit def"}, {"label" : "sprayJsonSourceReader", "tail" : "(reader: RootJsonReader[T], support: EntityStreamingSupport): FromEntityUnmarshaller[Source[T, NotUsed]]", "member" : "akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport.sprayJsonSourceReader", "link" : "ostinato\/chess\/server\/JsonSupport.html#sprayJsonSourceReader[T](implicitreader:spray.json.RootJsonReader[T],implicitsupport:akka.http.scaladsl.common.EntityStreamingSupport):akka.http.scaladsl.unmarshalling.FromEntityUnmarshaller[akka.stream.scaladsl.Source[T,akka.NotUsed]]", "kind" : "implicit def"}, {"label" : "sprayJsonByteStringUnmarshaller", "tail" : "(reader: RootJsonReader[T]): FromByteStringUnmarshaller[T]", "member" : "akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport.sprayJsonByteStringUnmarshaller", "link" : "ostinato\/chess\/server\/JsonSupport.html#sprayJsonByteStringUnmarshaller[T](implicitreader:spray.json.RootJsonReader[T]):akka.http.scaladsl.unmarshalling.FromByteStringUnmarshaller[T]", "kind" : "implicit def"}, {"label" : "sprayJsValueByteStringUnmarshaller", "tail" : "(): FromByteStringUnmarshaller[JsValue]", "member" : "akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport.sprayJsValueByteStringUnmarshaller", "link" : "ostinato\/chess\/server\/JsonSupport.html#sprayJsValueByteStringUnmarshaller[T]:akka.http.scaladsl.unmarshalling.FromByteStringUnmarshaller[spray.json.JsValue]", "kind" : "implicit def"}, {"label" : "sprayJsValueUnmarshaller", "tail" : "(): FromEntityUnmarshaller[JsValue]", "member" : "akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport.sprayJsValueUnmarshaller", "link" : "ostinato\/chess\/server\/JsonSupport.html#sprayJsValueUnmarshaller:akka.http.scaladsl.unmarshalling.FromEntityUnmarshaller[spray.json.JsValue]", "kind" : "implicit def"}, {"label" : "sprayJsonUnmarshaller", "tail" : "(reader: RootJsonReader[T]): FromEntityUnmarshaller[T]", "member" : "akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport.sprayJsonUnmarshaller", "link" : "ostinato\/chess\/server\/JsonSupport.html#sprayJsonUnmarshaller[T](implicitreader:spray.json.RootJsonReader[T]):akka.http.scaladsl.unmarshalling.FromEntityUnmarshaller[T]", "kind" : "implicit def"}, {"label" : "sprayJsonUnmarshallerConverter", "tail" : "(reader: RootJsonReader[T]): FromEntityUnmarshaller[T]", "member" : "akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport.sprayJsonUnmarshallerConverter", "link" : "ostinato\/chess\/server\/JsonSupport.html#sprayJsonUnmarshallerConverter[T](reader:spray.json.RootJsonReader[T]):akka.http.scaladsl.unmarshalling.FromEntityUnmarshaller[T]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/server\/JsonSupport.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/server\/JsonSupport.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/server\/JsonSupport.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/server\/JsonSupport.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/server\/JsonSupport.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/server\/JsonSupport.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/server\/JsonSupport.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/server\/JsonSupport.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/server\/JsonSupport.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/server\/JsonSupport.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/server\/JsonSupport.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/server\/JsonSupport.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "ostinato\/chess\/server\/JsonSupport.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/server\/JsonSupport.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/server\/JsonSupport.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/chess\/server\/JsonSupport.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/server\/JsonSupport.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/server\/JsonSupport.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/server\/JsonSupport.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "ostinato\/chess\/server\/JsonSupport.html", "kind" : "trait"}, {"name" : "ostinato.chess.server.Main", "shortDescription" : "", "object" : "ostinato\/chess\/server\/Main$.html", "members_object" : [{"label" : "AnyJsonFormat", "tail" : "", "member" : "ostinato.chess.server.OstinatoServerRoute.AnyJsonFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#AnyJsonFormat", "kind" : "implicit object"}, {"label" : "RootJsArrayFormat", "tail" : "", "member" : "spray.json.AdditionalFormats.RootJsArrayFormat", "link" : "ostinato\/chess\/server\/Main$.html#RootJsArrayFormat", "kind" : "implicit object"}, {"label" : "RootJsObjectFormat", "tail" : "", "member" : "spray.json.AdditionalFormats.RootJsObjectFormat", "link" : "ostinato\/chess\/server\/Main$.html#RootJsObjectFormat", "kind" : "implicit object"}, {"label" : "JsValueFormat", "tail" : "", "member" : "spray.json.AdditionalFormats.JsValueFormat", "link" : "ostinato\/chess\/server\/Main$.html#JsValueFormat", "kind" : "implicit object"}, {"label" : "OptionFormat", "tail" : "", "member" : "spray.json.StandardFormats.OptionFormat", "link" : "ostinato\/chess\/server\/Main$.html#OptionFormat[T]extendsStandardFormats.this.JF[Option[T]]", "kind" : "class"}, {"label" : "SymbolJsonFormat", "tail" : "", "member" : "spray.json.BasicFormats.SymbolJsonFormat", "link" : "ostinato\/chess\/server\/Main$.html#SymbolJsonFormat", "kind" : "implicit object"}, {"label" : "StringJsonFormat", "tail" : "", "member" : "spray.json.BasicFormats.StringJsonFormat", "link" : "ostinato\/chess\/server\/Main$.html#StringJsonFormat", "kind" : "implicit object"}, {"label" : "CharJsonFormat", "tail" : "", "member" : "spray.json.BasicFormats.CharJsonFormat", "link" : "ostinato\/chess\/server\/Main$.html#CharJsonFormat", "kind" : "implicit object"}, {"label" : "BooleanJsonFormat", "tail" : "", "member" : "spray.json.BasicFormats.BooleanJsonFormat", "link" : "ostinato\/chess\/server\/Main$.html#BooleanJsonFormat", "kind" : "implicit object"}, {"label" : "UnitJsonFormat", "tail" : "", "member" : "spray.json.BasicFormats.UnitJsonFormat", "link" : "ostinato\/chess\/server\/Main$.html#UnitJsonFormat", "kind" : "implicit object"}, {"label" : "BigIntJsonFormat", "tail" : "", "member" : "spray.json.BasicFormats.BigIntJsonFormat", "link" : "ostinato\/chess\/server\/Main$.html#BigIntJsonFormat", "kind" : "implicit object"}, {"label" : "BigDecimalJsonFormat", "tail" : "", "member" : "spray.json.BasicFormats.BigDecimalJsonFormat", "link" : "ostinato\/chess\/server\/Main$.html#BigDecimalJsonFormat", "kind" : "implicit object"}, {"label" : "ShortJsonFormat", "tail" : "", "member" : "spray.json.BasicFormats.ShortJsonFormat", "link" : "ostinato\/chess\/server\/Main$.html#ShortJsonFormat", "kind" : "implicit object"}, {"label" : "ByteJsonFormat", "tail" : "", "member" : "spray.json.BasicFormats.ByteJsonFormat", "link" : "ostinato\/chess\/server\/Main$.html#ByteJsonFormat", "kind" : "implicit object"}, {"label" : "DoubleJsonFormat", "tail" : "", "member" : "spray.json.BasicFormats.DoubleJsonFormat", "link" : "ostinato\/chess\/server\/Main$.html#DoubleJsonFormat", "kind" : "implicit object"}, {"label" : "FloatJsonFormat", "tail" : "", "member" : "spray.json.BasicFormats.FloatJsonFormat", "link" : "ostinato\/chess\/server\/Main$.html#FloatJsonFormat", "kind" : "implicit object"}, {"label" : "LongJsonFormat", "tail" : "", "member" : "spray.json.BasicFormats.LongJsonFormat", "link" : "ostinato\/chess\/server\/Main$.html#LongJsonFormat", "kind" : "implicit object"}, {"label" : "IntJsonFormat", "tail" : "", "member" : "spray.json.BasicFormats.IntJsonFormat", "link" : "ostinato\/chess\/server\/Main$.html#IntJsonFormat", "kind" : "implicit object"}, {"label" : "bindingFuture", "tail" : ": Future[ServerBinding]", "member" : "ostinato.chess.server.Main.bindingFuture", "link" : "ostinato\/chess\/server\/Main$.html#bindingFuture:scala.concurrent.Future[akka.http.scaladsl.Http.ServerBinding]", "kind" : "val"}, {"label" : "logger", "tail" : ": LoggingAdapter", "member" : "ostinato.chess.server.Main.logger", "link" : "ostinato\/chess\/server\/Main$.html#logger:akka.event.LoggingAdapter", "kind" : "val"}, {"label" : "config", "tail" : ": Config", "member" : "ostinato.chess.server.Main.config", "link" : "ostinato\/chess\/server\/Main$.html#config:com.typesafe.config.Config", "kind" : "val"}, {"label" : "ec", "tail" : ": ExecutionContextExecutor", "member" : "ostinato.chess.server.Main.ec", "link" : "ostinato\/chess\/server\/Main$.html#ec:scala.concurrent.ExecutionContextExecutor", "kind" : "implicit val"}, {"label" : "materializer", "tail" : ": ActorMaterializer", "member" : "ostinato.chess.server.Main.materializer", "link" : "ostinato\/chess\/server\/Main$.html#materializer:akka.stream.ActorMaterializer", "kind" : "implicit val"}, {"label" : "system", "tail" : ": ActorSystem", "member" : "ostinato.chess.server.Main.system", "link" : "ostinato\/chess\/server\/Main$.html#system:akka.actor.ActorSystem", "kind" : "implicit val"}, {"label" : "respondWithAllowOrigin", "tail" : "(): Directive0", "member" : "ostinato.chess.server.OstinatoServerRoute.respondWithAllowOrigin", "link" : "ostinato\/chess\/server\/Main$.html#respondWithAllowOrigin:akka.http.scaladsl.server.Directive0", "kind" : "def"}, {"label" : "route", "tail" : ": Route", "member" : "ostinato.chess.server.OstinatoServerRoute.route", "link" : "ostinato\/chess\/server\/Main$.html#route:akka.http.scaladsl.server.Route", "kind" : "val"}, {"label" : "api", "tail" : ": ServerApi", "member" : "ostinato.chess.server.OstinatoServerRoute.api", "link" : "ostinato\/chess\/server\/Main$.html#api:ostinato.chess.server.ServerApi", "kind" : "val"}, {"label" : "optionsHeaders", "tail" : ": List[RawHeader]", "member" : "ostinato.chess.server.OstinatoServerRoute.optionsHeaders", "link" : "ostinato\/chess\/server\/Main$.html#optionsHeaders:List[akka.http.scaladsl.model.headers.RawHeader]", "kind" : "val"}, {"label" : "f5", "tail" : ": RootJsonFormat[RequestConvertNotation]", "member" : "ostinato.chess.server.JsonSupport.f5", "link" : "ostinato\/chess\/server\/Main$.html#f5:spray.json.RootJsonFormat[ostinato.chess.server.RequestConvertNotation]", "kind" : "implicit val"}, {"label" : "f4", "tail" : ": RootJsonFormat[RequestParseNotation]", "member" : "ostinato.chess.server.JsonSupport.f4", "link" : "ostinato\/chess\/server\/Main$.html#f4:spray.json.RootJsonFormat[ostinato.chess.server.RequestParseNotation]", "kind" : "implicit val"}, {"label" : "f3", "tail" : ": RootJsonFormat[RequestRandomAI]", "member" : "ostinato.chess.server.JsonSupport.f3", "link" : "ostinato\/chess\/server\/Main$.html#f3:spray.json.RootJsonFormat[ostinato.chess.server.RequestRandomAI]", "kind" : "implicit val"}, {"label" : "f2", "tail" : ": RootJsonFormat[RequestBasicAI]", "member" : "ostinato.chess.server.JsonSupport.f2", "link" : "ostinato\/chess\/server\/Main$.html#f2:spray.json.RootJsonFormat[ostinato.chess.server.RequestBasicAI]", "kind" : "implicit val"}, {"label" : "f1", "tail" : ": RootJsonFormat[RequestMove]", "member" : "ostinato.chess.server.JsonSupport.f1", "link" : "ostinato\/chess\/server\/Main$.html#f1:spray.json.RootJsonFormat[ostinato.chess.server.RequestMove]", "kind" : "implicit val"}, {"label" : "safeReader", "tail" : "(arg0: JsonReader[A]): JsonReader[Either[Exception, A]]", "member" : "spray.json.AdditionalFormats.safeReader", "link" : "ostinato\/chess\/server\/Main$.html#safeReader[A](implicitevidence$1:spray.json.JsonReader[A]):spray.json.JsonReader[Either[Exception,A]]", "kind" : "def"}, {"label" : "lazyFormat", "tail" : "(format: ⇒ JsonFormat[T]): JsonFormat[T] { lazy val delegate: spray.json.JsonFormat[T] }", "member" : "spray.json.AdditionalFormats.lazyFormat", "link" : "ostinato\/chess\/server\/Main$.html#lazyFormat[T](format:=>spray.json.JsonFormat[T]):spray.json.JsonFormat[T]{lazyvaldelegate:spray.json.JsonFormat[T]}", "kind" : "def"}, {"label" : "lift", "tail" : "(reader: RootJsonReader[T]): RootJsonFormat[T]", "member" : "spray.json.AdditionalFormats.lift", "link" : "ostinato\/chess\/server\/Main$.html#lift[T<:AnyRef](reader:spray.json.RootJsonReader[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "lift", "tail" : "(reader: JsonReader[T]): JsonFormat[T]", "member" : "spray.json.AdditionalFormats.lift", "link" : "ostinato\/chess\/server\/Main$.html#lift[T<:AnyRef](reader:spray.json.JsonReader[T]):spray.json.JsonFormat[T]", "kind" : "def"}, {"label" : "lift", "tail" : "(writer: RootJsonWriter[T]): RootJsonFormat[T]", "member" : "spray.json.AdditionalFormats.lift", "link" : "ostinato\/chess\/server\/Main$.html#lift[T](writer:spray.json.RootJsonWriter[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "lift", "tail" : "(writer: JsonWriter[T]): JsonFormat[T] { def read(value: spray.json.JsValue): Nothing }", "member" : "spray.json.AdditionalFormats.lift", "link" : "ostinato\/chess\/server\/Main$.html#lift[T](writer:spray.json.JsonWriter[T]):spray.json.JsonFormat[T]{defread(value:spray.json.JsValue):Nothing}", "kind" : "def"}, {"label" : "rootFormat", "tail" : "(format: JsonFormat[T]): RootJsonFormat[T]", "member" : "spray.json.AdditionalFormats.rootFormat", "link" : "ostinato\/chess\/server\/Main$.html#rootFormat[T](format:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "rootJsonFormat", "tail" : "(reader: RootJsonReader[T], writer: RootJsonWriter[T]): RootJsonFormat[T]", "member" : "spray.json.AdditionalFormats.rootJsonFormat", "link" : "ostinato\/chess\/server\/Main$.html#rootJsonFormat[T](reader:spray.json.RootJsonReader[T],writer:spray.json.RootJsonWriter[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(reader: JsonReader[T], writer: JsonWriter[T]): JsonFormat[T]", "member" : "spray.json.AdditionalFormats.jsonFormat", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat[T](reader:spray.json.JsonReader[T],writer:spray.json.JsonWriter[T]):spray.json.JsonFormat[T]", "kind" : "def"}, {"label" : "extractFieldNames", "tail" : "(classManifest: ClassManifest[_]): Array[String]", "member" : "spray.json.ProductFormats.extractFieldNames", "link" : "ostinato\/chess\/server\/Main$.html#extractFieldNames(classManifest:ClassManifest[_]):Array[String]", "kind" : "def"}, {"label" : "fromField", "tail" : "(value: JsValue, fieldName: String)(reader: JsonReader[T]): T", "member" : "spray.json.ProductFormats.fromField", "link" : "ostinato\/chess\/server\/Main$.html#fromField[T](value:spray.json.JsValue,fieldName:String)(implicitreader:spray.json.JsonReader[T]):T", "kind" : "def"}, {"label" : "productElement2Field", "tail" : "(fieldName: String, p: Product, ix: Int, rest: List[JsField])(writer: JsonWriter[T]): List[JsField]", "member" : "spray.json.ProductFormats.productElement2Field", "link" : "ostinato\/chess\/server\/Main$.html#productElement2Field[T](fieldName:String,p:Product,ix:Int,rest:List[spray.json.JsField])(implicitwriter:spray.json.JsonWriter[T]):List[spray.json.JsField]", "kind" : "def"}, {"label" : "jsonFormat0", "tail" : "(construct: () ⇒ T): RootJsonFormat[T]", "member" : "spray.json.ProductFormats.jsonFormat0", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat0[T](construct:()=>T):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20, P21, P22) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String, fieldName10: String, fieldName11: String, fieldName12: String, fieldName13: String, fieldName14: String, fieldName15: String, fieldName16: String, fieldName17: String, fieldName18: String, fieldName19: String, fieldName20: String, fieldName21: String, fieldName22: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16], arg16: JF[P17], arg17: JF[P18], arg18: JF[P19], arg19: JF[P20], arg20: JF[P21], arg21: JF[P22]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,P20,P21,P22,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,P20,P21,P22)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String,fieldName10:String,fieldName11:String,fieldName12:String,fieldName13:String,fieldName14:String,fieldName15:String,fieldName16:String,fieldName17:String,fieldName18:String,fieldName19:String,fieldName20:String,fieldName21:String,fieldName22:String)(implicitevidence$507:ProductFormatsInstances.this.JF[P1],implicitevidence$508:ProductFormatsInstances.this.JF[P2],implicitevidence$509:ProductFormatsInstances.this.JF[P3],implicitevidence$510:ProductFormatsInstances.this.JF[P4],implicitevidence$511:ProductFormatsInstances.this.JF[P5],implicitevidence$512:ProductFormatsInstances.this.JF[P6],implicitevidence$513:ProductFormatsInstances.this.JF[P7],implicitevidence$514:ProductFormatsInstances.this.JF[P8],implicitevidence$515:ProductFormatsInstances.this.JF[P9],implicitevidence$516:ProductFormatsInstances.this.JF[P10],implicitevidence$517:ProductFormatsInstances.this.JF[P11],implicitevidence$518:ProductFormatsInstances.this.JF[P12],implicitevidence$519:ProductFormatsInstances.this.JF[P13],implicitevidence$520:ProductFormatsInstances.this.JF[P14],implicitevidence$521:ProductFormatsInstances.this.JF[P15],implicitevidence$522:ProductFormatsInstances.this.JF[P16],implicitevidence$523:ProductFormatsInstances.this.JF[P17],implicitevidence$524:ProductFormatsInstances.this.JF[P18],implicitevidence$525:ProductFormatsInstances.this.JF[P19],implicitevidence$526:ProductFormatsInstances.this.JF[P20],implicitevidence$527:ProductFormatsInstances.this.JF[P21],implicitevidence$528:ProductFormatsInstances.this.JF[P22]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat22", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20, P21, P22) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16], arg16: JF[P17], arg17: JF[P18], arg18: JF[P19], arg19: JF[P20], arg20: JF[P21], arg21: JF[P22], arg22: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat22", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat22[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,P20,P21,P22,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,P20,P21,P22)=>T)(implicitevidence$484:ProductFormatsInstances.this.JF[P1],implicitevidence$485:ProductFormatsInstances.this.JF[P2],implicitevidence$486:ProductFormatsInstances.this.JF[P3],implicitevidence$487:ProductFormatsInstances.this.JF[P4],implicitevidence$488:ProductFormatsInstances.this.JF[P5],implicitevidence$489:ProductFormatsInstances.this.JF[P6],implicitevidence$490:ProductFormatsInstances.this.JF[P7],implicitevidence$491:ProductFormatsInstances.this.JF[P8],implicitevidence$492:ProductFormatsInstances.this.JF[P9],implicitevidence$493:ProductFormatsInstances.this.JF[P10],implicitevidence$494:ProductFormatsInstances.this.JF[P11],implicitevidence$495:ProductFormatsInstances.this.JF[P12],implicitevidence$496:ProductFormatsInstances.this.JF[P13],implicitevidence$497:ProductFormatsInstances.this.JF[P14],implicitevidence$498:ProductFormatsInstances.this.JF[P15],implicitevidence$499:ProductFormatsInstances.this.JF[P16],implicitevidence$500:ProductFormatsInstances.this.JF[P17],implicitevidence$501:ProductFormatsInstances.this.JF[P18],implicitevidence$502:ProductFormatsInstances.this.JF[P19],implicitevidence$503:ProductFormatsInstances.this.JF[P20],implicitevidence$504:ProductFormatsInstances.this.JF[P21],implicitevidence$505:ProductFormatsInstances.this.JF[P22],implicitevidence$506:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20, P21) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String, fieldName10: String, fieldName11: String, fieldName12: String, fieldName13: String, fieldName14: String, fieldName15: String, fieldName16: String, fieldName17: String, fieldName18: String, fieldName19: String, fieldName20: String, fieldName21: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16], arg16: JF[P17], arg17: JF[P18], arg18: JF[P19], arg19: JF[P20], arg20: JF[P21]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,P20,P21,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,P20,P21)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String,fieldName10:String,fieldName11:String,fieldName12:String,fieldName13:String,fieldName14:String,fieldName15:String,fieldName16:String,fieldName17:String,fieldName18:String,fieldName19:String,fieldName20:String,fieldName21:String)(implicitevidence$463:ProductFormatsInstances.this.JF[P1],implicitevidence$464:ProductFormatsInstances.this.JF[P2],implicitevidence$465:ProductFormatsInstances.this.JF[P3],implicitevidence$466:ProductFormatsInstances.this.JF[P4],implicitevidence$467:ProductFormatsInstances.this.JF[P5],implicitevidence$468:ProductFormatsInstances.this.JF[P6],implicitevidence$469:ProductFormatsInstances.this.JF[P7],implicitevidence$470:ProductFormatsInstances.this.JF[P8],implicitevidence$471:ProductFormatsInstances.this.JF[P9],implicitevidence$472:ProductFormatsInstances.this.JF[P10],implicitevidence$473:ProductFormatsInstances.this.JF[P11],implicitevidence$474:ProductFormatsInstances.this.JF[P12],implicitevidence$475:ProductFormatsInstances.this.JF[P13],implicitevidence$476:ProductFormatsInstances.this.JF[P14],implicitevidence$477:ProductFormatsInstances.this.JF[P15],implicitevidence$478:ProductFormatsInstances.this.JF[P16],implicitevidence$479:ProductFormatsInstances.this.JF[P17],implicitevidence$480:ProductFormatsInstances.this.JF[P18],implicitevidence$481:ProductFormatsInstances.this.JF[P19],implicitevidence$482:ProductFormatsInstances.this.JF[P20],implicitevidence$483:ProductFormatsInstances.this.JF[P21]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat21", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20, P21) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16], arg16: JF[P17], arg17: JF[P18], arg18: JF[P19], arg19: JF[P20], arg20: JF[P21], arg21: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat21", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat21[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,P20,P21,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,P20,P21)=>T)(implicitevidence$441:ProductFormatsInstances.this.JF[P1],implicitevidence$442:ProductFormatsInstances.this.JF[P2],implicitevidence$443:ProductFormatsInstances.this.JF[P3],implicitevidence$444:ProductFormatsInstances.this.JF[P4],implicitevidence$445:ProductFormatsInstances.this.JF[P5],implicitevidence$446:ProductFormatsInstances.this.JF[P6],implicitevidence$447:ProductFormatsInstances.this.JF[P7],implicitevidence$448:ProductFormatsInstances.this.JF[P8],implicitevidence$449:ProductFormatsInstances.this.JF[P9],implicitevidence$450:ProductFormatsInstances.this.JF[P10],implicitevidence$451:ProductFormatsInstances.this.JF[P11],implicitevidence$452:ProductFormatsInstances.this.JF[P12],implicitevidence$453:ProductFormatsInstances.this.JF[P13],implicitevidence$454:ProductFormatsInstances.this.JF[P14],implicitevidence$455:ProductFormatsInstances.this.JF[P15],implicitevidence$456:ProductFormatsInstances.this.JF[P16],implicitevidence$457:ProductFormatsInstances.this.JF[P17],implicitevidence$458:ProductFormatsInstances.this.JF[P18],implicitevidence$459:ProductFormatsInstances.this.JF[P19],implicitevidence$460:ProductFormatsInstances.this.JF[P20],implicitevidence$461:ProductFormatsInstances.this.JF[P21],implicitevidence$462:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String, fieldName10: String, fieldName11: String, fieldName12: String, fieldName13: String, fieldName14: String, fieldName15: String, fieldName16: String, fieldName17: String, fieldName18: String, fieldName19: String, fieldName20: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16], arg16: JF[P17], arg17: JF[P18], arg18: JF[P19], arg19: JF[P20]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,P20,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,P20)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String,fieldName10:String,fieldName11:String,fieldName12:String,fieldName13:String,fieldName14:String,fieldName15:String,fieldName16:String,fieldName17:String,fieldName18:String,fieldName19:String,fieldName20:String)(implicitevidence$421:ProductFormatsInstances.this.JF[P1],implicitevidence$422:ProductFormatsInstances.this.JF[P2],implicitevidence$423:ProductFormatsInstances.this.JF[P3],implicitevidence$424:ProductFormatsInstances.this.JF[P4],implicitevidence$425:ProductFormatsInstances.this.JF[P5],implicitevidence$426:ProductFormatsInstances.this.JF[P6],implicitevidence$427:ProductFormatsInstances.this.JF[P7],implicitevidence$428:ProductFormatsInstances.this.JF[P8],implicitevidence$429:ProductFormatsInstances.this.JF[P9],implicitevidence$430:ProductFormatsInstances.this.JF[P10],implicitevidence$431:ProductFormatsInstances.this.JF[P11],implicitevidence$432:ProductFormatsInstances.this.JF[P12],implicitevidence$433:ProductFormatsInstances.this.JF[P13],implicitevidence$434:ProductFormatsInstances.this.JF[P14],implicitevidence$435:ProductFormatsInstances.this.JF[P15],implicitevidence$436:ProductFormatsInstances.this.JF[P16],implicitevidence$437:ProductFormatsInstances.this.JF[P17],implicitevidence$438:ProductFormatsInstances.this.JF[P18],implicitevidence$439:ProductFormatsInstances.this.JF[P19],implicitevidence$440:ProductFormatsInstances.this.JF[P20]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat20", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16], arg16: JF[P17], arg17: JF[P18], arg18: JF[P19], arg19: JF[P20], arg20: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat20", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat20[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,P20,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,P20)=>T)(implicitevidence$400:ProductFormatsInstances.this.JF[P1],implicitevidence$401:ProductFormatsInstances.this.JF[P2],implicitevidence$402:ProductFormatsInstances.this.JF[P3],implicitevidence$403:ProductFormatsInstances.this.JF[P4],implicitevidence$404:ProductFormatsInstances.this.JF[P5],implicitevidence$405:ProductFormatsInstances.this.JF[P6],implicitevidence$406:ProductFormatsInstances.this.JF[P7],implicitevidence$407:ProductFormatsInstances.this.JF[P8],implicitevidence$408:ProductFormatsInstances.this.JF[P9],implicitevidence$409:ProductFormatsInstances.this.JF[P10],implicitevidence$410:ProductFormatsInstances.this.JF[P11],implicitevidence$411:ProductFormatsInstances.this.JF[P12],implicitevidence$412:ProductFormatsInstances.this.JF[P13],implicitevidence$413:ProductFormatsInstances.this.JF[P14],implicitevidence$414:ProductFormatsInstances.this.JF[P15],implicitevidence$415:ProductFormatsInstances.this.JF[P16],implicitevidence$416:ProductFormatsInstances.this.JF[P17],implicitevidence$417:ProductFormatsInstances.this.JF[P18],implicitevidence$418:ProductFormatsInstances.this.JF[P19],implicitevidence$419:ProductFormatsInstances.this.JF[P20],implicitevidence$420:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String, fieldName10: String, fieldName11: String, fieldName12: String, fieldName13: String, fieldName14: String, fieldName15: String, fieldName16: String, fieldName17: String, fieldName18: String, fieldName19: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16], arg16: JF[P17], arg17: JF[P18], arg18: JF[P19]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String,fieldName10:String,fieldName11:String,fieldName12:String,fieldName13:String,fieldName14:String,fieldName15:String,fieldName16:String,fieldName17:String,fieldName18:String,fieldName19:String)(implicitevidence$381:ProductFormatsInstances.this.JF[P1],implicitevidence$382:ProductFormatsInstances.this.JF[P2],implicitevidence$383:ProductFormatsInstances.this.JF[P3],implicitevidence$384:ProductFormatsInstances.this.JF[P4],implicitevidence$385:ProductFormatsInstances.this.JF[P5],implicitevidence$386:ProductFormatsInstances.this.JF[P6],implicitevidence$387:ProductFormatsInstances.this.JF[P7],implicitevidence$388:ProductFormatsInstances.this.JF[P8],implicitevidence$389:ProductFormatsInstances.this.JF[P9],implicitevidence$390:ProductFormatsInstances.this.JF[P10],implicitevidence$391:ProductFormatsInstances.this.JF[P11],implicitevidence$392:ProductFormatsInstances.this.JF[P12],implicitevidence$393:ProductFormatsInstances.this.JF[P13],implicitevidence$394:ProductFormatsInstances.this.JF[P14],implicitevidence$395:ProductFormatsInstances.this.JF[P15],implicitevidence$396:ProductFormatsInstances.this.JF[P16],implicitevidence$397:ProductFormatsInstances.this.JF[P17],implicitevidence$398:ProductFormatsInstances.this.JF[P18],implicitevidence$399:ProductFormatsInstances.this.JF[P19]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat19", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16], arg16: JF[P17], arg17: JF[P18], arg18: JF[P19], arg19: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat19", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat19[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19)=>T)(implicitevidence$361:ProductFormatsInstances.this.JF[P1],implicitevidence$362:ProductFormatsInstances.this.JF[P2],implicitevidence$363:ProductFormatsInstances.this.JF[P3],implicitevidence$364:ProductFormatsInstances.this.JF[P4],implicitevidence$365:ProductFormatsInstances.this.JF[P5],implicitevidence$366:ProductFormatsInstances.this.JF[P6],implicitevidence$367:ProductFormatsInstances.this.JF[P7],implicitevidence$368:ProductFormatsInstances.this.JF[P8],implicitevidence$369:ProductFormatsInstances.this.JF[P9],implicitevidence$370:ProductFormatsInstances.this.JF[P10],implicitevidence$371:ProductFormatsInstances.this.JF[P11],implicitevidence$372:ProductFormatsInstances.this.JF[P12],implicitevidence$373:ProductFormatsInstances.this.JF[P13],implicitevidence$374:ProductFormatsInstances.this.JF[P14],implicitevidence$375:ProductFormatsInstances.this.JF[P15],implicitevidence$376:ProductFormatsInstances.this.JF[P16],implicitevidence$377:ProductFormatsInstances.this.JF[P17],implicitevidence$378:ProductFormatsInstances.this.JF[P18],implicitevidence$379:ProductFormatsInstances.this.JF[P19],implicitevidence$380:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String, fieldName10: String, fieldName11: String, fieldName12: String, fieldName13: String, fieldName14: String, fieldName15: String, fieldName16: String, fieldName17: String, fieldName18: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16], arg16: JF[P17], arg17: JF[P18]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String,fieldName10:String,fieldName11:String,fieldName12:String,fieldName13:String,fieldName14:String,fieldName15:String,fieldName16:String,fieldName17:String,fieldName18:String)(implicitevidence$343:ProductFormatsInstances.this.JF[P1],implicitevidence$344:ProductFormatsInstances.this.JF[P2],implicitevidence$345:ProductFormatsInstances.this.JF[P3],implicitevidence$346:ProductFormatsInstances.this.JF[P4],implicitevidence$347:ProductFormatsInstances.this.JF[P5],implicitevidence$348:ProductFormatsInstances.this.JF[P6],implicitevidence$349:ProductFormatsInstances.this.JF[P7],implicitevidence$350:ProductFormatsInstances.this.JF[P8],implicitevidence$351:ProductFormatsInstances.this.JF[P9],implicitevidence$352:ProductFormatsInstances.this.JF[P10],implicitevidence$353:ProductFormatsInstances.this.JF[P11],implicitevidence$354:ProductFormatsInstances.this.JF[P12],implicitevidence$355:ProductFormatsInstances.this.JF[P13],implicitevidence$356:ProductFormatsInstances.this.JF[P14],implicitevidence$357:ProductFormatsInstances.this.JF[P15],implicitevidence$358:ProductFormatsInstances.this.JF[P16],implicitevidence$359:ProductFormatsInstances.this.JF[P17],implicitevidence$360:ProductFormatsInstances.this.JF[P18]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat18", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16], arg16: JF[P17], arg17: JF[P18], arg18: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat18", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat18[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18)=>T)(implicitevidence$324:ProductFormatsInstances.this.JF[P1],implicitevidence$325:ProductFormatsInstances.this.JF[P2],implicitevidence$326:ProductFormatsInstances.this.JF[P3],implicitevidence$327:ProductFormatsInstances.this.JF[P4],implicitevidence$328:ProductFormatsInstances.this.JF[P5],implicitevidence$329:ProductFormatsInstances.this.JF[P6],implicitevidence$330:ProductFormatsInstances.this.JF[P7],implicitevidence$331:ProductFormatsInstances.this.JF[P8],implicitevidence$332:ProductFormatsInstances.this.JF[P9],implicitevidence$333:ProductFormatsInstances.this.JF[P10],implicitevidence$334:ProductFormatsInstances.this.JF[P11],implicitevidence$335:ProductFormatsInstances.this.JF[P12],implicitevidence$336:ProductFormatsInstances.this.JF[P13],implicitevidence$337:ProductFormatsInstances.this.JF[P14],implicitevidence$338:ProductFormatsInstances.this.JF[P15],implicitevidence$339:ProductFormatsInstances.this.JF[P16],implicitevidence$340:ProductFormatsInstances.this.JF[P17],implicitevidence$341:ProductFormatsInstances.this.JF[P18],implicitevidence$342:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String, fieldName10: String, fieldName11: String, fieldName12: String, fieldName13: String, fieldName14: String, fieldName15: String, fieldName16: String, fieldName17: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16], arg16: JF[P17]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String,fieldName10:String,fieldName11:String,fieldName12:String,fieldName13:String,fieldName14:String,fieldName15:String,fieldName16:String,fieldName17:String)(implicitevidence$307:ProductFormatsInstances.this.JF[P1],implicitevidence$308:ProductFormatsInstances.this.JF[P2],implicitevidence$309:ProductFormatsInstances.this.JF[P3],implicitevidence$310:ProductFormatsInstances.this.JF[P4],implicitevidence$311:ProductFormatsInstances.this.JF[P5],implicitevidence$312:ProductFormatsInstances.this.JF[P6],implicitevidence$313:ProductFormatsInstances.this.JF[P7],implicitevidence$314:ProductFormatsInstances.this.JF[P8],implicitevidence$315:ProductFormatsInstances.this.JF[P9],implicitevidence$316:ProductFormatsInstances.this.JF[P10],implicitevidence$317:ProductFormatsInstances.this.JF[P11],implicitevidence$318:ProductFormatsInstances.this.JF[P12],implicitevidence$319:ProductFormatsInstances.this.JF[P13],implicitevidence$320:ProductFormatsInstances.this.JF[P14],implicitevidence$321:ProductFormatsInstances.this.JF[P15],implicitevidence$322:ProductFormatsInstances.this.JF[P16],implicitevidence$323:ProductFormatsInstances.this.JF[P17]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat17", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16], arg16: JF[P17], arg17: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat17", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat17[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17)=>T)(implicitevidence$289:ProductFormatsInstances.this.JF[P1],implicitevidence$290:ProductFormatsInstances.this.JF[P2],implicitevidence$291:ProductFormatsInstances.this.JF[P3],implicitevidence$292:ProductFormatsInstances.this.JF[P4],implicitevidence$293:ProductFormatsInstances.this.JF[P5],implicitevidence$294:ProductFormatsInstances.this.JF[P6],implicitevidence$295:ProductFormatsInstances.this.JF[P7],implicitevidence$296:ProductFormatsInstances.this.JF[P8],implicitevidence$297:ProductFormatsInstances.this.JF[P9],implicitevidence$298:ProductFormatsInstances.this.JF[P10],implicitevidence$299:ProductFormatsInstances.this.JF[P11],implicitevidence$300:ProductFormatsInstances.this.JF[P12],implicitevidence$301:ProductFormatsInstances.this.JF[P13],implicitevidence$302:ProductFormatsInstances.this.JF[P14],implicitevidence$303:ProductFormatsInstances.this.JF[P15],implicitevidence$304:ProductFormatsInstances.this.JF[P16],implicitevidence$305:ProductFormatsInstances.this.JF[P17],implicitevidence$306:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String, fieldName10: String, fieldName11: String, fieldName12: String, fieldName13: String, fieldName14: String, fieldName15: String, fieldName16: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String,fieldName10:String,fieldName11:String,fieldName12:String,fieldName13:String,fieldName14:String,fieldName15:String,fieldName16:String)(implicitevidence$273:ProductFormatsInstances.this.JF[P1],implicitevidence$274:ProductFormatsInstances.this.JF[P2],implicitevidence$275:ProductFormatsInstances.this.JF[P3],implicitevidence$276:ProductFormatsInstances.this.JF[P4],implicitevidence$277:ProductFormatsInstances.this.JF[P5],implicitevidence$278:ProductFormatsInstances.this.JF[P6],implicitevidence$279:ProductFormatsInstances.this.JF[P7],implicitevidence$280:ProductFormatsInstances.this.JF[P8],implicitevidence$281:ProductFormatsInstances.this.JF[P9],implicitevidence$282:ProductFormatsInstances.this.JF[P10],implicitevidence$283:ProductFormatsInstances.this.JF[P11],implicitevidence$284:ProductFormatsInstances.this.JF[P12],implicitevidence$285:ProductFormatsInstances.this.JF[P13],implicitevidence$286:ProductFormatsInstances.this.JF[P14],implicitevidence$287:ProductFormatsInstances.this.JF[P15],implicitevidence$288:ProductFormatsInstances.this.JF[P16]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat16", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16], arg16: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat16", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat16[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16)=>T)(implicitevidence$256:ProductFormatsInstances.this.JF[P1],implicitevidence$257:ProductFormatsInstances.this.JF[P2],implicitevidence$258:ProductFormatsInstances.this.JF[P3],implicitevidence$259:ProductFormatsInstances.this.JF[P4],implicitevidence$260:ProductFormatsInstances.this.JF[P5],implicitevidence$261:ProductFormatsInstances.this.JF[P6],implicitevidence$262:ProductFormatsInstances.this.JF[P7],implicitevidence$263:ProductFormatsInstances.this.JF[P8],implicitevidence$264:ProductFormatsInstances.this.JF[P9],implicitevidence$265:ProductFormatsInstances.this.JF[P10],implicitevidence$266:ProductFormatsInstances.this.JF[P11],implicitevidence$267:ProductFormatsInstances.this.JF[P12],implicitevidence$268:ProductFormatsInstances.this.JF[P13],implicitevidence$269:ProductFormatsInstances.this.JF[P14],implicitevidence$270:ProductFormatsInstances.this.JF[P15],implicitevidence$271:ProductFormatsInstances.this.JF[P16],implicitevidence$272:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String, fieldName10: String, fieldName11: String, fieldName12: String, fieldName13: String, fieldName14: String, fieldName15: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String,fieldName10:String,fieldName11:String,fieldName12:String,fieldName13:String,fieldName14:String,fieldName15:String)(implicitevidence$241:ProductFormatsInstances.this.JF[P1],implicitevidence$242:ProductFormatsInstances.this.JF[P2],implicitevidence$243:ProductFormatsInstances.this.JF[P3],implicitevidence$244:ProductFormatsInstances.this.JF[P4],implicitevidence$245:ProductFormatsInstances.this.JF[P5],implicitevidence$246:ProductFormatsInstances.this.JF[P6],implicitevidence$247:ProductFormatsInstances.this.JF[P7],implicitevidence$248:ProductFormatsInstances.this.JF[P8],implicitevidence$249:ProductFormatsInstances.this.JF[P9],implicitevidence$250:ProductFormatsInstances.this.JF[P10],implicitevidence$251:ProductFormatsInstances.this.JF[P11],implicitevidence$252:ProductFormatsInstances.this.JF[P12],implicitevidence$253:ProductFormatsInstances.this.JF[P13],implicitevidence$254:ProductFormatsInstances.this.JF[P14],implicitevidence$255:ProductFormatsInstances.this.JF[P15]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat15", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat15", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat15[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15)=>T)(implicitevidence$225:ProductFormatsInstances.this.JF[P1],implicitevidence$226:ProductFormatsInstances.this.JF[P2],implicitevidence$227:ProductFormatsInstances.this.JF[P3],implicitevidence$228:ProductFormatsInstances.this.JF[P4],implicitevidence$229:ProductFormatsInstances.this.JF[P5],implicitevidence$230:ProductFormatsInstances.this.JF[P6],implicitevidence$231:ProductFormatsInstances.this.JF[P7],implicitevidence$232:ProductFormatsInstances.this.JF[P8],implicitevidence$233:ProductFormatsInstances.this.JF[P9],implicitevidence$234:ProductFormatsInstances.this.JF[P10],implicitevidence$235:ProductFormatsInstances.this.JF[P11],implicitevidence$236:ProductFormatsInstances.this.JF[P12],implicitevidence$237:ProductFormatsInstances.this.JF[P13],implicitevidence$238:ProductFormatsInstances.this.JF[P14],implicitevidence$239:ProductFormatsInstances.this.JF[P15],implicitevidence$240:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String, fieldName10: String, fieldName11: String, fieldName12: String, fieldName13: String, fieldName14: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String,fieldName10:String,fieldName11:String,fieldName12:String,fieldName13:String,fieldName14:String)(implicitevidence$211:ProductFormatsInstances.this.JF[P1],implicitevidence$212:ProductFormatsInstances.this.JF[P2],implicitevidence$213:ProductFormatsInstances.this.JF[P3],implicitevidence$214:ProductFormatsInstances.this.JF[P4],implicitevidence$215:ProductFormatsInstances.this.JF[P5],implicitevidence$216:ProductFormatsInstances.this.JF[P6],implicitevidence$217:ProductFormatsInstances.this.JF[P7],implicitevidence$218:ProductFormatsInstances.this.JF[P8],implicitevidence$219:ProductFormatsInstances.this.JF[P9],implicitevidence$220:ProductFormatsInstances.this.JF[P10],implicitevidence$221:ProductFormatsInstances.this.JF[P11],implicitevidence$222:ProductFormatsInstances.this.JF[P12],implicitevidence$223:ProductFormatsInstances.this.JF[P13],implicitevidence$224:ProductFormatsInstances.this.JF[P14]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat14", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat14", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat14[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14)=>T)(implicitevidence$196:ProductFormatsInstances.this.JF[P1],implicitevidence$197:ProductFormatsInstances.this.JF[P2],implicitevidence$198:ProductFormatsInstances.this.JF[P3],implicitevidence$199:ProductFormatsInstances.this.JF[P4],implicitevidence$200:ProductFormatsInstances.this.JF[P5],implicitevidence$201:ProductFormatsInstances.this.JF[P6],implicitevidence$202:ProductFormatsInstances.this.JF[P7],implicitevidence$203:ProductFormatsInstances.this.JF[P8],implicitevidence$204:ProductFormatsInstances.this.JF[P9],implicitevidence$205:ProductFormatsInstances.this.JF[P10],implicitevidence$206:ProductFormatsInstances.this.JF[P11],implicitevidence$207:ProductFormatsInstances.this.JF[P12],implicitevidence$208:ProductFormatsInstances.this.JF[P13],implicitevidence$209:ProductFormatsInstances.this.JF[P14],implicitevidence$210:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String, fieldName10: String, fieldName11: String, fieldName12: String, fieldName13: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String,fieldName10:String,fieldName11:String,fieldName12:String,fieldName13:String)(implicitevidence$183:ProductFormatsInstances.this.JF[P1],implicitevidence$184:ProductFormatsInstances.this.JF[P2],implicitevidence$185:ProductFormatsInstances.this.JF[P3],implicitevidence$186:ProductFormatsInstances.this.JF[P4],implicitevidence$187:ProductFormatsInstances.this.JF[P5],implicitevidence$188:ProductFormatsInstances.this.JF[P6],implicitevidence$189:ProductFormatsInstances.this.JF[P7],implicitevidence$190:ProductFormatsInstances.this.JF[P8],implicitevidence$191:ProductFormatsInstances.this.JF[P9],implicitevidence$192:ProductFormatsInstances.this.JF[P10],implicitevidence$193:ProductFormatsInstances.this.JF[P11],implicitevidence$194:ProductFormatsInstances.this.JF[P12],implicitevidence$195:ProductFormatsInstances.this.JF[P13]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat13", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat13", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat13[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13)=>T)(implicitevidence$169:ProductFormatsInstances.this.JF[P1],implicitevidence$170:ProductFormatsInstances.this.JF[P2],implicitevidence$171:ProductFormatsInstances.this.JF[P3],implicitevidence$172:ProductFormatsInstances.this.JF[P4],implicitevidence$173:ProductFormatsInstances.this.JF[P5],implicitevidence$174:ProductFormatsInstances.this.JF[P6],implicitevidence$175:ProductFormatsInstances.this.JF[P7],implicitevidence$176:ProductFormatsInstances.this.JF[P8],implicitevidence$177:ProductFormatsInstances.this.JF[P9],implicitevidence$178:ProductFormatsInstances.this.JF[P10],implicitevidence$179:ProductFormatsInstances.this.JF[P11],implicitevidence$180:ProductFormatsInstances.this.JF[P12],implicitevidence$181:ProductFormatsInstances.this.JF[P13],implicitevidence$182:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String, fieldName10: String, fieldName11: String, fieldName12: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String,fieldName10:String,fieldName11:String,fieldName12:String)(implicitevidence$157:ProductFormatsInstances.this.JF[P1],implicitevidence$158:ProductFormatsInstances.this.JF[P2],implicitevidence$159:ProductFormatsInstances.this.JF[P3],implicitevidence$160:ProductFormatsInstances.this.JF[P4],implicitevidence$161:ProductFormatsInstances.this.JF[P5],implicitevidence$162:ProductFormatsInstances.this.JF[P6],implicitevidence$163:ProductFormatsInstances.this.JF[P7],implicitevidence$164:ProductFormatsInstances.this.JF[P8],implicitevidence$165:ProductFormatsInstances.this.JF[P9],implicitevidence$166:ProductFormatsInstances.this.JF[P10],implicitevidence$167:ProductFormatsInstances.this.JF[P11],implicitevidence$168:ProductFormatsInstances.this.JF[P12]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat12", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat12", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat12[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12)=>T)(implicitevidence$144:ProductFormatsInstances.this.JF[P1],implicitevidence$145:ProductFormatsInstances.this.JF[P2],implicitevidence$146:ProductFormatsInstances.this.JF[P3],implicitevidence$147:ProductFormatsInstances.this.JF[P4],implicitevidence$148:ProductFormatsInstances.this.JF[P5],implicitevidence$149:ProductFormatsInstances.this.JF[P6],implicitevidence$150:ProductFormatsInstances.this.JF[P7],implicitevidence$151:ProductFormatsInstances.this.JF[P8],implicitevidence$152:ProductFormatsInstances.this.JF[P9],implicitevidence$153:ProductFormatsInstances.this.JF[P10],implicitevidence$154:ProductFormatsInstances.this.JF[P11],implicitevidence$155:ProductFormatsInstances.this.JF[P12],implicitevidence$156:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String, fieldName10: String, fieldName11: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String,fieldName10:String,fieldName11:String)(implicitevidence$133:ProductFormatsInstances.this.JF[P1],implicitevidence$134:ProductFormatsInstances.this.JF[P2],implicitevidence$135:ProductFormatsInstances.this.JF[P3],implicitevidence$136:ProductFormatsInstances.this.JF[P4],implicitevidence$137:ProductFormatsInstances.this.JF[P5],implicitevidence$138:ProductFormatsInstances.this.JF[P6],implicitevidence$139:ProductFormatsInstances.this.JF[P7],implicitevidence$140:ProductFormatsInstances.this.JF[P8],implicitevidence$141:ProductFormatsInstances.this.JF[P9],implicitevidence$142:ProductFormatsInstances.this.JF[P10],implicitevidence$143:ProductFormatsInstances.this.JF[P11]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat11", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat11", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat11[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11)=>T)(implicitevidence$121:ProductFormatsInstances.this.JF[P1],implicitevidence$122:ProductFormatsInstances.this.JF[P2],implicitevidence$123:ProductFormatsInstances.this.JF[P3],implicitevidence$124:ProductFormatsInstances.this.JF[P4],implicitevidence$125:ProductFormatsInstances.this.JF[P5],implicitevidence$126:ProductFormatsInstances.this.JF[P6],implicitevidence$127:ProductFormatsInstances.this.JF[P7],implicitevidence$128:ProductFormatsInstances.this.JF[P8],implicitevidence$129:ProductFormatsInstances.this.JF[P9],implicitevidence$130:ProductFormatsInstances.this.JF[P10],implicitevidence$131:ProductFormatsInstances.this.JF[P11],implicitevidence$132:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String, fieldName10: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String,fieldName10:String)(implicitevidence$111:ProductFormatsInstances.this.JF[P1],implicitevidence$112:ProductFormatsInstances.this.JF[P2],implicitevidence$113:ProductFormatsInstances.this.JF[P3],implicitevidence$114:ProductFormatsInstances.this.JF[P4],implicitevidence$115:ProductFormatsInstances.this.JF[P5],implicitevidence$116:ProductFormatsInstances.this.JF[P6],implicitevidence$117:ProductFormatsInstances.this.JF[P7],implicitevidence$118:ProductFormatsInstances.this.JF[P8],implicitevidence$119:ProductFormatsInstances.this.JF[P9],implicitevidence$120:ProductFormatsInstances.this.JF[P10]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat10", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat10", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat10[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10)=>T)(implicitevidence$100:ProductFormatsInstances.this.JF[P1],implicitevidence$101:ProductFormatsInstances.this.JF[P2],implicitevidence$102:ProductFormatsInstances.this.JF[P3],implicitevidence$103:ProductFormatsInstances.this.JF[P4],implicitevidence$104:ProductFormatsInstances.this.JF[P5],implicitevidence$105:ProductFormatsInstances.this.JF[P6],implicitevidence$106:ProductFormatsInstances.this.JF[P7],implicitevidence$107:ProductFormatsInstances.this.JF[P8],implicitevidence$108:ProductFormatsInstances.this.JF[P9],implicitevidence$109:ProductFormatsInstances.this.JF[P10],implicitevidence$110:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String)(implicitevidence$91:ProductFormatsInstances.this.JF[P1],implicitevidence$92:ProductFormatsInstances.this.JF[P2],implicitevidence$93:ProductFormatsInstances.this.JF[P3],implicitevidence$94:ProductFormatsInstances.this.JF[P4],implicitevidence$95:ProductFormatsInstances.this.JF[P5],implicitevidence$96:ProductFormatsInstances.this.JF[P6],implicitevidence$97:ProductFormatsInstances.this.JF[P7],implicitevidence$98:ProductFormatsInstances.this.JF[P8],implicitevidence$99:ProductFormatsInstances.this.JF[P9]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat9", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat9", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat9[P1,P2,P3,P4,P5,P6,P7,P8,P9,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9)=>T)(implicitevidence$81:ProductFormatsInstances.this.JF[P1],implicitevidence$82:ProductFormatsInstances.this.JF[P2],implicitevidence$83:ProductFormatsInstances.this.JF[P3],implicitevidence$84:ProductFormatsInstances.this.JF[P4],implicitevidence$85:ProductFormatsInstances.this.JF[P5],implicitevidence$86:ProductFormatsInstances.this.JF[P6],implicitevidence$87:ProductFormatsInstances.this.JF[P7],implicitevidence$88:ProductFormatsInstances.this.JF[P8],implicitevidence$89:ProductFormatsInstances.this.JF[P9],implicitevidence$90:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String)(implicitevidence$73:ProductFormatsInstances.this.JF[P1],implicitevidence$74:ProductFormatsInstances.this.JF[P2],implicitevidence$75:ProductFormatsInstances.this.JF[P3],implicitevidence$76:ProductFormatsInstances.this.JF[P4],implicitevidence$77:ProductFormatsInstances.this.JF[P5],implicitevidence$78:ProductFormatsInstances.this.JF[P6],implicitevidence$79:ProductFormatsInstances.this.JF[P7],implicitevidence$80:ProductFormatsInstances.this.JF[P8]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat8", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat8", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat8[P1,P2,P3,P4,P5,P6,P7,P8,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8)=>T)(implicitevidence$64:ProductFormatsInstances.this.JF[P1],implicitevidence$65:ProductFormatsInstances.this.JF[P2],implicitevidence$66:ProductFormatsInstances.this.JF[P3],implicitevidence$67:ProductFormatsInstances.this.JF[P4],implicitevidence$68:ProductFormatsInstances.this.JF[P5],implicitevidence$69:ProductFormatsInstances.this.JF[P6],implicitevidence$70:ProductFormatsInstances.this.JF[P7],implicitevidence$71:ProductFormatsInstances.this.JF[P8],implicitevidence$72:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String)(implicitevidence$57:ProductFormatsInstances.this.JF[P1],implicitevidence$58:ProductFormatsInstances.this.JF[P2],implicitevidence$59:ProductFormatsInstances.this.JF[P3],implicitevidence$60:ProductFormatsInstances.this.JF[P4],implicitevidence$61:ProductFormatsInstances.this.JF[P5],implicitevidence$62:ProductFormatsInstances.this.JF[P6],implicitevidence$63:ProductFormatsInstances.this.JF[P7]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat7", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat7", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat7[P1,P2,P3,P4,P5,P6,P7,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7)=>T)(implicitevidence$49:ProductFormatsInstances.this.JF[P1],implicitevidence$50:ProductFormatsInstances.this.JF[P2],implicitevidence$51:ProductFormatsInstances.this.JF[P3],implicitevidence$52:ProductFormatsInstances.this.JF[P4],implicitevidence$53:ProductFormatsInstances.this.JF[P5],implicitevidence$54:ProductFormatsInstances.this.JF[P6],implicitevidence$55:ProductFormatsInstances.this.JF[P7],implicitevidence$56:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat[P1,P2,P3,P4,P5,P6,T<:Product](construct:(P1,P2,P3,P4,P5,P6)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String)(implicitevidence$43:ProductFormatsInstances.this.JF[P1],implicitevidence$44:ProductFormatsInstances.this.JF[P2],implicitevidence$45:ProductFormatsInstances.this.JF[P3],implicitevidence$46:ProductFormatsInstances.this.JF[P4],implicitevidence$47:ProductFormatsInstances.this.JF[P5],implicitevidence$48:ProductFormatsInstances.this.JF[P6]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat6", "tail" : "(construct: (P1, P2, P3, P4, P5, P6) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat6", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat6[P1,P2,P3,P4,P5,P6,T<:Product](construct:(P1,P2,P3,P4,P5,P6)=>T)(implicitevidence$36:ProductFormatsInstances.this.JF[P1],implicitevidence$37:ProductFormatsInstances.this.JF[P2],implicitevidence$38:ProductFormatsInstances.this.JF[P3],implicitevidence$39:ProductFormatsInstances.this.JF[P4],implicitevidence$40:ProductFormatsInstances.this.JF[P5],implicitevidence$41:ProductFormatsInstances.this.JF[P6],implicitevidence$42:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat[P1,P2,P3,P4,P5,T<:Product](construct:(P1,P2,P3,P4,P5)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String)(implicitevidence$31:ProductFormatsInstances.this.JF[P1],implicitevidence$32:ProductFormatsInstances.this.JF[P2],implicitevidence$33:ProductFormatsInstances.this.JF[P3],implicitevidence$34:ProductFormatsInstances.this.JF[P4],implicitevidence$35:ProductFormatsInstances.this.JF[P5]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat5", "tail" : "(construct: (P1, P2, P3, P4, P5) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat5", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat5[P1,P2,P3,P4,P5,T<:Product](construct:(P1,P2,P3,P4,P5)=>T)(implicitevidence$25:ProductFormatsInstances.this.JF[P1],implicitevidence$26:ProductFormatsInstances.this.JF[P2],implicitevidence$27:ProductFormatsInstances.this.JF[P3],implicitevidence$28:ProductFormatsInstances.this.JF[P4],implicitevidence$29:ProductFormatsInstances.this.JF[P5],implicitevidence$30:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat[P1,P2,P3,P4,T<:Product](construct:(P1,P2,P3,P4)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String)(implicitevidence$21:ProductFormatsInstances.this.JF[P1],implicitevidence$22:ProductFormatsInstances.this.JF[P2],implicitevidence$23:ProductFormatsInstances.this.JF[P3],implicitevidence$24:ProductFormatsInstances.this.JF[P4]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat4", "tail" : "(construct: (P1, P2, P3, P4) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat4", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat4[P1,P2,P3,P4,T<:Product](construct:(P1,P2,P3,P4)=>T)(implicitevidence$16:ProductFormatsInstances.this.JF[P1],implicitevidence$17:ProductFormatsInstances.this.JF[P2],implicitevidence$18:ProductFormatsInstances.this.JF[P3],implicitevidence$19:ProductFormatsInstances.this.JF[P4],implicitevidence$20:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat[P1,P2,P3,T<:Product](construct:(P1,P2,P3)=>T,fieldName1:String,fieldName2:String,fieldName3:String)(implicitevidence$13:ProductFormatsInstances.this.JF[P1],implicitevidence$14:ProductFormatsInstances.this.JF[P2],implicitevidence$15:ProductFormatsInstances.this.JF[P3]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat3", "tail" : "(construct: (P1, P2, P3) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat3", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat3[P1,P2,P3,T<:Product](construct:(P1,P2,P3)=>T)(implicitevidence$9:ProductFormatsInstances.this.JF[P1],implicitevidence$10:ProductFormatsInstances.this.JF[P2],implicitevidence$11:ProductFormatsInstances.this.JF[P3],implicitevidence$12:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2) ⇒ T, fieldName1: String, fieldName2: String)(arg0: JF[P1], arg1: JF[P2]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat[P1,P2,T<:Product](construct:(P1,P2)=>T,fieldName1:String,fieldName2:String)(implicitevidence$7:ProductFormatsInstances.this.JF[P1],implicitevidence$8:ProductFormatsInstances.this.JF[P2]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat2", "tail" : "(construct: (P1, P2) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat2", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat2[P1,P2,T<:Product](construct:(P1,P2)=>T)(implicitevidence$4:ProductFormatsInstances.this.JF[P1],implicitevidence$5:ProductFormatsInstances.this.JF[P2],implicitevidence$6:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1) ⇒ T, fieldName1: String)(arg0: JF[P1]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat[P1,T<:Product](construct:P1=>T,fieldName1:String)(implicitevidence$3:ProductFormatsInstances.this.JF[P1]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat1", "tail" : "(construct: (P1) ⇒ T)(arg0: JF[P1], arg1: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat1", "link" : "ostinato\/chess\/server\/Main$.html#jsonFormat1[P1,T<:Product](construct:P1=>T)(implicitevidence$1:ProductFormatsInstances.this.JF[P1],implicitevidence$2:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "viaSeq", "tail" : "(f: (Seq[T]) ⇒ I)(arg0: JsonFormat[T]): RootJsonFormat[I]", "member" : "spray.json.CollectionFormats.viaSeq", "link" : "ostinato\/chess\/server\/Main$.html#viaSeq[I<:Iterable[T],T](f:scala.collection.immutable.Seq[T]=>I)(implicitevidence$17:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[I]", "kind" : "def"}, {"label" : "setFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Set[T]]", "member" : "spray.json.CollectionFormats.setFormat", "link" : "ostinato\/chess\/server\/Main$.html#setFormat[T](implicitevidence$16:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[scala.collection.Set[T]]", "kind" : "implicit def"}, {"label" : "linearSeqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[LinearSeq[T]]", "member" : "spray.json.CollectionFormats.linearSeqFormat", "link" : "ostinato\/chess\/server\/Main$.html#linearSeqFormat[T](implicitevidence$15:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[scala.collection.LinearSeq[T]]", "kind" : "implicit def"}, {"label" : "indexedSeqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[IndexedSeq[T]]", "member" : "spray.json.CollectionFormats.indexedSeqFormat", "link" : "ostinato\/chess\/server\/Main$.html#indexedSeqFormat[T](implicitevidence$14:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[IndexedSeq[T]]", "kind" : "implicit def"}, {"label" : "seqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Seq[T]]", "member" : "spray.json.CollectionFormats.seqFormat", "link" : "ostinato\/chess\/server\/Main$.html#seqFormat[T](implicitevidence$13:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[Seq[T]]", "kind" : "implicit def"}, {"label" : "iterableFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Iterable[T]]", "member" : "spray.json.CollectionFormats.iterableFormat", "link" : "ostinato\/chess\/server\/Main$.html#iterableFormat[T](implicitevidence$12:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[Iterable[T]]", "kind" : "implicit def"}, {"label" : "vectorFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Vector[T]]", "member" : "spray.json.CollectionFormats.vectorFormat", "link" : "ostinato\/chess\/server\/Main$.html#vectorFormat[T](implicitevidence$11:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[Vector[T]]", "kind" : "implicit def"}, {"label" : "immSetFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Set[T]]", "member" : "spray.json.CollectionFormats.immSetFormat", "link" : "ostinato\/chess\/server\/Main$.html#immSetFormat[T](implicitevidence$10:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[scala.collection.immutable.Set[T]]", "kind" : "implicit def"}, {"label" : "immLinearSeqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[LinearSeq[T]]", "member" : "spray.json.CollectionFormats.immLinearSeqFormat", "link" : "ostinato\/chess\/server\/Main$.html#immLinearSeqFormat[T](implicitevidence$9:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[scala.collection.immutable.LinearSeq[T]]", "kind" : "implicit def"}, {"label" : "immIndexedSeqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[IndexedSeq[T]]", "member" : "spray.json.CollectionFormats.immIndexedSeqFormat", "link" : "ostinato\/chess\/server\/Main$.html#immIndexedSeqFormat[T](implicitevidence$8:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[scala.collection.immutable.IndexedSeq[T]]", "kind" : "implicit def"}, {"label" : "immSeqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Seq[T]]", "member" : "spray.json.CollectionFormats.immSeqFormat", "link" : "ostinato\/chess\/server\/Main$.html#immSeqFormat[T](implicitevidence$7:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[scala.collection.immutable.Seq[T]]", "kind" : "implicit def"}, {"label" : "immIterableFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Iterable[T]]", "member" : "spray.json.CollectionFormats.immIterableFormat", "link" : "ostinato\/chess\/server\/Main$.html#immIterableFormat[T](implicitevidence$6:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[scala.collection.immutable.Iterable[T]]", "kind" : "implicit def"}, {"label" : "mapFormat", "tail" : "(arg0: JsonFormat[K], arg1: JsonFormat[V]): RootJsonFormat[Map[K, V]] { def write(m: Map[K,V]): spray.json.JsObject }", "member" : "spray.json.CollectionFormats.mapFormat", "link" : "ostinato\/chess\/server\/Main$.html#mapFormat[K,V](implicitevidence$4:spray.json.JsonFormat[K],implicitevidence$5:spray.json.JsonFormat[V]):spray.json.RootJsonFormat[Map[K,V]]{defwrite(m:Map[K,V]):spray.json.JsObject}", "kind" : "implicit def"}, {"label" : "arrayFormat", "tail" : "(arg0: JsonFormat[T], arg1: ClassManifest[T]): RootJsonFormat[Array[T]] { def write(array: Array[T]): spray.json.JsArray }", "member" : "spray.json.CollectionFormats.arrayFormat", "link" : "ostinato\/chess\/server\/Main$.html#arrayFormat[T](implicitevidence$2:spray.json.JsonFormat[T],implicitevidence$3:ClassManifest[T]):spray.json.RootJsonFormat[Array[T]]{defwrite(array:Array[T]):spray.json.JsArray}", "kind" : "implicit def"}, {"label" : "listFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[List[T]] { def write(list: List[T]): spray.json.JsArray }", "member" : "spray.json.CollectionFormats.listFormat", "link" : "ostinato\/chess\/server\/Main$.html#listFormat[T](implicitevidence$1:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[List[T]]{defwrite(list:List[T]):spray.json.JsArray}", "kind" : "implicit def"}, {"label" : "tuple7Format", "tail" : "(arg0: JF[A], arg1: JF[B], arg2: JF[C], arg3: JF[D], arg4: JF[E], arg5: JF[F], arg6: JF[G]): RootJsonFormat[(A, B, C, D, E, F, G)] { def write(t: (A, B, C, D, E, F, G)): spray.json.JsArray }", "member" : "spray.json.StandardFormats.tuple7Format", "link" : "ostinato\/chess\/server\/Main$.html#tuple7Format[A,B,C,D,E,F,G](implicitevidence$26:StandardFormats.this.JF[A],implicitevidence$27:StandardFormats.this.JF[B],implicitevidence$28:StandardFormats.this.JF[C],implicitevidence$29:StandardFormats.this.JF[D],implicitevidence$30:StandardFormats.this.JF[E],implicitevidence$31:StandardFormats.this.JF[F],implicitevidence$32:StandardFormats.this.JF[G]):spray.json.RootJsonFormat[(A,B,C,D,E,F,G)]{defwrite(t:(A,B,C,D,E,F,G)):spray.json.JsArray}", "kind" : "implicit def"}, {"label" : "tuple6Format", "tail" : "(arg0: JF[A], arg1: JF[B], arg2: JF[C], arg3: JF[D], arg4: JF[E], arg5: JF[F]): RootJsonFormat[(A, B, C, D, E, F)] { def write(t: (A, B, C, D, E, F)): spray.json.JsArray }", "member" : "spray.json.StandardFormats.tuple6Format", "link" : "ostinato\/chess\/server\/Main$.html#tuple6Format[A,B,C,D,E,F](implicitevidence$20:StandardFormats.this.JF[A],implicitevidence$21:StandardFormats.this.JF[B],implicitevidence$22:StandardFormats.this.JF[C],implicitevidence$23:StandardFormats.this.JF[D],implicitevidence$24:StandardFormats.this.JF[E],implicitevidence$25:StandardFormats.this.JF[F]):spray.json.RootJsonFormat[(A,B,C,D,E,F)]{defwrite(t:(A,B,C,D,E,F)):spray.json.JsArray}", "kind" : "implicit def"}, {"label" : "tuple5Format", "tail" : "(arg0: JF[A], arg1: JF[B], arg2: JF[C], arg3: JF[D], arg4: JF[E]): RootJsonFormat[(A, B, C, D, E)] { def write(t: (A, B, C, D, E)): spray.json.JsArray }", "member" : "spray.json.StandardFormats.tuple5Format", "link" : "ostinato\/chess\/server\/Main$.html#tuple5Format[A,B,C,D,E](implicitevidence$15:StandardFormats.this.JF[A],implicitevidence$16:StandardFormats.this.JF[B],implicitevidence$17:StandardFormats.this.JF[C],implicitevidence$18:StandardFormats.this.JF[D],implicitevidence$19:StandardFormats.this.JF[E]):spray.json.RootJsonFormat[(A,B,C,D,E)]{defwrite(t:(A,B,C,D,E)):spray.json.JsArray}", "kind" : "implicit def"}, {"label" : "tuple4Format", "tail" : "(arg0: JF[A], arg1: JF[B], arg2: JF[C], arg3: JF[D]): RootJsonFormat[(A, B, C, D)] { def write(t: (A, B, C, D)): spray.json.JsArray }", "member" : "spray.json.StandardFormats.tuple4Format", "link" : "ostinato\/chess\/server\/Main$.html#tuple4Format[A,B,C,D](implicitevidence$11:StandardFormats.this.JF[A],implicitevidence$12:StandardFormats.this.JF[B],implicitevidence$13:StandardFormats.this.JF[C],implicitevidence$14:StandardFormats.this.JF[D]):spray.json.RootJsonFormat[(A,B,C,D)]{defwrite(t:(A,B,C,D)):spray.json.JsArray}", "kind" : "implicit def"}, {"label" : "tuple3Format", "tail" : "(arg0: JF[A], arg1: JF[B], arg2: JF[C]): RootJsonFormat[(A, B, C)] { def write(t: (A, B, C)): spray.json.JsArray }", "member" : "spray.json.StandardFormats.tuple3Format", "link" : "ostinato\/chess\/server\/Main$.html#tuple3Format[A,B,C](implicitevidence$8:StandardFormats.this.JF[A],implicitevidence$9:StandardFormats.this.JF[B],implicitevidence$10:StandardFormats.this.JF[C]):spray.json.RootJsonFormat[(A,B,C)]{defwrite(t:(A,B,C)):spray.json.JsArray}", "kind" : "implicit def"}, {"label" : "tuple2Format", "tail" : "(arg0: JF[A], arg1: JF[B]): RootJsonFormat[(A, B)] { def write(t: (A, B)): spray.json.JsArray }", "member" : "spray.json.StandardFormats.tuple2Format", "link" : "ostinato\/chess\/server\/Main$.html#tuple2Format[A,B](implicitevidence$6:StandardFormats.this.JF[A],implicitevidence$7:StandardFormats.this.JF[B]):spray.json.RootJsonFormat[(A,B)]{defwrite(t:(A,B)):spray.json.JsArray}", "kind" : "implicit def"}, {"label" : "tuple1Format", "tail" : "(arg0: JF[A]): JF[(A)]", "member" : "spray.json.StandardFormats.tuple1Format", "link" : "ostinato\/chess\/server\/Main$.html#tuple1Format[A](implicitevidence$5:StandardFormats.this.JF[A]):StandardFormats.this.JF[(A,)]", "kind" : "implicit def"}, {"label" : "eitherFormat", "tail" : "(arg0: JF[A], arg1: JF[B]): JF[Either[A, B]]", "member" : "spray.json.StandardFormats.eitherFormat", "link" : "ostinato\/chess\/server\/Main$.html#eitherFormat[A,B](implicitevidence$3:StandardFormats.this.JF[A],implicitevidence$4:StandardFormats.this.JF[B]):StandardFormats.this.JF[Either[A,B]]", "kind" : "implicit def"}, {"label" : "optionFormat", "tail" : "(arg0: JF[T]): JF[Option[T]]", "member" : "spray.json.StandardFormats.optionFormat", "link" : "ostinato\/chess\/server\/Main$.html#optionFormat[T](implicitevidence$1:StandardFormats.this.JF[T]):StandardFormats.this.JF[Option[T]]", "kind" : "implicit def"}, {"label" : "sprayJsValueMarshaller", "tail" : "(printer: JsonPrinter): ToEntityMarshaller[JsValue]", "member" : "akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport.sprayJsValueMarshaller", "link" : "ostinato\/chess\/server\/Main$.html#sprayJsValueMarshaller(implicitprinter:spray.json.JsonPrinter):akka.http.scaladsl.marshalling.ToEntityMarshaller[spray.json.JsValue]", "kind" : "implicit def"}, {"label" : "sprayJsonMarshaller", "tail" : "(writer: RootJsonWriter[T], printer: JsonPrinter): ToEntityMarshaller[T]", "member" : "akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport.sprayJsonMarshaller", "link" : "ostinato\/chess\/server\/Main$.html#sprayJsonMarshaller[T](implicitwriter:spray.json.RootJsonWriter[T],implicitprinter:spray.json.JsonPrinter):akka.http.scaladsl.marshalling.ToEntityMarshaller[T]", "kind" : "implicit def"}, {"label" : "sprayJsonMarshallerConverter", "tail" : "(writer: RootJsonWriter[T])(printer: JsonPrinter): ToEntityMarshaller[T]", "member" : "akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport.sprayJsonMarshallerConverter", "link" : "ostinato\/chess\/server\/Main$.html#sprayJsonMarshallerConverter[T](writer:spray.json.RootJsonWriter[T])(implicitprinter:spray.json.JsonPrinter):akka.http.scaladsl.marshalling.ToEntityMarshaller[T]", "kind" : "implicit def"}, {"label" : "sprayJsonSourceReader", "tail" : "(reader: RootJsonReader[T], support: EntityStreamingSupport): FromEntityUnmarshaller[Source[T, NotUsed]]", "member" : "akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport.sprayJsonSourceReader", "link" : "ostinato\/chess\/server\/Main$.html#sprayJsonSourceReader[T](implicitreader:spray.json.RootJsonReader[T],implicitsupport:akka.http.scaladsl.common.EntityStreamingSupport):akka.http.scaladsl.unmarshalling.FromEntityUnmarshaller[akka.stream.scaladsl.Source[T,akka.NotUsed]]", "kind" : "implicit def"}, {"label" : "sprayJsonByteStringUnmarshaller", "tail" : "(reader: RootJsonReader[T]): FromByteStringUnmarshaller[T]", "member" : "akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport.sprayJsonByteStringUnmarshaller", "link" : "ostinato\/chess\/server\/Main$.html#sprayJsonByteStringUnmarshaller[T](implicitreader:spray.json.RootJsonReader[T]):akka.http.scaladsl.unmarshalling.FromByteStringUnmarshaller[T]", "kind" : "implicit def"}, {"label" : "sprayJsValueByteStringUnmarshaller", "tail" : "(): FromByteStringUnmarshaller[JsValue]", "member" : "akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport.sprayJsValueByteStringUnmarshaller", "link" : "ostinato\/chess\/server\/Main$.html#sprayJsValueByteStringUnmarshaller[T]:akka.http.scaladsl.unmarshalling.FromByteStringUnmarshaller[spray.json.JsValue]", "kind" : "implicit def"}, {"label" : "sprayJsValueUnmarshaller", "tail" : "(): FromEntityUnmarshaller[JsValue]", "member" : "akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport.sprayJsValueUnmarshaller", "link" : "ostinato\/chess\/server\/Main$.html#sprayJsValueUnmarshaller:akka.http.scaladsl.unmarshalling.FromEntityUnmarshaller[spray.json.JsValue]", "kind" : "implicit def"}, {"label" : "sprayJsonUnmarshaller", "tail" : "(reader: RootJsonReader[T]): FromEntityUnmarshaller[T]", "member" : "akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport.sprayJsonUnmarshaller", "link" : "ostinato\/chess\/server\/Main$.html#sprayJsonUnmarshaller[T](implicitreader:spray.json.RootJsonReader[T]):akka.http.scaladsl.unmarshalling.FromEntityUnmarshaller[T]", "kind" : "implicit def"}, {"label" : "sprayJsonUnmarshallerConverter", "tail" : "(reader: RootJsonReader[T]): FromEntityUnmarshaller[T]", "member" : "akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport.sprayJsonUnmarshallerConverter", "link" : "ostinato\/chess\/server\/Main$.html#sprayJsonUnmarshallerConverter[T](reader:spray.json.RootJsonReader[T]):akka.http.scaladsl.unmarshalling.FromEntityUnmarshaller[T]", "kind" : "implicit def"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "ostinato\/chess\/server\/Main$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "ostinato\/chess\/server\/Main$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "ostinato\/chess\/server\/Main$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "ostinato\/chess\/server\/Main$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/server\/Main$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/server\/Main$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/server\/Main$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/server\/Main$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/server\/Main$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/server\/Main$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/server\/Main$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/server\/Main$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/server\/Main$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/server\/Main$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/server\/Main$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/server\/Main$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "ostinato\/chess\/server\/Main$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/server\/Main$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/server\/Main$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/chess\/server\/Main$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/server\/Main$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/server\/Main$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/server\/Main$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "ostinato.chess.server.OstinatoServerRoute", "members_trait" : [{"label" : "RootJsArrayFormat", "tail" : "", "member" : "spray.json.AdditionalFormats.RootJsArrayFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#RootJsArrayFormat", "kind" : "implicit object"}, {"label" : "RootJsObjectFormat", "tail" : "", "member" : "spray.json.AdditionalFormats.RootJsObjectFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#RootJsObjectFormat", "kind" : "implicit object"}, {"label" : "JsValueFormat", "tail" : "", "member" : "spray.json.AdditionalFormats.JsValueFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#JsValueFormat", "kind" : "implicit object"}, {"label" : "OptionFormat", "tail" : "", "member" : "spray.json.StandardFormats.OptionFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#OptionFormat[T]extendsStandardFormats.this.JF[Option[T]]", "kind" : "class"}, {"label" : "SymbolJsonFormat", "tail" : "", "member" : "spray.json.BasicFormats.SymbolJsonFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#SymbolJsonFormat", "kind" : "implicit object"}, {"label" : "StringJsonFormat", "tail" : "", "member" : "spray.json.BasicFormats.StringJsonFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#StringJsonFormat", "kind" : "implicit object"}, {"label" : "CharJsonFormat", "tail" : "", "member" : "spray.json.BasicFormats.CharJsonFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#CharJsonFormat", "kind" : "implicit object"}, {"label" : "BooleanJsonFormat", "tail" : "", "member" : "spray.json.BasicFormats.BooleanJsonFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#BooleanJsonFormat", "kind" : "implicit object"}, {"label" : "UnitJsonFormat", "tail" : "", "member" : "spray.json.BasicFormats.UnitJsonFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#UnitJsonFormat", "kind" : "implicit object"}, {"label" : "BigIntJsonFormat", "tail" : "", "member" : "spray.json.BasicFormats.BigIntJsonFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#BigIntJsonFormat", "kind" : "implicit object"}, {"label" : "BigDecimalJsonFormat", "tail" : "", "member" : "spray.json.BasicFormats.BigDecimalJsonFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#BigDecimalJsonFormat", "kind" : "implicit object"}, {"label" : "ShortJsonFormat", "tail" : "", "member" : "spray.json.BasicFormats.ShortJsonFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#ShortJsonFormat", "kind" : "implicit object"}, {"label" : "ByteJsonFormat", "tail" : "", "member" : "spray.json.BasicFormats.ByteJsonFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#ByteJsonFormat", "kind" : "implicit object"}, {"label" : "DoubleJsonFormat", "tail" : "", "member" : "spray.json.BasicFormats.DoubleJsonFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#DoubleJsonFormat", "kind" : "implicit object"}, {"label" : "FloatJsonFormat", "tail" : "", "member" : "spray.json.BasicFormats.FloatJsonFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#FloatJsonFormat", "kind" : "implicit object"}, {"label" : "LongJsonFormat", "tail" : "", "member" : "spray.json.BasicFormats.LongJsonFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#LongJsonFormat", "kind" : "implicit object"}, {"label" : "IntJsonFormat", "tail" : "", "member" : "spray.json.BasicFormats.IntJsonFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#IntJsonFormat", "kind" : "implicit object"}, {"label" : "respondWithAllowOrigin", "tail" : "(): Directive0", "member" : "ostinato.chess.server.OstinatoServerRoute.respondWithAllowOrigin", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#respondWithAllowOrigin:akka.http.scaladsl.server.Directive0", "kind" : "def"}, {"label" : "route", "tail" : ": Route", "member" : "ostinato.chess.server.OstinatoServerRoute.route", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#route:akka.http.scaladsl.server.Route", "kind" : "val"}, {"label" : "api", "tail" : ": ServerApi", "member" : "ostinato.chess.server.OstinatoServerRoute.api", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#api:ostinato.chess.server.ServerApi", "kind" : "val"}, {"label" : "optionsHeaders", "tail" : ": List[RawHeader]", "member" : "ostinato.chess.server.OstinatoServerRoute.optionsHeaders", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#optionsHeaders:List[akka.http.scaladsl.model.headers.RawHeader]", "kind" : "val"}, {"label" : "AnyJsonFormat", "tail" : "", "member" : "ostinato.chess.server.OstinatoServerRoute.AnyJsonFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#AnyJsonFormat", "kind" : "implicit object"}, {"label" : "f5", "tail" : ": RootJsonFormat[RequestConvertNotation]", "member" : "ostinato.chess.server.JsonSupport.f5", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#f5:spray.json.RootJsonFormat[ostinato.chess.server.RequestConvertNotation]", "kind" : "implicit val"}, {"label" : "f4", "tail" : ": RootJsonFormat[RequestParseNotation]", "member" : "ostinato.chess.server.JsonSupport.f4", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#f4:spray.json.RootJsonFormat[ostinato.chess.server.RequestParseNotation]", "kind" : "implicit val"}, {"label" : "f3", "tail" : ": RootJsonFormat[RequestRandomAI]", "member" : "ostinato.chess.server.JsonSupport.f3", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#f3:spray.json.RootJsonFormat[ostinato.chess.server.RequestRandomAI]", "kind" : "implicit val"}, {"label" : "f2", "tail" : ": RootJsonFormat[RequestBasicAI]", "member" : "ostinato.chess.server.JsonSupport.f2", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#f2:spray.json.RootJsonFormat[ostinato.chess.server.RequestBasicAI]", "kind" : "implicit val"}, {"label" : "f1", "tail" : ": RootJsonFormat[RequestMove]", "member" : "ostinato.chess.server.JsonSupport.f1", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#f1:spray.json.RootJsonFormat[ostinato.chess.server.RequestMove]", "kind" : "implicit val"}, {"label" : "safeReader", "tail" : "(arg0: JsonReader[A]): JsonReader[Either[Exception, A]]", "member" : "spray.json.AdditionalFormats.safeReader", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#safeReader[A](implicitevidence$1:spray.json.JsonReader[A]):spray.json.JsonReader[Either[Exception,A]]", "kind" : "def"}, {"label" : "lazyFormat", "tail" : "(format: ⇒ JsonFormat[T]): JsonFormat[T] { lazy val delegate: spray.json.JsonFormat[T] }", "member" : "spray.json.AdditionalFormats.lazyFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#lazyFormat[T](format:=>spray.json.JsonFormat[T]):spray.json.JsonFormat[T]{lazyvaldelegate:spray.json.JsonFormat[T]}", "kind" : "def"}, {"label" : "lift", "tail" : "(reader: RootJsonReader[T]): RootJsonFormat[T]", "member" : "spray.json.AdditionalFormats.lift", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#lift[T<:AnyRef](reader:spray.json.RootJsonReader[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "lift", "tail" : "(reader: JsonReader[T]): JsonFormat[T]", "member" : "spray.json.AdditionalFormats.lift", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#lift[T<:AnyRef](reader:spray.json.JsonReader[T]):spray.json.JsonFormat[T]", "kind" : "def"}, {"label" : "lift", "tail" : "(writer: RootJsonWriter[T]): RootJsonFormat[T]", "member" : "spray.json.AdditionalFormats.lift", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#lift[T](writer:spray.json.RootJsonWriter[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "lift", "tail" : "(writer: JsonWriter[T]): JsonFormat[T] { def read(value: spray.json.JsValue): Nothing }", "member" : "spray.json.AdditionalFormats.lift", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#lift[T](writer:spray.json.JsonWriter[T]):spray.json.JsonFormat[T]{defread(value:spray.json.JsValue):Nothing}", "kind" : "def"}, {"label" : "rootFormat", "tail" : "(format: JsonFormat[T]): RootJsonFormat[T]", "member" : "spray.json.AdditionalFormats.rootFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#rootFormat[T](format:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "rootJsonFormat", "tail" : "(reader: RootJsonReader[T], writer: RootJsonWriter[T]): RootJsonFormat[T]", "member" : "spray.json.AdditionalFormats.rootJsonFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#rootJsonFormat[T](reader:spray.json.RootJsonReader[T],writer:spray.json.RootJsonWriter[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(reader: JsonReader[T], writer: JsonWriter[T]): JsonFormat[T]", "member" : "spray.json.AdditionalFormats.jsonFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat[T](reader:spray.json.JsonReader[T],writer:spray.json.JsonWriter[T]):spray.json.JsonFormat[T]", "kind" : "def"}, {"label" : "extractFieldNames", "tail" : "(classManifest: ClassManifest[_]): Array[String]", "member" : "spray.json.ProductFormats.extractFieldNames", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#extractFieldNames(classManifest:ClassManifest[_]):Array[String]", "kind" : "def"}, {"label" : "fromField", "tail" : "(value: JsValue, fieldName: String)(reader: JsonReader[T]): T", "member" : "spray.json.ProductFormats.fromField", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#fromField[T](value:spray.json.JsValue,fieldName:String)(implicitreader:spray.json.JsonReader[T]):T", "kind" : "def"}, {"label" : "productElement2Field", "tail" : "(fieldName: String, p: Product, ix: Int, rest: List[JsField])(writer: JsonWriter[T]): List[JsField]", "member" : "spray.json.ProductFormats.productElement2Field", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#productElement2Field[T](fieldName:String,p:Product,ix:Int,rest:List[spray.json.JsField])(implicitwriter:spray.json.JsonWriter[T]):List[spray.json.JsField]", "kind" : "def"}, {"label" : "jsonFormat0", "tail" : "(construct: () ⇒ T): RootJsonFormat[T]", "member" : "spray.json.ProductFormats.jsonFormat0", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat0[T](construct:()=>T):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20, P21, P22) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String, fieldName10: String, fieldName11: String, fieldName12: String, fieldName13: String, fieldName14: String, fieldName15: String, fieldName16: String, fieldName17: String, fieldName18: String, fieldName19: String, fieldName20: String, fieldName21: String, fieldName22: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16], arg16: JF[P17], arg17: JF[P18], arg18: JF[P19], arg19: JF[P20], arg20: JF[P21], arg21: JF[P22]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,P20,P21,P22,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,P20,P21,P22)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String,fieldName10:String,fieldName11:String,fieldName12:String,fieldName13:String,fieldName14:String,fieldName15:String,fieldName16:String,fieldName17:String,fieldName18:String,fieldName19:String,fieldName20:String,fieldName21:String,fieldName22:String)(implicitevidence$507:ProductFormatsInstances.this.JF[P1],implicitevidence$508:ProductFormatsInstances.this.JF[P2],implicitevidence$509:ProductFormatsInstances.this.JF[P3],implicitevidence$510:ProductFormatsInstances.this.JF[P4],implicitevidence$511:ProductFormatsInstances.this.JF[P5],implicitevidence$512:ProductFormatsInstances.this.JF[P6],implicitevidence$513:ProductFormatsInstances.this.JF[P7],implicitevidence$514:ProductFormatsInstances.this.JF[P8],implicitevidence$515:ProductFormatsInstances.this.JF[P9],implicitevidence$516:ProductFormatsInstances.this.JF[P10],implicitevidence$517:ProductFormatsInstances.this.JF[P11],implicitevidence$518:ProductFormatsInstances.this.JF[P12],implicitevidence$519:ProductFormatsInstances.this.JF[P13],implicitevidence$520:ProductFormatsInstances.this.JF[P14],implicitevidence$521:ProductFormatsInstances.this.JF[P15],implicitevidence$522:ProductFormatsInstances.this.JF[P16],implicitevidence$523:ProductFormatsInstances.this.JF[P17],implicitevidence$524:ProductFormatsInstances.this.JF[P18],implicitevidence$525:ProductFormatsInstances.this.JF[P19],implicitevidence$526:ProductFormatsInstances.this.JF[P20],implicitevidence$527:ProductFormatsInstances.this.JF[P21],implicitevidence$528:ProductFormatsInstances.this.JF[P22]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat22", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20, P21, P22) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16], arg16: JF[P17], arg17: JF[P18], arg18: JF[P19], arg19: JF[P20], arg20: JF[P21], arg21: JF[P22], arg22: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat22", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat22[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,P20,P21,P22,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,P20,P21,P22)=>T)(implicitevidence$484:ProductFormatsInstances.this.JF[P1],implicitevidence$485:ProductFormatsInstances.this.JF[P2],implicitevidence$486:ProductFormatsInstances.this.JF[P3],implicitevidence$487:ProductFormatsInstances.this.JF[P4],implicitevidence$488:ProductFormatsInstances.this.JF[P5],implicitevidence$489:ProductFormatsInstances.this.JF[P6],implicitevidence$490:ProductFormatsInstances.this.JF[P7],implicitevidence$491:ProductFormatsInstances.this.JF[P8],implicitevidence$492:ProductFormatsInstances.this.JF[P9],implicitevidence$493:ProductFormatsInstances.this.JF[P10],implicitevidence$494:ProductFormatsInstances.this.JF[P11],implicitevidence$495:ProductFormatsInstances.this.JF[P12],implicitevidence$496:ProductFormatsInstances.this.JF[P13],implicitevidence$497:ProductFormatsInstances.this.JF[P14],implicitevidence$498:ProductFormatsInstances.this.JF[P15],implicitevidence$499:ProductFormatsInstances.this.JF[P16],implicitevidence$500:ProductFormatsInstances.this.JF[P17],implicitevidence$501:ProductFormatsInstances.this.JF[P18],implicitevidence$502:ProductFormatsInstances.this.JF[P19],implicitevidence$503:ProductFormatsInstances.this.JF[P20],implicitevidence$504:ProductFormatsInstances.this.JF[P21],implicitevidence$505:ProductFormatsInstances.this.JF[P22],implicitevidence$506:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20, P21) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String, fieldName10: String, fieldName11: String, fieldName12: String, fieldName13: String, fieldName14: String, fieldName15: String, fieldName16: String, fieldName17: String, fieldName18: String, fieldName19: String, fieldName20: String, fieldName21: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16], arg16: JF[P17], arg17: JF[P18], arg18: JF[P19], arg19: JF[P20], arg20: JF[P21]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,P20,P21,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,P20,P21)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String,fieldName10:String,fieldName11:String,fieldName12:String,fieldName13:String,fieldName14:String,fieldName15:String,fieldName16:String,fieldName17:String,fieldName18:String,fieldName19:String,fieldName20:String,fieldName21:String)(implicitevidence$463:ProductFormatsInstances.this.JF[P1],implicitevidence$464:ProductFormatsInstances.this.JF[P2],implicitevidence$465:ProductFormatsInstances.this.JF[P3],implicitevidence$466:ProductFormatsInstances.this.JF[P4],implicitevidence$467:ProductFormatsInstances.this.JF[P5],implicitevidence$468:ProductFormatsInstances.this.JF[P6],implicitevidence$469:ProductFormatsInstances.this.JF[P7],implicitevidence$470:ProductFormatsInstances.this.JF[P8],implicitevidence$471:ProductFormatsInstances.this.JF[P9],implicitevidence$472:ProductFormatsInstances.this.JF[P10],implicitevidence$473:ProductFormatsInstances.this.JF[P11],implicitevidence$474:ProductFormatsInstances.this.JF[P12],implicitevidence$475:ProductFormatsInstances.this.JF[P13],implicitevidence$476:ProductFormatsInstances.this.JF[P14],implicitevidence$477:ProductFormatsInstances.this.JF[P15],implicitevidence$478:ProductFormatsInstances.this.JF[P16],implicitevidence$479:ProductFormatsInstances.this.JF[P17],implicitevidence$480:ProductFormatsInstances.this.JF[P18],implicitevidence$481:ProductFormatsInstances.this.JF[P19],implicitevidence$482:ProductFormatsInstances.this.JF[P20],implicitevidence$483:ProductFormatsInstances.this.JF[P21]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat21", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20, P21) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16], arg16: JF[P17], arg17: JF[P18], arg18: JF[P19], arg19: JF[P20], arg20: JF[P21], arg21: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat21", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat21[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,P20,P21,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,P20,P21)=>T)(implicitevidence$441:ProductFormatsInstances.this.JF[P1],implicitevidence$442:ProductFormatsInstances.this.JF[P2],implicitevidence$443:ProductFormatsInstances.this.JF[P3],implicitevidence$444:ProductFormatsInstances.this.JF[P4],implicitevidence$445:ProductFormatsInstances.this.JF[P5],implicitevidence$446:ProductFormatsInstances.this.JF[P6],implicitevidence$447:ProductFormatsInstances.this.JF[P7],implicitevidence$448:ProductFormatsInstances.this.JF[P8],implicitevidence$449:ProductFormatsInstances.this.JF[P9],implicitevidence$450:ProductFormatsInstances.this.JF[P10],implicitevidence$451:ProductFormatsInstances.this.JF[P11],implicitevidence$452:ProductFormatsInstances.this.JF[P12],implicitevidence$453:ProductFormatsInstances.this.JF[P13],implicitevidence$454:ProductFormatsInstances.this.JF[P14],implicitevidence$455:ProductFormatsInstances.this.JF[P15],implicitevidence$456:ProductFormatsInstances.this.JF[P16],implicitevidence$457:ProductFormatsInstances.this.JF[P17],implicitevidence$458:ProductFormatsInstances.this.JF[P18],implicitevidence$459:ProductFormatsInstances.this.JF[P19],implicitevidence$460:ProductFormatsInstances.this.JF[P20],implicitevidence$461:ProductFormatsInstances.this.JF[P21],implicitevidence$462:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String, fieldName10: String, fieldName11: String, fieldName12: String, fieldName13: String, fieldName14: String, fieldName15: String, fieldName16: String, fieldName17: String, fieldName18: String, fieldName19: String, fieldName20: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16], arg16: JF[P17], arg17: JF[P18], arg18: JF[P19], arg19: JF[P20]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,P20,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,P20)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String,fieldName10:String,fieldName11:String,fieldName12:String,fieldName13:String,fieldName14:String,fieldName15:String,fieldName16:String,fieldName17:String,fieldName18:String,fieldName19:String,fieldName20:String)(implicitevidence$421:ProductFormatsInstances.this.JF[P1],implicitevidence$422:ProductFormatsInstances.this.JF[P2],implicitevidence$423:ProductFormatsInstances.this.JF[P3],implicitevidence$424:ProductFormatsInstances.this.JF[P4],implicitevidence$425:ProductFormatsInstances.this.JF[P5],implicitevidence$426:ProductFormatsInstances.this.JF[P6],implicitevidence$427:ProductFormatsInstances.this.JF[P7],implicitevidence$428:ProductFormatsInstances.this.JF[P8],implicitevidence$429:ProductFormatsInstances.this.JF[P9],implicitevidence$430:ProductFormatsInstances.this.JF[P10],implicitevidence$431:ProductFormatsInstances.this.JF[P11],implicitevidence$432:ProductFormatsInstances.this.JF[P12],implicitevidence$433:ProductFormatsInstances.this.JF[P13],implicitevidence$434:ProductFormatsInstances.this.JF[P14],implicitevidence$435:ProductFormatsInstances.this.JF[P15],implicitevidence$436:ProductFormatsInstances.this.JF[P16],implicitevidence$437:ProductFormatsInstances.this.JF[P17],implicitevidence$438:ProductFormatsInstances.this.JF[P18],implicitevidence$439:ProductFormatsInstances.this.JF[P19],implicitevidence$440:ProductFormatsInstances.this.JF[P20]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat20", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16], arg16: JF[P17], arg17: JF[P18], arg18: JF[P19], arg19: JF[P20], arg20: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat20", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat20[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,P20,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,P20)=>T)(implicitevidence$400:ProductFormatsInstances.this.JF[P1],implicitevidence$401:ProductFormatsInstances.this.JF[P2],implicitevidence$402:ProductFormatsInstances.this.JF[P3],implicitevidence$403:ProductFormatsInstances.this.JF[P4],implicitevidence$404:ProductFormatsInstances.this.JF[P5],implicitevidence$405:ProductFormatsInstances.this.JF[P6],implicitevidence$406:ProductFormatsInstances.this.JF[P7],implicitevidence$407:ProductFormatsInstances.this.JF[P8],implicitevidence$408:ProductFormatsInstances.this.JF[P9],implicitevidence$409:ProductFormatsInstances.this.JF[P10],implicitevidence$410:ProductFormatsInstances.this.JF[P11],implicitevidence$411:ProductFormatsInstances.this.JF[P12],implicitevidence$412:ProductFormatsInstances.this.JF[P13],implicitevidence$413:ProductFormatsInstances.this.JF[P14],implicitevidence$414:ProductFormatsInstances.this.JF[P15],implicitevidence$415:ProductFormatsInstances.this.JF[P16],implicitevidence$416:ProductFormatsInstances.this.JF[P17],implicitevidence$417:ProductFormatsInstances.this.JF[P18],implicitevidence$418:ProductFormatsInstances.this.JF[P19],implicitevidence$419:ProductFormatsInstances.this.JF[P20],implicitevidence$420:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String, fieldName10: String, fieldName11: String, fieldName12: String, fieldName13: String, fieldName14: String, fieldName15: String, fieldName16: String, fieldName17: String, fieldName18: String, fieldName19: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16], arg16: JF[P17], arg17: JF[P18], arg18: JF[P19]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String,fieldName10:String,fieldName11:String,fieldName12:String,fieldName13:String,fieldName14:String,fieldName15:String,fieldName16:String,fieldName17:String,fieldName18:String,fieldName19:String)(implicitevidence$381:ProductFormatsInstances.this.JF[P1],implicitevidence$382:ProductFormatsInstances.this.JF[P2],implicitevidence$383:ProductFormatsInstances.this.JF[P3],implicitevidence$384:ProductFormatsInstances.this.JF[P4],implicitevidence$385:ProductFormatsInstances.this.JF[P5],implicitevidence$386:ProductFormatsInstances.this.JF[P6],implicitevidence$387:ProductFormatsInstances.this.JF[P7],implicitevidence$388:ProductFormatsInstances.this.JF[P8],implicitevidence$389:ProductFormatsInstances.this.JF[P9],implicitevidence$390:ProductFormatsInstances.this.JF[P10],implicitevidence$391:ProductFormatsInstances.this.JF[P11],implicitevidence$392:ProductFormatsInstances.this.JF[P12],implicitevidence$393:ProductFormatsInstances.this.JF[P13],implicitevidence$394:ProductFormatsInstances.this.JF[P14],implicitevidence$395:ProductFormatsInstances.this.JF[P15],implicitevidence$396:ProductFormatsInstances.this.JF[P16],implicitevidence$397:ProductFormatsInstances.this.JF[P17],implicitevidence$398:ProductFormatsInstances.this.JF[P18],implicitevidence$399:ProductFormatsInstances.this.JF[P19]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat19", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16], arg16: JF[P17], arg17: JF[P18], arg18: JF[P19], arg19: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat19", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat19[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19)=>T)(implicitevidence$361:ProductFormatsInstances.this.JF[P1],implicitevidence$362:ProductFormatsInstances.this.JF[P2],implicitevidence$363:ProductFormatsInstances.this.JF[P3],implicitevidence$364:ProductFormatsInstances.this.JF[P4],implicitevidence$365:ProductFormatsInstances.this.JF[P5],implicitevidence$366:ProductFormatsInstances.this.JF[P6],implicitevidence$367:ProductFormatsInstances.this.JF[P7],implicitevidence$368:ProductFormatsInstances.this.JF[P8],implicitevidence$369:ProductFormatsInstances.this.JF[P9],implicitevidence$370:ProductFormatsInstances.this.JF[P10],implicitevidence$371:ProductFormatsInstances.this.JF[P11],implicitevidence$372:ProductFormatsInstances.this.JF[P12],implicitevidence$373:ProductFormatsInstances.this.JF[P13],implicitevidence$374:ProductFormatsInstances.this.JF[P14],implicitevidence$375:ProductFormatsInstances.this.JF[P15],implicitevidence$376:ProductFormatsInstances.this.JF[P16],implicitevidence$377:ProductFormatsInstances.this.JF[P17],implicitevidence$378:ProductFormatsInstances.this.JF[P18],implicitevidence$379:ProductFormatsInstances.this.JF[P19],implicitevidence$380:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String, fieldName10: String, fieldName11: String, fieldName12: String, fieldName13: String, fieldName14: String, fieldName15: String, fieldName16: String, fieldName17: String, fieldName18: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16], arg16: JF[P17], arg17: JF[P18]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String,fieldName10:String,fieldName11:String,fieldName12:String,fieldName13:String,fieldName14:String,fieldName15:String,fieldName16:String,fieldName17:String,fieldName18:String)(implicitevidence$343:ProductFormatsInstances.this.JF[P1],implicitevidence$344:ProductFormatsInstances.this.JF[P2],implicitevidence$345:ProductFormatsInstances.this.JF[P3],implicitevidence$346:ProductFormatsInstances.this.JF[P4],implicitevidence$347:ProductFormatsInstances.this.JF[P5],implicitevidence$348:ProductFormatsInstances.this.JF[P6],implicitevidence$349:ProductFormatsInstances.this.JF[P7],implicitevidence$350:ProductFormatsInstances.this.JF[P8],implicitevidence$351:ProductFormatsInstances.this.JF[P9],implicitevidence$352:ProductFormatsInstances.this.JF[P10],implicitevidence$353:ProductFormatsInstances.this.JF[P11],implicitevidence$354:ProductFormatsInstances.this.JF[P12],implicitevidence$355:ProductFormatsInstances.this.JF[P13],implicitevidence$356:ProductFormatsInstances.this.JF[P14],implicitevidence$357:ProductFormatsInstances.this.JF[P15],implicitevidence$358:ProductFormatsInstances.this.JF[P16],implicitevidence$359:ProductFormatsInstances.this.JF[P17],implicitevidence$360:ProductFormatsInstances.this.JF[P18]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat18", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16], arg16: JF[P17], arg17: JF[P18], arg18: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat18", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat18[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18)=>T)(implicitevidence$324:ProductFormatsInstances.this.JF[P1],implicitevidence$325:ProductFormatsInstances.this.JF[P2],implicitevidence$326:ProductFormatsInstances.this.JF[P3],implicitevidence$327:ProductFormatsInstances.this.JF[P4],implicitevidence$328:ProductFormatsInstances.this.JF[P5],implicitevidence$329:ProductFormatsInstances.this.JF[P6],implicitevidence$330:ProductFormatsInstances.this.JF[P7],implicitevidence$331:ProductFormatsInstances.this.JF[P8],implicitevidence$332:ProductFormatsInstances.this.JF[P9],implicitevidence$333:ProductFormatsInstances.this.JF[P10],implicitevidence$334:ProductFormatsInstances.this.JF[P11],implicitevidence$335:ProductFormatsInstances.this.JF[P12],implicitevidence$336:ProductFormatsInstances.this.JF[P13],implicitevidence$337:ProductFormatsInstances.this.JF[P14],implicitevidence$338:ProductFormatsInstances.this.JF[P15],implicitevidence$339:ProductFormatsInstances.this.JF[P16],implicitevidence$340:ProductFormatsInstances.this.JF[P17],implicitevidence$341:ProductFormatsInstances.this.JF[P18],implicitevidence$342:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String, fieldName10: String, fieldName11: String, fieldName12: String, fieldName13: String, fieldName14: String, fieldName15: String, fieldName16: String, fieldName17: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16], arg16: JF[P17]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String,fieldName10:String,fieldName11:String,fieldName12:String,fieldName13:String,fieldName14:String,fieldName15:String,fieldName16:String,fieldName17:String)(implicitevidence$307:ProductFormatsInstances.this.JF[P1],implicitevidence$308:ProductFormatsInstances.this.JF[P2],implicitevidence$309:ProductFormatsInstances.this.JF[P3],implicitevidence$310:ProductFormatsInstances.this.JF[P4],implicitevidence$311:ProductFormatsInstances.this.JF[P5],implicitevidence$312:ProductFormatsInstances.this.JF[P6],implicitevidence$313:ProductFormatsInstances.this.JF[P7],implicitevidence$314:ProductFormatsInstances.this.JF[P8],implicitevidence$315:ProductFormatsInstances.this.JF[P9],implicitevidence$316:ProductFormatsInstances.this.JF[P10],implicitevidence$317:ProductFormatsInstances.this.JF[P11],implicitevidence$318:ProductFormatsInstances.this.JF[P12],implicitevidence$319:ProductFormatsInstances.this.JF[P13],implicitevidence$320:ProductFormatsInstances.this.JF[P14],implicitevidence$321:ProductFormatsInstances.this.JF[P15],implicitevidence$322:ProductFormatsInstances.this.JF[P16],implicitevidence$323:ProductFormatsInstances.this.JF[P17]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat17", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16], arg16: JF[P17], arg17: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat17", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat17[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17)=>T)(implicitevidence$289:ProductFormatsInstances.this.JF[P1],implicitevidence$290:ProductFormatsInstances.this.JF[P2],implicitevidence$291:ProductFormatsInstances.this.JF[P3],implicitevidence$292:ProductFormatsInstances.this.JF[P4],implicitevidence$293:ProductFormatsInstances.this.JF[P5],implicitevidence$294:ProductFormatsInstances.this.JF[P6],implicitevidence$295:ProductFormatsInstances.this.JF[P7],implicitevidence$296:ProductFormatsInstances.this.JF[P8],implicitevidence$297:ProductFormatsInstances.this.JF[P9],implicitevidence$298:ProductFormatsInstances.this.JF[P10],implicitevidence$299:ProductFormatsInstances.this.JF[P11],implicitevidence$300:ProductFormatsInstances.this.JF[P12],implicitevidence$301:ProductFormatsInstances.this.JF[P13],implicitevidence$302:ProductFormatsInstances.this.JF[P14],implicitevidence$303:ProductFormatsInstances.this.JF[P15],implicitevidence$304:ProductFormatsInstances.this.JF[P16],implicitevidence$305:ProductFormatsInstances.this.JF[P17],implicitevidence$306:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String, fieldName10: String, fieldName11: String, fieldName12: String, fieldName13: String, fieldName14: String, fieldName15: String, fieldName16: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String,fieldName10:String,fieldName11:String,fieldName12:String,fieldName13:String,fieldName14:String,fieldName15:String,fieldName16:String)(implicitevidence$273:ProductFormatsInstances.this.JF[P1],implicitevidence$274:ProductFormatsInstances.this.JF[P2],implicitevidence$275:ProductFormatsInstances.this.JF[P3],implicitevidence$276:ProductFormatsInstances.this.JF[P4],implicitevidence$277:ProductFormatsInstances.this.JF[P5],implicitevidence$278:ProductFormatsInstances.this.JF[P6],implicitevidence$279:ProductFormatsInstances.this.JF[P7],implicitevidence$280:ProductFormatsInstances.this.JF[P8],implicitevidence$281:ProductFormatsInstances.this.JF[P9],implicitevidence$282:ProductFormatsInstances.this.JF[P10],implicitevidence$283:ProductFormatsInstances.this.JF[P11],implicitevidence$284:ProductFormatsInstances.this.JF[P12],implicitevidence$285:ProductFormatsInstances.this.JF[P13],implicitevidence$286:ProductFormatsInstances.this.JF[P14],implicitevidence$287:ProductFormatsInstances.this.JF[P15],implicitevidence$288:ProductFormatsInstances.this.JF[P16]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat16", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: JF[P16], arg16: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat16", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat16[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16)=>T)(implicitevidence$256:ProductFormatsInstances.this.JF[P1],implicitevidence$257:ProductFormatsInstances.this.JF[P2],implicitevidence$258:ProductFormatsInstances.this.JF[P3],implicitevidence$259:ProductFormatsInstances.this.JF[P4],implicitevidence$260:ProductFormatsInstances.this.JF[P5],implicitevidence$261:ProductFormatsInstances.this.JF[P6],implicitevidence$262:ProductFormatsInstances.this.JF[P7],implicitevidence$263:ProductFormatsInstances.this.JF[P8],implicitevidence$264:ProductFormatsInstances.this.JF[P9],implicitevidence$265:ProductFormatsInstances.this.JF[P10],implicitevidence$266:ProductFormatsInstances.this.JF[P11],implicitevidence$267:ProductFormatsInstances.this.JF[P12],implicitevidence$268:ProductFormatsInstances.this.JF[P13],implicitevidence$269:ProductFormatsInstances.this.JF[P14],implicitevidence$270:ProductFormatsInstances.this.JF[P15],implicitevidence$271:ProductFormatsInstances.this.JF[P16],implicitevidence$272:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String, fieldName10: String, fieldName11: String, fieldName12: String, fieldName13: String, fieldName14: String, fieldName15: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String,fieldName10:String,fieldName11:String,fieldName12:String,fieldName13:String,fieldName14:String,fieldName15:String)(implicitevidence$241:ProductFormatsInstances.this.JF[P1],implicitevidence$242:ProductFormatsInstances.this.JF[P2],implicitevidence$243:ProductFormatsInstances.this.JF[P3],implicitevidence$244:ProductFormatsInstances.this.JF[P4],implicitevidence$245:ProductFormatsInstances.this.JF[P5],implicitevidence$246:ProductFormatsInstances.this.JF[P6],implicitevidence$247:ProductFormatsInstances.this.JF[P7],implicitevidence$248:ProductFormatsInstances.this.JF[P8],implicitevidence$249:ProductFormatsInstances.this.JF[P9],implicitevidence$250:ProductFormatsInstances.this.JF[P10],implicitevidence$251:ProductFormatsInstances.this.JF[P11],implicitevidence$252:ProductFormatsInstances.this.JF[P12],implicitevidence$253:ProductFormatsInstances.this.JF[P13],implicitevidence$254:ProductFormatsInstances.this.JF[P14],implicitevidence$255:ProductFormatsInstances.this.JF[P15]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat15", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: JF[P15], arg15: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat15", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat15[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15)=>T)(implicitevidence$225:ProductFormatsInstances.this.JF[P1],implicitevidence$226:ProductFormatsInstances.this.JF[P2],implicitevidence$227:ProductFormatsInstances.this.JF[P3],implicitevidence$228:ProductFormatsInstances.this.JF[P4],implicitevidence$229:ProductFormatsInstances.this.JF[P5],implicitevidence$230:ProductFormatsInstances.this.JF[P6],implicitevidence$231:ProductFormatsInstances.this.JF[P7],implicitevidence$232:ProductFormatsInstances.this.JF[P8],implicitevidence$233:ProductFormatsInstances.this.JF[P9],implicitevidence$234:ProductFormatsInstances.this.JF[P10],implicitevidence$235:ProductFormatsInstances.this.JF[P11],implicitevidence$236:ProductFormatsInstances.this.JF[P12],implicitevidence$237:ProductFormatsInstances.this.JF[P13],implicitevidence$238:ProductFormatsInstances.this.JF[P14],implicitevidence$239:ProductFormatsInstances.this.JF[P15],implicitevidence$240:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String, fieldName10: String, fieldName11: String, fieldName12: String, fieldName13: String, fieldName14: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String,fieldName10:String,fieldName11:String,fieldName12:String,fieldName13:String,fieldName14:String)(implicitevidence$211:ProductFormatsInstances.this.JF[P1],implicitevidence$212:ProductFormatsInstances.this.JF[P2],implicitevidence$213:ProductFormatsInstances.this.JF[P3],implicitevidence$214:ProductFormatsInstances.this.JF[P4],implicitevidence$215:ProductFormatsInstances.this.JF[P5],implicitevidence$216:ProductFormatsInstances.this.JF[P6],implicitevidence$217:ProductFormatsInstances.this.JF[P7],implicitevidence$218:ProductFormatsInstances.this.JF[P8],implicitevidence$219:ProductFormatsInstances.this.JF[P9],implicitevidence$220:ProductFormatsInstances.this.JF[P10],implicitevidence$221:ProductFormatsInstances.this.JF[P11],implicitevidence$222:ProductFormatsInstances.this.JF[P12],implicitevidence$223:ProductFormatsInstances.this.JF[P13],implicitevidence$224:ProductFormatsInstances.this.JF[P14]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat14", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: JF[P14], arg14: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat14", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat14[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14)=>T)(implicitevidence$196:ProductFormatsInstances.this.JF[P1],implicitevidence$197:ProductFormatsInstances.this.JF[P2],implicitevidence$198:ProductFormatsInstances.this.JF[P3],implicitevidence$199:ProductFormatsInstances.this.JF[P4],implicitevidence$200:ProductFormatsInstances.this.JF[P5],implicitevidence$201:ProductFormatsInstances.this.JF[P6],implicitevidence$202:ProductFormatsInstances.this.JF[P7],implicitevidence$203:ProductFormatsInstances.this.JF[P8],implicitevidence$204:ProductFormatsInstances.this.JF[P9],implicitevidence$205:ProductFormatsInstances.this.JF[P10],implicitevidence$206:ProductFormatsInstances.this.JF[P11],implicitevidence$207:ProductFormatsInstances.this.JF[P12],implicitevidence$208:ProductFormatsInstances.this.JF[P13],implicitevidence$209:ProductFormatsInstances.this.JF[P14],implicitevidence$210:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String, fieldName10: String, fieldName11: String, fieldName12: String, fieldName13: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String,fieldName10:String,fieldName11:String,fieldName12:String,fieldName13:String)(implicitevidence$183:ProductFormatsInstances.this.JF[P1],implicitevidence$184:ProductFormatsInstances.this.JF[P2],implicitevidence$185:ProductFormatsInstances.this.JF[P3],implicitevidence$186:ProductFormatsInstances.this.JF[P4],implicitevidence$187:ProductFormatsInstances.this.JF[P5],implicitevidence$188:ProductFormatsInstances.this.JF[P6],implicitevidence$189:ProductFormatsInstances.this.JF[P7],implicitevidence$190:ProductFormatsInstances.this.JF[P8],implicitevidence$191:ProductFormatsInstances.this.JF[P9],implicitevidence$192:ProductFormatsInstances.this.JF[P10],implicitevidence$193:ProductFormatsInstances.this.JF[P11],implicitevidence$194:ProductFormatsInstances.this.JF[P12],implicitevidence$195:ProductFormatsInstances.this.JF[P13]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat13", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: JF[P13], arg13: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat13", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat13[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13)=>T)(implicitevidence$169:ProductFormatsInstances.this.JF[P1],implicitevidence$170:ProductFormatsInstances.this.JF[P2],implicitevidence$171:ProductFormatsInstances.this.JF[P3],implicitevidence$172:ProductFormatsInstances.this.JF[P4],implicitevidence$173:ProductFormatsInstances.this.JF[P5],implicitevidence$174:ProductFormatsInstances.this.JF[P6],implicitevidence$175:ProductFormatsInstances.this.JF[P7],implicitevidence$176:ProductFormatsInstances.this.JF[P8],implicitevidence$177:ProductFormatsInstances.this.JF[P9],implicitevidence$178:ProductFormatsInstances.this.JF[P10],implicitevidence$179:ProductFormatsInstances.this.JF[P11],implicitevidence$180:ProductFormatsInstances.this.JF[P12],implicitevidence$181:ProductFormatsInstances.this.JF[P13],implicitevidence$182:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String, fieldName10: String, fieldName11: String, fieldName12: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String,fieldName10:String,fieldName11:String,fieldName12:String)(implicitevidence$157:ProductFormatsInstances.this.JF[P1],implicitevidence$158:ProductFormatsInstances.this.JF[P2],implicitevidence$159:ProductFormatsInstances.this.JF[P3],implicitevidence$160:ProductFormatsInstances.this.JF[P4],implicitevidence$161:ProductFormatsInstances.this.JF[P5],implicitevidence$162:ProductFormatsInstances.this.JF[P6],implicitevidence$163:ProductFormatsInstances.this.JF[P7],implicitevidence$164:ProductFormatsInstances.this.JF[P8],implicitevidence$165:ProductFormatsInstances.this.JF[P9],implicitevidence$166:ProductFormatsInstances.this.JF[P10],implicitevidence$167:ProductFormatsInstances.this.JF[P11],implicitevidence$168:ProductFormatsInstances.this.JF[P12]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat12", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: JF[P12], arg12: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat12", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat12[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12)=>T)(implicitevidence$144:ProductFormatsInstances.this.JF[P1],implicitevidence$145:ProductFormatsInstances.this.JF[P2],implicitevidence$146:ProductFormatsInstances.this.JF[P3],implicitevidence$147:ProductFormatsInstances.this.JF[P4],implicitevidence$148:ProductFormatsInstances.this.JF[P5],implicitevidence$149:ProductFormatsInstances.this.JF[P6],implicitevidence$150:ProductFormatsInstances.this.JF[P7],implicitevidence$151:ProductFormatsInstances.this.JF[P8],implicitevidence$152:ProductFormatsInstances.this.JF[P9],implicitevidence$153:ProductFormatsInstances.this.JF[P10],implicitevidence$154:ProductFormatsInstances.this.JF[P11],implicitevidence$155:ProductFormatsInstances.this.JF[P12],implicitevidence$156:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String, fieldName10: String, fieldName11: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String,fieldName10:String,fieldName11:String)(implicitevidence$133:ProductFormatsInstances.this.JF[P1],implicitevidence$134:ProductFormatsInstances.this.JF[P2],implicitevidence$135:ProductFormatsInstances.this.JF[P3],implicitevidence$136:ProductFormatsInstances.this.JF[P4],implicitevidence$137:ProductFormatsInstances.this.JF[P5],implicitevidence$138:ProductFormatsInstances.this.JF[P6],implicitevidence$139:ProductFormatsInstances.this.JF[P7],implicitevidence$140:ProductFormatsInstances.this.JF[P8],implicitevidence$141:ProductFormatsInstances.this.JF[P9],implicitevidence$142:ProductFormatsInstances.this.JF[P10],implicitevidence$143:ProductFormatsInstances.this.JF[P11]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat11", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: JF[P11], arg11: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat11", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat11[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11)=>T)(implicitevidence$121:ProductFormatsInstances.this.JF[P1],implicitevidence$122:ProductFormatsInstances.this.JF[P2],implicitevidence$123:ProductFormatsInstances.this.JF[P3],implicitevidence$124:ProductFormatsInstances.this.JF[P4],implicitevidence$125:ProductFormatsInstances.this.JF[P5],implicitevidence$126:ProductFormatsInstances.this.JF[P6],implicitevidence$127:ProductFormatsInstances.this.JF[P7],implicitevidence$128:ProductFormatsInstances.this.JF[P8],implicitevidence$129:ProductFormatsInstances.this.JF[P9],implicitevidence$130:ProductFormatsInstances.this.JF[P10],implicitevidence$131:ProductFormatsInstances.this.JF[P11],implicitevidence$132:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String, fieldName10: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String,fieldName10:String)(implicitevidence$111:ProductFormatsInstances.this.JF[P1],implicitevidence$112:ProductFormatsInstances.this.JF[P2],implicitevidence$113:ProductFormatsInstances.this.JF[P3],implicitevidence$114:ProductFormatsInstances.this.JF[P4],implicitevidence$115:ProductFormatsInstances.this.JF[P5],implicitevidence$116:ProductFormatsInstances.this.JF[P6],implicitevidence$117:ProductFormatsInstances.this.JF[P7],implicitevidence$118:ProductFormatsInstances.this.JF[P8],implicitevidence$119:ProductFormatsInstances.this.JF[P9],implicitevidence$120:ProductFormatsInstances.this.JF[P10]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat10", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: JF[P10], arg10: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat10", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat10[P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10)=>T)(implicitevidence$100:ProductFormatsInstances.this.JF[P1],implicitevidence$101:ProductFormatsInstances.this.JF[P2],implicitevidence$102:ProductFormatsInstances.this.JF[P3],implicitevidence$103:ProductFormatsInstances.this.JF[P4],implicitevidence$104:ProductFormatsInstances.this.JF[P5],implicitevidence$105:ProductFormatsInstances.this.JF[P6],implicitevidence$106:ProductFormatsInstances.this.JF[P7],implicitevidence$107:ProductFormatsInstances.this.JF[P8],implicitevidence$108:ProductFormatsInstances.this.JF[P9],implicitevidence$109:ProductFormatsInstances.this.JF[P10],implicitevidence$110:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String, fieldName9: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,P9,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String,fieldName9:String)(implicitevidence$91:ProductFormatsInstances.this.JF[P1],implicitevidence$92:ProductFormatsInstances.this.JF[P2],implicitevidence$93:ProductFormatsInstances.this.JF[P3],implicitevidence$94:ProductFormatsInstances.this.JF[P4],implicitevidence$95:ProductFormatsInstances.this.JF[P5],implicitevidence$96:ProductFormatsInstances.this.JF[P6],implicitevidence$97:ProductFormatsInstances.this.JF[P7],implicitevidence$98:ProductFormatsInstances.this.JF[P8],implicitevidence$99:ProductFormatsInstances.this.JF[P9]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat9", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8, P9) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: JF[P9], arg9: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat9", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat9[P1,P2,P3,P4,P5,P6,P7,P8,P9,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8,P9)=>T)(implicitevidence$81:ProductFormatsInstances.this.JF[P1],implicitevidence$82:ProductFormatsInstances.this.JF[P2],implicitevidence$83:ProductFormatsInstances.this.JF[P3],implicitevidence$84:ProductFormatsInstances.this.JF[P4],implicitevidence$85:ProductFormatsInstances.this.JF[P5],implicitevidence$86:ProductFormatsInstances.this.JF[P6],implicitevidence$87:ProductFormatsInstances.this.JF[P7],implicitevidence$88:ProductFormatsInstances.this.JF[P8],implicitevidence$89:ProductFormatsInstances.this.JF[P9],implicitevidence$90:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String, fieldName8: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,P8,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String,fieldName8:String)(implicitevidence$73:ProductFormatsInstances.this.JF[P1],implicitevidence$74:ProductFormatsInstances.this.JF[P2],implicitevidence$75:ProductFormatsInstances.this.JF[P3],implicitevidence$76:ProductFormatsInstances.this.JF[P4],implicitevidence$77:ProductFormatsInstances.this.JF[P5],implicitevidence$78:ProductFormatsInstances.this.JF[P6],implicitevidence$79:ProductFormatsInstances.this.JF[P7],implicitevidence$80:ProductFormatsInstances.this.JF[P8]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat8", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7, P8) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: JF[P8], arg8: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat8", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat8[P1,P2,P3,P4,P5,P6,P7,P8,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7,P8)=>T)(implicitevidence$64:ProductFormatsInstances.this.JF[P1],implicitevidence$65:ProductFormatsInstances.this.JF[P2],implicitevidence$66:ProductFormatsInstances.this.JF[P3],implicitevidence$67:ProductFormatsInstances.this.JF[P4],implicitevidence$68:ProductFormatsInstances.this.JF[P5],implicitevidence$69:ProductFormatsInstances.this.JF[P6],implicitevidence$70:ProductFormatsInstances.this.JF[P7],implicitevidence$71:ProductFormatsInstances.this.JF[P8],implicitevidence$72:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String, fieldName7: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat[P1,P2,P3,P4,P5,P6,P7,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String,fieldName7:String)(implicitevidence$57:ProductFormatsInstances.this.JF[P1],implicitevidence$58:ProductFormatsInstances.this.JF[P2],implicitevidence$59:ProductFormatsInstances.this.JF[P3],implicitevidence$60:ProductFormatsInstances.this.JF[P4],implicitevidence$61:ProductFormatsInstances.this.JF[P5],implicitevidence$62:ProductFormatsInstances.this.JF[P6],implicitevidence$63:ProductFormatsInstances.this.JF[P7]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat7", "tail" : "(construct: (P1, P2, P3, P4, P5, P6, P7) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: JF[P7], arg7: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat7", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat7[P1,P2,P3,P4,P5,P6,P7,T<:Product](construct:(P1,P2,P3,P4,P5,P6,P7)=>T)(implicitevidence$49:ProductFormatsInstances.this.JF[P1],implicitevidence$50:ProductFormatsInstances.this.JF[P2],implicitevidence$51:ProductFormatsInstances.this.JF[P3],implicitevidence$52:ProductFormatsInstances.this.JF[P4],implicitevidence$53:ProductFormatsInstances.this.JF[P5],implicitevidence$54:ProductFormatsInstances.this.JF[P6],implicitevidence$55:ProductFormatsInstances.this.JF[P7],implicitevidence$56:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5, P6) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String, fieldName6: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat[P1,P2,P3,P4,P5,P6,T<:Product](construct:(P1,P2,P3,P4,P5,P6)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String,fieldName6:String)(implicitevidence$43:ProductFormatsInstances.this.JF[P1],implicitevidence$44:ProductFormatsInstances.this.JF[P2],implicitevidence$45:ProductFormatsInstances.this.JF[P3],implicitevidence$46:ProductFormatsInstances.this.JF[P4],implicitevidence$47:ProductFormatsInstances.this.JF[P5],implicitevidence$48:ProductFormatsInstances.this.JF[P6]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat6", "tail" : "(construct: (P1, P2, P3, P4, P5, P6) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: JF[P6], arg6: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat6", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat6[P1,P2,P3,P4,P5,P6,T<:Product](construct:(P1,P2,P3,P4,P5,P6)=>T)(implicitevidence$36:ProductFormatsInstances.this.JF[P1],implicitevidence$37:ProductFormatsInstances.this.JF[P2],implicitevidence$38:ProductFormatsInstances.this.JF[P3],implicitevidence$39:ProductFormatsInstances.this.JF[P4],implicitevidence$40:ProductFormatsInstances.this.JF[P5],implicitevidence$41:ProductFormatsInstances.this.JF[P6],implicitevidence$42:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4, P5) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String, fieldName5: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat[P1,P2,P3,P4,P5,T<:Product](construct:(P1,P2,P3,P4,P5)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String,fieldName5:String)(implicitevidence$31:ProductFormatsInstances.this.JF[P1],implicitevidence$32:ProductFormatsInstances.this.JF[P2],implicitevidence$33:ProductFormatsInstances.this.JF[P3],implicitevidence$34:ProductFormatsInstances.this.JF[P4],implicitevidence$35:ProductFormatsInstances.this.JF[P5]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat5", "tail" : "(construct: (P1, P2, P3, P4, P5) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: JF[P5], arg5: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat5", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat5[P1,P2,P3,P4,P5,T<:Product](construct:(P1,P2,P3,P4,P5)=>T)(implicitevidence$25:ProductFormatsInstances.this.JF[P1],implicitevidence$26:ProductFormatsInstances.this.JF[P2],implicitevidence$27:ProductFormatsInstances.this.JF[P3],implicitevidence$28:ProductFormatsInstances.this.JF[P4],implicitevidence$29:ProductFormatsInstances.this.JF[P5],implicitevidence$30:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3, P4) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String, fieldName4: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat[P1,P2,P3,P4,T<:Product](construct:(P1,P2,P3,P4)=>T,fieldName1:String,fieldName2:String,fieldName3:String,fieldName4:String)(implicitevidence$21:ProductFormatsInstances.this.JF[P1],implicitevidence$22:ProductFormatsInstances.this.JF[P2],implicitevidence$23:ProductFormatsInstances.this.JF[P3],implicitevidence$24:ProductFormatsInstances.this.JF[P4]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat4", "tail" : "(construct: (P1, P2, P3, P4) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: JF[P4], arg4: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat4", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat4[P1,P2,P3,P4,T<:Product](construct:(P1,P2,P3,P4)=>T)(implicitevidence$16:ProductFormatsInstances.this.JF[P1],implicitevidence$17:ProductFormatsInstances.this.JF[P2],implicitevidence$18:ProductFormatsInstances.this.JF[P3],implicitevidence$19:ProductFormatsInstances.this.JF[P4],implicitevidence$20:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2, P3) ⇒ T, fieldName1: String, fieldName2: String, fieldName3: String)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat[P1,P2,P3,T<:Product](construct:(P1,P2,P3)=>T,fieldName1:String,fieldName2:String,fieldName3:String)(implicitevidence$13:ProductFormatsInstances.this.JF[P1],implicitevidence$14:ProductFormatsInstances.this.JF[P2],implicitevidence$15:ProductFormatsInstances.this.JF[P3]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat3", "tail" : "(construct: (P1, P2, P3) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: JF[P3], arg3: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat3", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat3[P1,P2,P3,T<:Product](construct:(P1,P2,P3)=>T)(implicitevidence$9:ProductFormatsInstances.this.JF[P1],implicitevidence$10:ProductFormatsInstances.this.JF[P2],implicitevidence$11:ProductFormatsInstances.this.JF[P3],implicitevidence$12:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1, P2) ⇒ T, fieldName1: String, fieldName2: String)(arg0: JF[P1], arg1: JF[P2]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat[P1,P2,T<:Product](construct:(P1,P2)=>T,fieldName1:String,fieldName2:String)(implicitevidence$7:ProductFormatsInstances.this.JF[P1],implicitevidence$8:ProductFormatsInstances.this.JF[P2]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat2", "tail" : "(construct: (P1, P2) ⇒ T)(arg0: JF[P1], arg1: JF[P2], arg2: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat2", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat2[P1,P2,T<:Product](construct:(P1,P2)=>T)(implicitevidence$4:ProductFormatsInstances.this.JF[P1],implicitevidence$5:ProductFormatsInstances.this.JF[P2],implicitevidence$6:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(construct: (P1) ⇒ T, fieldName1: String)(arg0: JF[P1]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat[P1,T<:Product](construct:P1=>T,fieldName1:String)(implicitevidence$3:ProductFormatsInstances.this.JF[P1]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat1", "tail" : "(construct: (P1) ⇒ T)(arg0: JF[P1], arg1: ClassManifest[T]): RootJsonFormat[T]", "member" : "spray.json.ProductFormatsInstances.jsonFormat1", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#jsonFormat1[P1,T<:Product](construct:P1=>T)(implicitevidence$1:ProductFormatsInstances.this.JF[P1],implicitevidence$2:ClassManifest[T]):spray.json.RootJsonFormat[T]", "kind" : "def"}, {"label" : "viaSeq", "tail" : "(f: (Seq[T]) ⇒ I)(arg0: JsonFormat[T]): RootJsonFormat[I]", "member" : "spray.json.CollectionFormats.viaSeq", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#viaSeq[I<:Iterable[T],T](f:scala.collection.immutable.Seq[T]=>I)(implicitevidence$17:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[I]", "kind" : "def"}, {"label" : "setFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Set[T]]", "member" : "spray.json.CollectionFormats.setFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#setFormat[T](implicitevidence$16:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[scala.collection.Set[T]]", "kind" : "implicit def"}, {"label" : "linearSeqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[LinearSeq[T]]", "member" : "spray.json.CollectionFormats.linearSeqFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#linearSeqFormat[T](implicitevidence$15:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[scala.collection.LinearSeq[T]]", "kind" : "implicit def"}, {"label" : "indexedSeqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[IndexedSeq[T]]", "member" : "spray.json.CollectionFormats.indexedSeqFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#indexedSeqFormat[T](implicitevidence$14:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[IndexedSeq[T]]", "kind" : "implicit def"}, {"label" : "seqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Seq[T]]", "member" : "spray.json.CollectionFormats.seqFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#seqFormat[T](implicitevidence$13:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[Seq[T]]", "kind" : "implicit def"}, {"label" : "iterableFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Iterable[T]]", "member" : "spray.json.CollectionFormats.iterableFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#iterableFormat[T](implicitevidence$12:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[Iterable[T]]", "kind" : "implicit def"}, {"label" : "vectorFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Vector[T]]", "member" : "spray.json.CollectionFormats.vectorFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#vectorFormat[T](implicitevidence$11:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[Vector[T]]", "kind" : "implicit def"}, {"label" : "immSetFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Set[T]]", "member" : "spray.json.CollectionFormats.immSetFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#immSetFormat[T](implicitevidence$10:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[scala.collection.immutable.Set[T]]", "kind" : "implicit def"}, {"label" : "immLinearSeqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[LinearSeq[T]]", "member" : "spray.json.CollectionFormats.immLinearSeqFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#immLinearSeqFormat[T](implicitevidence$9:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[scala.collection.immutable.LinearSeq[T]]", "kind" : "implicit def"}, {"label" : "immIndexedSeqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[IndexedSeq[T]]", "member" : "spray.json.CollectionFormats.immIndexedSeqFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#immIndexedSeqFormat[T](implicitevidence$8:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[scala.collection.immutable.IndexedSeq[T]]", "kind" : "implicit def"}, {"label" : "immSeqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Seq[T]]", "member" : "spray.json.CollectionFormats.immSeqFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#immSeqFormat[T](implicitevidence$7:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[scala.collection.immutable.Seq[T]]", "kind" : "implicit def"}, {"label" : "immIterableFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Iterable[T]]", "member" : "spray.json.CollectionFormats.immIterableFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#immIterableFormat[T](implicitevidence$6:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[scala.collection.immutable.Iterable[T]]", "kind" : "implicit def"}, {"label" : "mapFormat", "tail" : "(arg0: JsonFormat[K], arg1: JsonFormat[V]): RootJsonFormat[Map[K, V]] { def write(m: Map[K,V]): spray.json.JsObject }", "member" : "spray.json.CollectionFormats.mapFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#mapFormat[K,V](implicitevidence$4:spray.json.JsonFormat[K],implicitevidence$5:spray.json.JsonFormat[V]):spray.json.RootJsonFormat[Map[K,V]]{defwrite(m:Map[K,V]):spray.json.JsObject}", "kind" : "implicit def"}, {"label" : "arrayFormat", "tail" : "(arg0: JsonFormat[T], arg1: ClassManifest[T]): RootJsonFormat[Array[T]] { def write(array: Array[T]): spray.json.JsArray }", "member" : "spray.json.CollectionFormats.arrayFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#arrayFormat[T](implicitevidence$2:spray.json.JsonFormat[T],implicitevidence$3:ClassManifest[T]):spray.json.RootJsonFormat[Array[T]]{defwrite(array:Array[T]):spray.json.JsArray}", "kind" : "implicit def"}, {"label" : "listFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[List[T]] { def write(list: List[T]): spray.json.JsArray }", "member" : "spray.json.CollectionFormats.listFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#listFormat[T](implicitevidence$1:spray.json.JsonFormat[T]):spray.json.RootJsonFormat[List[T]]{defwrite(list:List[T]):spray.json.JsArray}", "kind" : "implicit def"}, {"label" : "tuple7Format", "tail" : "(arg0: JF[A], arg1: JF[B], arg2: JF[C], arg3: JF[D], arg4: JF[E], arg5: JF[F], arg6: JF[G]): RootJsonFormat[(A, B, C, D, E, F, G)] { def write(t: (A, B, C, D, E, F, G)): spray.json.JsArray }", "member" : "spray.json.StandardFormats.tuple7Format", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#tuple7Format[A,B,C,D,E,F,G](implicitevidence$26:StandardFormats.this.JF[A],implicitevidence$27:StandardFormats.this.JF[B],implicitevidence$28:StandardFormats.this.JF[C],implicitevidence$29:StandardFormats.this.JF[D],implicitevidence$30:StandardFormats.this.JF[E],implicitevidence$31:StandardFormats.this.JF[F],implicitevidence$32:StandardFormats.this.JF[G]):spray.json.RootJsonFormat[(A,B,C,D,E,F,G)]{defwrite(t:(A,B,C,D,E,F,G)):spray.json.JsArray}", "kind" : "implicit def"}, {"label" : "tuple6Format", "tail" : "(arg0: JF[A], arg1: JF[B], arg2: JF[C], arg3: JF[D], arg4: JF[E], arg5: JF[F]): RootJsonFormat[(A, B, C, D, E, F)] { def write(t: (A, B, C, D, E, F)): spray.json.JsArray }", "member" : "spray.json.StandardFormats.tuple6Format", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#tuple6Format[A,B,C,D,E,F](implicitevidence$20:StandardFormats.this.JF[A],implicitevidence$21:StandardFormats.this.JF[B],implicitevidence$22:StandardFormats.this.JF[C],implicitevidence$23:StandardFormats.this.JF[D],implicitevidence$24:StandardFormats.this.JF[E],implicitevidence$25:StandardFormats.this.JF[F]):spray.json.RootJsonFormat[(A,B,C,D,E,F)]{defwrite(t:(A,B,C,D,E,F)):spray.json.JsArray}", "kind" : "implicit def"}, {"label" : "tuple5Format", "tail" : "(arg0: JF[A], arg1: JF[B], arg2: JF[C], arg3: JF[D], arg4: JF[E]): RootJsonFormat[(A, B, C, D, E)] { def write(t: (A, B, C, D, E)): spray.json.JsArray }", "member" : "spray.json.StandardFormats.tuple5Format", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#tuple5Format[A,B,C,D,E](implicitevidence$15:StandardFormats.this.JF[A],implicitevidence$16:StandardFormats.this.JF[B],implicitevidence$17:StandardFormats.this.JF[C],implicitevidence$18:StandardFormats.this.JF[D],implicitevidence$19:StandardFormats.this.JF[E]):spray.json.RootJsonFormat[(A,B,C,D,E)]{defwrite(t:(A,B,C,D,E)):spray.json.JsArray}", "kind" : "implicit def"}, {"label" : "tuple4Format", "tail" : "(arg0: JF[A], arg1: JF[B], arg2: JF[C], arg3: JF[D]): RootJsonFormat[(A, B, C, D)] { def write(t: (A, B, C, D)): spray.json.JsArray }", "member" : "spray.json.StandardFormats.tuple4Format", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#tuple4Format[A,B,C,D](implicitevidence$11:StandardFormats.this.JF[A],implicitevidence$12:StandardFormats.this.JF[B],implicitevidence$13:StandardFormats.this.JF[C],implicitevidence$14:StandardFormats.this.JF[D]):spray.json.RootJsonFormat[(A,B,C,D)]{defwrite(t:(A,B,C,D)):spray.json.JsArray}", "kind" : "implicit def"}, {"label" : "tuple3Format", "tail" : "(arg0: JF[A], arg1: JF[B], arg2: JF[C]): RootJsonFormat[(A, B, C)] { def write(t: (A, B, C)): spray.json.JsArray }", "member" : "spray.json.StandardFormats.tuple3Format", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#tuple3Format[A,B,C](implicitevidence$8:StandardFormats.this.JF[A],implicitevidence$9:StandardFormats.this.JF[B],implicitevidence$10:StandardFormats.this.JF[C]):spray.json.RootJsonFormat[(A,B,C)]{defwrite(t:(A,B,C)):spray.json.JsArray}", "kind" : "implicit def"}, {"label" : "tuple2Format", "tail" : "(arg0: JF[A], arg1: JF[B]): RootJsonFormat[(A, B)] { def write(t: (A, B)): spray.json.JsArray }", "member" : "spray.json.StandardFormats.tuple2Format", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#tuple2Format[A,B](implicitevidence$6:StandardFormats.this.JF[A],implicitevidence$7:StandardFormats.this.JF[B]):spray.json.RootJsonFormat[(A,B)]{defwrite(t:(A,B)):spray.json.JsArray}", "kind" : "implicit def"}, {"label" : "tuple1Format", "tail" : "(arg0: JF[A]): JF[(A)]", "member" : "spray.json.StandardFormats.tuple1Format", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#tuple1Format[A](implicitevidence$5:StandardFormats.this.JF[A]):StandardFormats.this.JF[(A,)]", "kind" : "implicit def"}, {"label" : "eitherFormat", "tail" : "(arg0: JF[A], arg1: JF[B]): JF[Either[A, B]]", "member" : "spray.json.StandardFormats.eitherFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#eitherFormat[A,B](implicitevidence$3:StandardFormats.this.JF[A],implicitevidence$4:StandardFormats.this.JF[B]):StandardFormats.this.JF[Either[A,B]]", "kind" : "implicit def"}, {"label" : "optionFormat", "tail" : "(arg0: JF[T]): JF[Option[T]]", "member" : "spray.json.StandardFormats.optionFormat", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#optionFormat[T](implicitevidence$1:StandardFormats.this.JF[T]):StandardFormats.this.JF[Option[T]]", "kind" : "implicit def"}, {"label" : "sprayJsValueMarshaller", "tail" : "(printer: JsonPrinter): ToEntityMarshaller[JsValue]", "member" : "akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport.sprayJsValueMarshaller", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#sprayJsValueMarshaller(implicitprinter:spray.json.JsonPrinter):akka.http.scaladsl.marshalling.ToEntityMarshaller[spray.json.JsValue]", "kind" : "implicit def"}, {"label" : "sprayJsonMarshaller", "tail" : "(writer: RootJsonWriter[T], printer: JsonPrinter): ToEntityMarshaller[T]", "member" : "akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport.sprayJsonMarshaller", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#sprayJsonMarshaller[T](implicitwriter:spray.json.RootJsonWriter[T],implicitprinter:spray.json.JsonPrinter):akka.http.scaladsl.marshalling.ToEntityMarshaller[T]", "kind" : "implicit def"}, {"label" : "sprayJsonMarshallerConverter", "tail" : "(writer: RootJsonWriter[T])(printer: JsonPrinter): ToEntityMarshaller[T]", "member" : "akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport.sprayJsonMarshallerConverter", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#sprayJsonMarshallerConverter[T](writer:spray.json.RootJsonWriter[T])(implicitprinter:spray.json.JsonPrinter):akka.http.scaladsl.marshalling.ToEntityMarshaller[T]", "kind" : "implicit def"}, {"label" : "sprayJsonSourceReader", "tail" : "(reader: RootJsonReader[T], support: EntityStreamingSupport): FromEntityUnmarshaller[Source[T, NotUsed]]", "member" : "akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport.sprayJsonSourceReader", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#sprayJsonSourceReader[T](implicitreader:spray.json.RootJsonReader[T],implicitsupport:akka.http.scaladsl.common.EntityStreamingSupport):akka.http.scaladsl.unmarshalling.FromEntityUnmarshaller[akka.stream.scaladsl.Source[T,akka.NotUsed]]", "kind" : "implicit def"}, {"label" : "sprayJsonByteStringUnmarshaller", "tail" : "(reader: RootJsonReader[T]): FromByteStringUnmarshaller[T]", "member" : "akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport.sprayJsonByteStringUnmarshaller", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#sprayJsonByteStringUnmarshaller[T](implicitreader:spray.json.RootJsonReader[T]):akka.http.scaladsl.unmarshalling.FromByteStringUnmarshaller[T]", "kind" : "implicit def"}, {"label" : "sprayJsValueByteStringUnmarshaller", "tail" : "(): FromByteStringUnmarshaller[JsValue]", "member" : "akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport.sprayJsValueByteStringUnmarshaller", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#sprayJsValueByteStringUnmarshaller[T]:akka.http.scaladsl.unmarshalling.FromByteStringUnmarshaller[spray.json.JsValue]", "kind" : "implicit def"}, {"label" : "sprayJsValueUnmarshaller", "tail" : "(): FromEntityUnmarshaller[JsValue]", "member" : "akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport.sprayJsValueUnmarshaller", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#sprayJsValueUnmarshaller:akka.http.scaladsl.unmarshalling.FromEntityUnmarshaller[spray.json.JsValue]", "kind" : "implicit def"}, {"label" : "sprayJsonUnmarshaller", "tail" : "(reader: RootJsonReader[T]): FromEntityUnmarshaller[T]", "member" : "akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport.sprayJsonUnmarshaller", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#sprayJsonUnmarshaller[T](implicitreader:spray.json.RootJsonReader[T]):akka.http.scaladsl.unmarshalling.FromEntityUnmarshaller[T]", "kind" : "implicit def"}, {"label" : "sprayJsonUnmarshallerConverter", "tail" : "(reader: RootJsonReader[T]): FromEntityUnmarshaller[T]", "member" : "akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport.sprayJsonUnmarshallerConverter", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#sprayJsonUnmarshallerConverter[T](reader:spray.json.RootJsonReader[T]):akka.http.scaladsl.unmarshalling.FromEntityUnmarshaller[T]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "logger", "tail" : ": LoggingAdapter", "member" : "ostinato.chess.server.OstinatoServerRoute.logger", "link" : "ostinato\/chess\/server\/OstinatoServerRoute.html#logger:akka.event.LoggingAdapter", "kind" : "abstract val"}], "shortDescription" : "", "trait" : "ostinato\/chess\/server\/OstinatoServerRoute.html", "kind" : "trait"}, {"name" : "ostinato.chess.server.ParallelisedChessBasicAi", "shortDescription" : "", "members_class" : [{"label" : "evaluateAllActions", "tail" : "(actions: Stream[ChessAction], game: ChessGame, optsForAi: ChessOptimisations): Seq[(ChessAction, Long)]", "member" : "ostinato.chess.server.ParallelisedChessBasicAi.evaluateAllActions", "link" : "ostinato\/chess\/server\/ParallelisedChessBasicAi.html#evaluateAllActions(actions:Stream[ostinato.chess.core.ChessAction],game:ostinato.chess.core.ChessGame,optsForAi:ostinato.chess.core.ChessOptimisations):scala.collection.immutable.Seq[(ostinato.chess.core.ChessAction,Long)]", "kind" : "def"}, {"member" : "ostinato.chess.server.ParallelisedChessBasicAi#<init>", "error" : "unsupported entity"}, {"label" : "alphabeta", "tail" : "(board: ChessBoard, action: ChessAction, depth: Int, alpha: Long, beta: Long)(opts: ChessOptimisations): Long", "member" : "ostinato.chess.ai.ChessBasicAi.alphabeta", "link" : "ostinato\/chess\/server\/ParallelisedChessBasicAi.html#alphabeta(board:ostinato.chess.core.ChessBoard,action:ostinato.chess.core.ChessAction,depth:Int,alpha:Long,beta:Long)(implicitopts:ostinato.chess.core.ChessOptimisations):Long", "kind" : "def"}, {"label" : "sort", "tail" : "(a: (ChessAction, Long), b: (ChessAction, Long)): Boolean", "member" : "ostinato.chess.ai.ChessBasicAi.sort", "link" : "ostinato\/chess\/server\/ParallelisedChessBasicAi.html#sort(a:(ostinato.chess.core.ChessAction,Long),b:(ostinato.chess.core.ChessAction,Long)):Boolean", "kind" : "def"}, {"label" : "nextAction", "tail" : "(game: ChessGame)(opts: ChessOptimisations): Option[ChessAction]", "member" : "ostinato.chess.ai.ChessBasicAi.nextAction", "link" : "ostinato\/chess\/server\/ParallelisedChessBasicAi.html#nextAction(game:ostinato.chess.core.ChessGame)(implicitopts:ostinato.chess.core.ChessOptimisations):Option[ostinato.chess.core.ChessAction]", "kind" : "def"}, {"label" : "debug", "tail" : ": Boolean", "member" : "ostinato.chess.ai.ChessBasicAi.debug", "link" : "ostinato\/chess\/server\/ParallelisedChessBasicAi.html#debug:Boolean", "kind" : "val"}, {"label" : "depth", "tail" : ": Int", "member" : "ostinato.chess.ai.ChessBasicAi.depth", "link" : "ostinato\/chess\/server\/ParallelisedChessBasicAi.html#depth:Int", "kind" : "val"}, {"label" : "player", "tail" : ": ChessPlayer", "member" : "ostinato.chess.ai.ChessBasicAi.player", "link" : "ostinato\/chess\/server\/ParallelisedChessBasicAi.html#player:ostinato.chess.core.ChessPlayer", "kind" : "val"}, {"label" : "random", "tail" : ": Random", "member" : "ostinato.core.Ai.random", "link" : "ostinato\/chess\/server\/ParallelisedChessBasicAi.html#random:scala.util.Random", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/server\/ParallelisedChessBasicAi.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/server\/ParallelisedChessBasicAi.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/server\/ParallelisedChessBasicAi.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/server\/ParallelisedChessBasicAi.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/server\/ParallelisedChessBasicAi.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/server\/ParallelisedChessBasicAi.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/server\/ParallelisedChessBasicAi.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/server\/ParallelisedChessBasicAi.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/server\/ParallelisedChessBasicAi.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/server\/ParallelisedChessBasicAi.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/server\/ParallelisedChessBasicAi.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/server\/ParallelisedChessBasicAi.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/server\/ParallelisedChessBasicAi.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/server\/ParallelisedChessBasicAi.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/server\/ParallelisedChessBasicAi.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/server\/ParallelisedChessBasicAi.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "ostinato\/chess\/server\/ParallelisedChessBasicAi.html", "kind" : "class"}, {"name" : "ostinato.chess.server.RequestBasicAI", "shortDescription" : "", "members_case class" : [{"member" : "ostinato.chess.server.RequestBasicAI#<init>", "error" : "unsupported entity"}, {"label" : "debug", "tail" : ": Boolean", "member" : "ostinato.chess.server.RequestBasicAI.debug", "link" : "ostinato\/chess\/server\/RequestBasicAI.html#debug:Boolean", "kind" : "val"}, {"label" : "depth", "tail" : ": Int", "member" : "ostinato.chess.server.RequestBasicAI.depth", "link" : "ostinato\/chess\/server\/RequestBasicAI.html#depth:Int", "kind" : "val"}, {"label" : "board", "tail" : ": String", "member" : "ostinato.chess.server.RequestBasicAI.board", "link" : "ostinato\/chess\/server\/RequestBasicAI.html#board:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/server\/RequestBasicAI.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/server\/RequestBasicAI.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/server\/RequestBasicAI.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/server\/RequestBasicAI.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/server\/RequestBasicAI.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/server\/RequestBasicAI.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/server\/RequestBasicAI.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/server\/RequestBasicAI.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/server\/RequestBasicAI.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/server\/RequestBasicAI.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/server\/RequestBasicAI.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/server\/RequestBasicAI.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/server\/RequestBasicAI.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/server\/RequestBasicAI.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/server\/RequestBasicAI.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/server\/RequestBasicAI.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/server\/RequestBasicAI.html", "kind" : "case class"}, {"name" : "ostinato.chess.server.RequestConvertNotation", "shortDescription" : "", "members_case class" : [{"member" : "ostinato.chess.server.RequestConvertNotation#<init>", "error" : "unsupported entity"}, {"label" : "notation", "tail" : ": String", "member" : "ostinato.chess.server.RequestConvertNotation.notation", "link" : "ostinato\/chess\/server\/RequestConvertNotation.html#notation:String", "kind" : "val"}, {"label" : "input", "tail" : ": String", "member" : "ostinato.chess.server.RequestConvertNotation.input", "link" : "ostinato\/chess\/server\/RequestConvertNotation.html#input:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/server\/RequestConvertNotation.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/server\/RequestConvertNotation.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/server\/RequestConvertNotation.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/server\/RequestConvertNotation.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/server\/RequestConvertNotation.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/server\/RequestConvertNotation.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/server\/RequestConvertNotation.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/server\/RequestConvertNotation.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/server\/RequestConvertNotation.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/server\/RequestConvertNotation.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/server\/RequestConvertNotation.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/server\/RequestConvertNotation.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/server\/RequestConvertNotation.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/server\/RequestConvertNotation.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/server\/RequestConvertNotation.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/server\/RequestConvertNotation.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/server\/RequestConvertNotation.html", "kind" : "case class"}, {"name" : "ostinato.chess.server.RequestMove", "shortDescription" : "", "members_case class" : [{"member" : "ostinato.chess.server.RequestMove#<init>", "error" : "unsupported entity"}, {"label" : "to", "tail" : ": String", "member" : "ostinato.chess.server.RequestMove.to", "link" : "ostinato\/chess\/server\/RequestMove.html#to:String", "kind" : "val"}, {"label" : "from", "tail" : ": String", "member" : "ostinato.chess.server.RequestMove.from", "link" : "ostinato\/chess\/server\/RequestMove.html#from:String", "kind" : "val"}, {"label" : "board", "tail" : ": String", "member" : "ostinato.chess.server.RequestMove.board", "link" : "ostinato\/chess\/server\/RequestMove.html#board:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/server\/RequestMove.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/server\/RequestMove.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/server\/RequestMove.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/server\/RequestMove.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/server\/RequestMove.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/server\/RequestMove.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/server\/RequestMove.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/server\/RequestMove.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/server\/RequestMove.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/server\/RequestMove.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/server\/RequestMove.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/server\/RequestMove.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/server\/RequestMove.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/server\/RequestMove.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/server\/RequestMove.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/server\/RequestMove.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/server\/RequestMove.html", "kind" : "case class"}, {"name" : "ostinato.chess.server.RequestParseNotation", "shortDescription" : "", "members_case class" : [{"member" : "ostinato.chess.server.RequestParseNotation#<init>", "error" : "unsupported entity"}, {"label" : "input", "tail" : ": String", "member" : "ostinato.chess.server.RequestParseNotation.input", "link" : "ostinato\/chess\/server\/RequestParseNotation.html#input:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/server\/RequestParseNotation.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/server\/RequestParseNotation.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/server\/RequestParseNotation.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/server\/RequestParseNotation.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/server\/RequestParseNotation.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/server\/RequestParseNotation.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/server\/RequestParseNotation.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/server\/RequestParseNotation.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/server\/RequestParseNotation.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/server\/RequestParseNotation.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/server\/RequestParseNotation.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/server\/RequestParseNotation.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/server\/RequestParseNotation.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/server\/RequestParseNotation.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/server\/RequestParseNotation.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/server\/RequestParseNotation.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/server\/RequestParseNotation.html", "kind" : "case class"}, {"name" : "ostinato.chess.server.RequestRandomAI", "shortDescription" : "", "members_case class" : [{"member" : "ostinato.chess.server.RequestRandomAI#<init>", "error" : "unsupported entity"}, {"label" : "board", "tail" : ": String", "member" : "ostinato.chess.server.RequestRandomAI.board", "link" : "ostinato\/chess\/server\/RequestRandomAI.html#board:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/server\/RequestRandomAI.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/server\/RequestRandomAI.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/server\/RequestRandomAI.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/server\/RequestRandomAI.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/server\/RequestRandomAI.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/server\/RequestRandomAI.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/server\/RequestRandomAI.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/server\/RequestRandomAI.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/server\/RequestRandomAI.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/server\/RequestRandomAI.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/server\/RequestRandomAI.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/server\/RequestRandomAI.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/server\/RequestRandomAI.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/server\/RequestRandomAI.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/server\/RequestRandomAI.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/server\/RequestRandomAI.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/server\/RequestRandomAI.html", "kind" : "case class"}, {"name" : "ostinato.chess.server.ServerApi", "shortDescription" : "", "members_case class" : [{"label" : "instantiateChessBasicAi", "tail" : "(_player: ChessPlayer, _depth: Int, _debug: Boolean): ParallelisedChessBasicAi", "member" : "ostinato.chess.server.ServerApi.instantiateChessBasicAi", "link" : "ostinato\/chess\/server\/ServerApi.html#instantiateChessBasicAi(_player:ostinato.chess.core.ChessPlayer,_depth:Int,_debug:Boolean):ostinato.chess.server.ParallelisedChessBasicAi", "kind" : "def"}, {"member" : "ostinato.chess.server.ServerApi#<init>", "error" : "unsupported entity"}, {"label" : "convertNotation", "tail" : "(input: String, notation: String): Map[String, Any]", "member" : "ostinato.chess.api.Api.convertNotation", "link" : "ostinato\/chess\/server\/ServerApi.html#convertNotation(input:String,notation:String):Map[String,Any]", "kind" : "def"}, {"label" : "parseNotation", "tail" : "(input: String): Map[String, Any]", "member" : "ostinato.chess.api.Api.parseNotation", "link" : "ostinato\/chess\/server\/ServerApi.html#parseNotation(input:String):Map[String,Any]", "kind" : "def"}, {"label" : "randomAiMove", "tail" : "(fen: String): Map[String, Any]", "member" : "ostinato.chess.api.Api.randomAiMove", "link" : "ostinato\/chess\/server\/ServerApi.html#randomAiMove(fen:String):Map[String,Any]", "kind" : "def"}, {"label" : "basicAiMove", "tail" : "(fen: String, _depth: Int, _debug: Boolean): Map[String, Any]", "member" : "ostinato.chess.api.Api.basicAiMove", "link" : "ostinato\/chess\/server\/ServerApi.html#basicAiMove(fen:String,_depth:Int,_debug:Boolean):Map[String,Any]", "kind" : "def"}, {"label" : "move", "tail" : "(ostinatoString: String, from: String, to: String): Map[String, Any]", "member" : "ostinato.chess.api.Api.move", "link" : "ostinato\/chess\/server\/ServerApi.html#move(ostinatoString:String,from:String,to:String):Map[String,Any]", "kind" : "def"}, {"label" : "defaultGame", "tail" : ": String", "member" : "ostinato.chess.api.Api.defaultGame", "link" : "ostinato\/chess\/server\/ServerApi.html#defaultGame:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "ostinato\/chess\/server\/ServerApi.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "ostinato\/chess\/server\/ServerApi.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "ostinato\/chess\/server\/ServerApi.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "ostinato\/chess\/server\/ServerApi.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "ostinato\/chess\/server\/ServerApi.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "ostinato\/chess\/server\/ServerApi.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "ostinato\/chess\/server\/ServerApi.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/server\/ServerApi.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/server\/ServerApi.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "ostinato\/chess\/server\/ServerApi.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "ostinato\/chess\/server\/ServerApi.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "ostinato\/chess\/server\/ServerApi.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "ostinato\/chess\/server\/ServerApi.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "ostinato\/chess\/server\/ServerApi.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "ostinato\/chess\/server\/ServerApi.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "ostinato\/chess\/server\/ServerApi.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "ostinato\/chess\/server\/ServerApi.html", "kind" : "case class"}], "ostinato" : []};