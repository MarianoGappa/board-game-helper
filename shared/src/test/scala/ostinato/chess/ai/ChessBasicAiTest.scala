package ostinato.chess.ai

import org.scalatest._
import ostinato.chess.core._
import ostinato.core.XY

class ChessBasicAiTest extends FunSpec with Matchers {
  describe("Basic AI") {
    it("should choose check mate if available") {
      val game = ChessGame.fromGridString(
        """........
          |..♔.....
          |........
          |........
          |........
          |♖.......
          |.♖......
          |.....♚..""".stripMargin).get

      ChessBasicAi(WhiteChessPlayer).nextAction(game) shouldBe
        Some(MoveAction(♜(XY(0, 5), WhiteChessPlayer), XY(0, 2), isCheck = true, isCheckmate = true))
    }
    it("should choose capturing if available, given no check mate available") {
      val game = ChessGame.fromGridString(
        """........
          |..♔.....
          |........
          |........
          |........
          |♖...♞...
          |........
          |.....♚..""".stripMargin).get

      ChessBasicAi(WhiteChessPlayer).nextAction(game) shouldBe
        Some(CaptureAction(♜(XY(0, 5), WhiteChessPlayer), XY(4, 0), ♞(XY(4, 5), BlackChessPlayer)))
    }
    it("should not choose capturing if it will leave a threatened undefended piece of greater value") {
      val game = ChessGame.fromGridString(
        """........
          |..♔.....
          |♙.......
          |........
          |........
          |♖...♞..♟
          |.....♚..
          |........""".stripMargin).get

      ChessBasicAi(WhiteChessPlayer).nextAction(game) should not be a [CaptureAction]
    }
    it("should choose to promote to Queen") {
      val game = ChessGame.fromGridString(
        """........
          |.♔..♙...
          |....♚...
          |........
          |........
          |........
          |........
          |........""".stripMargin).get

      ChessBasicAi(WhiteChessPlayer).nextAction(game) shouldBe
        Some(PromoteAction(♟(XY(4, 1), WhiteChessPlayer, -1), XY(0, -1), ♛(XY(4, 0), WhiteChessPlayer), isCheck = true, isCheckmate = false))
    }
    it("should choose to promote to Knight") {
      val game = ChessGame.fromGridString(
        """........
          |♚.♙.....
          |.......♖
          |...♗....
          |........
          |........
          |........
          |♘♖.....♔""".stripMargin).get

      ChessBasicAi(WhiteChessPlayer).nextAction(game) shouldBe
        Some(PromoteAction(♟(XY(2, 1), WhiteChessPlayer, -1), XY(0, -1), ♞(XY(2, 0), WhiteChessPlayer), isCheck = true, isCheckmate = true))
    }
    it("should choose to capture when the enemy piece has more value, even if it is defended") {
      val game = ChessGame.fromGridString(
        """........
          |♚.......
          |..♗.....
          |........
          |....♜...
          |.....♟..
          |........
          |.......♔""".stripMargin).get

      ChessBasicAi(WhiteChessPlayer).nextAction(game) shouldBe
        Some(CaptureAction(♝(XY(2, 2), WhiteChessPlayer), XY(2, 2), ♜(XY(4, 4), BlackChessPlayer)))
    }
    it("should prefer not to exchange rooks given it has material value disadvantage") {
      val game = ChessGame.fromGridString(
        """♜.......
          |........
          |..♟.....
          |........
          |.....♙..
          |♖.......
          |.♙......
          |........""".stripMargin, turn = BlackChessPlayer).get

      ChessBasicAi(BlackChessPlayer, depth = 0).nextAction(game).get shouldBe a[MoveAction]
    }
  }
}
