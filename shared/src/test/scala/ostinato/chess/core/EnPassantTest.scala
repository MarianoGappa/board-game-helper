package ostinato.chess.core

import org.scalatest._

import scala.util.Failure

class EnPassantTest extends FunSpec with Matchers {
  describe("En Passant") {
    it("should find only en passant capture action for black pawn") {
      val game = ChessGame.fromGridString(
        """........
          |........
          |........
          |........
          |........
          |..♟♙....
          |..♟↑....
          |........""".stripMargin, turn = BlackChessPlayer).get

      game.board.pieces.head.actions(game.board).size shouldBe 1
      game.board.pieces.head.actions(game.board).head shouldBe a [EnPassantCaptureAction]
    }
    it("should find 2 actions including en passant for white pawn (plus Resigning and offering Draw)") {
      val game = ChessGame.fromGridString(
        """........
          |........
          |...↓....
          |...♟♙...
          |........
          |........
          |........
          |........""".stripMargin, turn = WhiteChessPlayer).get

      game.board.actions.size shouldBe 4
    }
    it("should not find en passant capture action for black pawn, since king would be threatened") {
      val game = ChessGame.fromGridString(
        """....♖...
          |........
          |...↓....
          |...♙♟...
          |........
          |........
          |....♚...
          |........""".stripMargin, turn = BlackChessPlayer).get

      val board = game.board
      game.blackPlayer.pieces(board).head.actions(board).size shouldBe 1
    }
    it("should not parse a game with 2 en passant pawns") {
      val game = ChessGame.fromGridString(
        """........
          |........
          |...↓....
          |...♙....
          |.....♟..
          |.....↑..
          |........
          |........""".stripMargin) shouldBe Failure(MoreThanOneEnPassantPawnException)
    }
  }
}
